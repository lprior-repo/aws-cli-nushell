# AWS EC2 Service Module
# Generated by Universal AWS Generator
# Operations: 694
# Generated: 2025-10-08 03:03:14
# Source: schema_file

# Configure mock mode for testing
# Note: Mock mode can be enabled by setting environment variable

# Service metadata
export def "aws ec2 info" []: nothing -> record {
    {
        service: "ec2",
        operations_count: 694,
        generated_at: "2025-10-08 03:03:14",
        mock_mode: false
    }
}

# <p>Accepts an Elastic IP address transfer. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#using-instance-addressing-eips-transfer-accept">Accept a transferred Elastic IP address</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 acceptaddresstransfer" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 acceptaddresstransfer | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Accepts a request to assign billing of the available capacity of a shared Capacity Reservation to your account. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/assign-billing.html"> Billing assignment for shared Amazon EC2 Capacity Reservations</a>.</p>
export def "aws ec2 acceptcapacityreservationbillingownership" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 acceptcapacityreservationbillingownership | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Accepts the Convertible Reserved Instance exchange quote described in the <a>GetReservedInstancesExchangeQuote</a> call.</p>
export def "aws ec2 acceptreservedinstancesexchangequote" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 acceptreservedinstancesexchangequote | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Accepts a request to associate subnets with a transit gateway multicast domain.</p>
export def "aws ec2 accepttransitgatewaymulticastdomainassociations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 accepttransitgatewaymulticastdomainassociations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Accepts a transit gateway peering attachment request. The peering attachment must be in the <code>pendingAcceptance</code> state.</p>
export def "aws ec2 accepttransitgatewaypeeringattachment" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 accepttransitgatewaypeeringattachment | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Accepts a request to attach a VPC to a transit gateway.</p> <p>The VPC attachment must be in the <code>pendingAcceptance</code> state. Use <a>DescribeTransitGatewayVpcAttachments</a> to view your pending VPC attachment requests. Use <a>RejectTransitGatewayVpcAttachment</a> to reject a VPC attachment request.</p>
export def "aws ec2 accepttransitgatewayvpcattachment" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 accepttransitgatewayvpcattachment | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Accepts connection requests to your VPC endpoint service.</p>
export def "aws ec2 acceptvpcendpointconnections" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 acceptvpcendpointconnections | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Accept a VPC peering connection request. To accept a request, the VPC peering connection must be in the <code>pending-acceptance</code> state, and you must be the owner of the peer VPC. Use <a>DescribeVpcPeeringConnections</a> to view your outstanding VPC peering connection requests.</p> <p>For an inter-Region VPC peering connection request, you must accept the VPC peering connection in the Region of the accepter VPC.</p>
export def "aws ec2 acceptvpcpeeringconnection" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 acceptvpcpeeringconnection | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Advertises an IPv4 or IPv6 address range that is provisioned for use with your Amazon Web Services resources through bring your own IP addresses (BYOIP).</p> <p>You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time.</p> <p>We recommend that you stop advertising the BYOIP CIDR from other locations when you advertise it from Amazon Web Services. To minimize down time, you can configure your Amazon Web Services resources to use an address from a BYOIP CIDR before it is advertised, and then simultaneously stop advertising it from the current location and start advertising it through Amazon Web Services.</p> <p>It can take a few minutes before traffic to the specified addresses starts routing to Amazon Web Services because of BGP propagation delays.</p>
export def "aws ec2 advertisebyoipcidr" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 advertisebyoipcidr | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Allocates an Elastic IP address to your Amazon Web Services account. After you allocate the Elastic IP address you can associate it with an instance or network interface. After you release an Elastic IP address, it is released to the IP address pool and can be allocated to a different Amazon Web Services account.</p> <p>You can allocate an Elastic IP address from an address pool owned by Amazon Web Services or from an address pool created from a public IPv4 address range that you have brought to Amazon Web Services for use with your Amazon Web Services resources using bring your own IP addresses (BYOIP). For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">Bring Your Own IP Addresses (BYOIP)</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>If you release an Elastic IP address, you might be able to recover it. You cannot recover an Elastic IP address that you released after it is allocated to another Amazon Web Services account. To attempt to recover an Elastic IP address that you released, specify it in this operation.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>You can allocate a carrier IP address which is a public IP address from a telecommunication carrier, to a network interface which resides in a subnet in a Wavelength Zone (for example an EC2 instance).</p>
export def "aws ec2 allocateaddress" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 allocateaddress | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Allocates a Dedicated Host to your account. At a minimum, specify the supported instance type or instance family, the Availability Zone in which to allocate the host, and the number of hosts to allocate.</p>
export def "aws ec2 allocatehosts" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 allocatehosts | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Allocate a CIDR from an IPAM pool. The Region you use should be the IPAM pool locale. The locale is the Amazon Web Services Region where this IPAM pool is available for allocations.</p> <p>In IPAM, an allocation is a CIDR assignment from an IPAM pool to another IPAM pool or to a resource. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/allocate-cidrs-ipam.html">Allocate CIDRs</a> in the <i>Amazon VPC IPAM User Guide</i>.</p> <note> <p>This action creates an allocation with strong consistency. The returned CIDR will not overlap with any other allocations from the same pool.</p> </note>
export def "aws ec2 allocateipampoolcidr" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 allocateipampoolcidr | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Applies a security group to the association between the target network and the Client VPN endpoint. This action replaces the existing security groups with the specified security groups.</p>
export def "aws ec2 applysecuritygroupstoclientvpntargetnetwork" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 applysecuritygroupstoclientvpntargetnetwork | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Assigns the specified IPv6 addresses to the specified network interface. You can specify specific IPv6 addresses, or you can specify the number of IPv6 addresses to be automatically assigned from the subnet's IPv6 CIDR block range. You can assign as many IPv6 addresses to a network interface as you can assign private IPv4 addresses, and the limit varies by instance type.</p> <p>You must specify either the IPv6 addresses or the IPv6 address count in the request. </p> <p>You can optionally use Prefix Delegation on the network interface. You must specify either the IPV6 Prefix Delegation prefixes, or the IPv6 Prefix Delegation count. For information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-eni.html"> Assigning prefixes to network interfaces</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 assignipv6addresses" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 assignipv6addresses | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Assigns the specified secondary private IP addresses to the specified network interface.</p> <p>You can specify specific secondary IP addresses, or you can specify the number of secondary IP addresses to be automatically assigned from the subnet's CIDR block range. The number of secondary IP addresses that you can assign to an instance varies by instance type. For more information about Elastic IP addresses, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>When you move a secondary private IP address to another network interface, any Elastic IP address that is associated with the IP address is also moved.</p> <p>Remapping an IP address is an asynchronous operation. When you move an IP address from one network interface to another, check <code>network/interfaces/macs/mac/local-ipv4s</code> in the instance metadata to confirm that the remapping is complete.</p> <p>You must specify either the IP addresses or the IP address count in the request.</p> <p>You can optionally use Prefix Delegation on the network interface. You must specify either the IPv4 Prefix Delegation prefixes, or the IPv4 Prefix Delegation count. For information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-prefix-eni.html"> Assigning prefixes to network interfaces</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 assignprivateipaddresses" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 assignprivateipaddresses | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Assigns private IPv4 addresses to a private NAT gateway. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/nat-gateway-working-with.html">Work with NAT gateways</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 assignprivatenatgatewayaddress" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 assignprivatenatgatewayaddress | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Associates an Elastic IP address, or carrier IP address (for instances that are in subnets in Wavelength Zones) with an instance or a network interface. Before you can use an Elastic IP address, you must allocate it to your account.</p> <p>If the Elastic IP address is already associated with a different instance, it is disassociated from that instance and associated with the specified instance. If you associate an Elastic IP address with an instance that has an existing Elastic IP address, the existing address is disassociated from the instance, but remains allocated to your account.</p> <p>[Subnets in Wavelength Zones] You can associate an IP address from the telecommunication carrier to the instance or network interface. </p> <p>You cannot associate an Elastic IP address with an interface in a different network border group.</p> <important> <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error, and you may be charged for each time the Elastic IP address is remapped to the same instance. For more information, see the <i>Elastic IP Addresses</i> section of <a href="http://aws.amazon.com/ec2/pricing/">Amazon EC2 Pricing</a>.</p> </important>
export def "aws ec2 associateaddress" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 associateaddress | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Initiates a request to assign billing of the unused capacity of a shared Capacity Reservation to a consumer account that is consolidated under the same Amazon Web Services organizations payer account. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/assign-billing.html">Billing assignment for shared Amazon EC2 Capacity Reservations</a>.</p>
export def "aws ec2 associatecapacityreservationbillingowner" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 associatecapacityreservationbillingowner | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Associates a target network with a Client VPN endpoint. A target network is a subnet in a VPC. You can associate multiple subnets from the same VPC with a Client VPN endpoint. You can associate only one subnet in each Availability Zone. We recommend that you associate at least two subnets to provide Availability Zone redundancy.</p> <p>If you specified a VPC when you created the Client VPN endpoint or if you have previous subnet associations, the specified subnet must be in the same VPC. To specify a subnet that's in a different VPC, you must first modify the Client VPN endpoint (<a>ModifyClientVpnEndpoint</a>) and change the VPC that's associated with it.</p>
export def "aws ec2 associateclientvpntargetnetwork" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 associateclientvpntargetnetwork | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Associates a set of DHCP options (that you've previously created) with the specified VPC, or associates no DHCP options with the VPC.</p> <p>After you associate the options with the VPC, any existing instances and all new instances that you launch in that VPC use the options. You don't need to restart or relaunch the instances. They automatically pick up the changes within a few hours, depending on how frequently the instance renews its DHCP lease. You can explicitly renew the lease using the operating system on the instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP option sets</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 associatedhcpoptions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 associatedhcpoptions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Associates an Identity and Access Management (IAM) role with an Certificate Manager (ACM) certificate. This enables the certificate to be used by the ACM for Nitro Enclaves application inside an enclave. For more information, see <a href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave-refapp.html">Certificate Manager for Nitro Enclaves</a> in the <i>Amazon Web Services Nitro Enclaves User Guide</i>.</p> <p>When the IAM role is associated with the ACM certificate, the certificate, certificate chain, and encrypted private key are placed in an Amazon S3 location that only the associated IAM role can access. The private key of the certificate is encrypted with an Amazon Web Services managed key that has an attached attestation-based key policy.</p> <p>To enable the IAM role to access the Amazon S3 object, you must grant it permission to call <code>s3:GetObject</code> on the Amazon S3 bucket returned by the command. To enable the IAM role to access the KMS key, you must grant it permission to call <code>kms:Decrypt</code> on the KMS key returned by the command. For more information, see <a href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave-refapp.html#add-policy"> Grant the role permission to access the certificate and encryption key</a> in the <i>Amazon Web Services Nitro Enclaves User Guide</i>.</p>
export def "aws ec2 associateenclavecertificateiamrole" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 associateenclavecertificateiamrole | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Associates an IAM instance profile with a running or stopped instance. You cannot associate more than one IAM instance profile with an instance.</p>
export def "aws ec2 associateiaminstanceprofile" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 associateiaminstanceprofile | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Associates one or more targets with an event window. Only one type of target (instance IDs, Dedicated Host IDs, or tags) can be specified with an event window.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled events</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 associateinstanceeventwindow" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 associateinstanceeventwindow | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Associates your Autonomous System Number (ASN) with a BYOIP CIDR that you own in the same Amazon Web Services Region. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoasn.html">Tutorial: Bring your ASN to IPAM</a> in the <i>Amazon VPC IPAM guide</i>.</p> <p>After the association succeeds, the ASN is eligible for advertisement. You can view the association with <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeByoipCidrs.html">DescribeByoipCidrs</a>. You can advertise the CIDR with <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AdvertiseByoipCidr.html">AdvertiseByoipCidr</a>.</p>
export def "aws ec2 associateipambyoasn" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 associateipambyoasn | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Associates an IPAM resource discovery with an Amazon VPC IPAM. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.</p>
export def "aws ec2 associateipamresourcediscovery" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 associateipamresourcediscovery | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Associates Elastic IP addresses (EIPs) and private IPv4 addresses with a public NAT gateway. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/nat-gateway-working-with.html">Work with NAT gateways</a> in the <i>Amazon VPC User Guide</i>.</p> <p>By default, you can associate up to 2 Elastic IP addresses per public NAT gateway. You can increase the limit by requesting a quota adjustment. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html#vpc-limits-eips">Elastic IP address quotas</a> in the <i>Amazon VPC User Guide</i>.</p> <important> <p>When you associate an EIP or secondary EIPs with a public NAT gateway, the network border group of the EIPs must match the network border group of the Availability Zone (AZ) that the public NAT gateway is in. If it's not the same, the EIP will fail to associate. You can see the network border group for the subnet's AZ by viewing the details of the subnet. Similarly, you can view the network border group of an EIP by viewing the details of the EIP address. For more information about network border groups and EIPs, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/WorkWithEIPs.html">Allocate an Elastic IP address</a> in the <i>Amazon VPC User Guide</i>. </p> </important>
export def "aws ec2 associatenatgatewayaddress" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 associatenatgatewayaddress | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Associates a route server with a VPC to enable dynamic route updates.</p> <p>A route server association is the connection established between a route server and a VPC.</p> <p>For more information see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/dynamic-routing-route-server.html">Dynamic routing in your VPC with VPC Route Server</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 associaterouteserver" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 associaterouteserver | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Associates a subnet in your VPC or an internet gateway or virtual private gateway attached to your VPC with a route table in your VPC. This association causes traffic from the subnet or gateway to be routed according to the routes in the route table. The action returns an association ID, which you need in order to disassociate the route table later. A route table can be associated with multiple subnets.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route tables</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 associateroutetable" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 associateroutetable | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Associates a security group with another VPC in the same Region. This enables you to use the same security group with network interfaces and instances in the specified VPC.</p> <note> <ul> <li> <p>The VPC you want to associate the security group with must be in the same Region.</p> </li> <li> <p>You can associate the security group with another VPC if your account owns the VPC or if the VPC was shared with you.</p> </li> <li> <p>You must own the security group.</p> </li> <li> <p>You cannot use this feature with default security groups.</p> </li> <li> <p>You cannot use this feature with the default VPC.</p> </li> </ul> </note>
export def "aws ec2 associatesecuritygroupvpc" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 associatesecuritygroupvpc | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Associates a CIDR block with your subnet. You can only associate a single IPv6 CIDR block with your subnet.</p>
export def "aws ec2 associatesubnetcidrblock" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 associatesubnetcidrblock | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Associates the specified subnets and transit gateway attachments with the specified transit gateway multicast domain.</p> <p>The transit gateway attachment must be in the available state before you can add a resource. Use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGatewayAttachments.html">DescribeTransitGatewayAttachments</a> to see the state of the attachment.</p>
export def "aws ec2 associatetransitgatewaymulticastdomain" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 associatetransitgatewaymulticastdomain | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Associates the specified transit gateway attachment with a transit gateway policy table.</p>
export def "aws ec2 associatetransitgatewaypolicytable" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 associatetransitgatewaypolicytable | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Associates the specified attachment with the specified transit gateway route table. You can associate only one route table with an attachment.</p>
export def "aws ec2 associatetransitgatewayroutetable" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 associatetransitgatewayroutetable | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Associates a branch network interface with a trunk network interface.</p> <p>Before you create the association, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateNetworkInterface.html">CreateNetworkInterface</a> command and set the interface type to <code>trunk</code>. You must also create a network interface for each branch network interface that you want to associate with the trunk network interface.</p>
export def "aws ec2 associatetrunkinterface" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 associatetrunkinterface | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Associates a CIDR block with your VPC. You can associate a secondary IPv4 CIDR block, an Amazon-provided IPv6 CIDR block, or an IPv6 CIDR block from an IPv6 address pool that you provisioned through bring your own IP addresses (<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">BYOIP</a>).</p> <p>You must specify one of the following in the request: an IPv4 CIDR block, an IPv6 pool, or an Amazon-provided IPv6 CIDR block.</p> <p>For more information about associating CIDR blocks with your VPC and applicable restrictions, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-ip-addressing.html">IP addressing for your VPCs and subnets</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 associatevpccidrblock" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 associatevpccidrblock | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <note> <p>This action is deprecated.</p> </note> <p>Links an EC2-Classic instance to a ClassicLink-enabled VPC through one or more of the VPC security groups. You cannot link an EC2-Classic instance to more than one VPC at a time. You can only link an instance that's in the <code>running</code> state. An instance is automatically unlinked from a VPC when it's stopped - you can link it to the VPC again when you restart it.</p> <p>After you've linked an instance, you cannot change the VPC security groups that are associated with it. To change the security groups, you must first unlink the instance, and then link it again.</p> <p>Linking your instance to a VPC is sometimes referred to as <i>attaching</i> your instance.</p>
export def "aws ec2 attachclassiclinkvpc" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 attachclassiclinkvpc | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Attaches an internet gateway or a virtual private gateway to a VPC, enabling connectivity between the internet and the VPC. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Internet_Gateway.html">Internet gateways</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 attachinternetgateway" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 attachinternetgateway | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Attaches a network interface to an instance.</p>
export def "aws ec2 attachnetworkinterface" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 attachnetworkinterface | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Attaches the specified Amazon Web Services Verified Access trust provider to the specified Amazon Web Services Verified Access instance.</p>
export def "aws ec2 attachverifiedaccesstrustprovider" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 attachverifiedaccesstrustprovider | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Attaches an Amazon EBS volume to a <code>running</code> or <code>stopped</code> instance, and exposes it to the instance with the specified device name.</p> <note> <p>The maximum number of Amazon EBS volumes that you can attach to an instance depends on the instance type. If you exceed the volume attachment limit for an instance type, the attachment request fails with the <code>AttachmentLimitExceeded</code> error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/volume_limits.html">Instance volume limits</a>.</p> </note> <p>After you attach an EBS volume, you must make it available for use. For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-using-volumes.html">Make an EBS volume available for use</a>.</p> <p>If a volume has an Amazon Web Services Marketplace product code:</p> <ul> <li> <p>The volume can be attached only to a stopped instance.</p> </li> <li> <p>Amazon Web Services Marketplace product codes are copied from the volume to the instance.</p> </li> <li> <p>You must be subscribed to the product.</p> </li> <li> <p>The instance type and operating system of the instance must support the product. For example, you can't detach a volume from a Windows instance and attach it to a Linux instance.</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-attaching-volume.html">Attach an Amazon EBS volume to an instance</a> in the <i>Amazon EBS User Guide</i>.</p>
export def "aws ec2 attachvolume" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 attachvolume | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Attaches an available virtual private gateway to a VPC. You can attach one virtual private gateway to one VPC at a time.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services Site-to-Site VPN User Guide</i>.</p>
export def "aws ec2 attachvpngateway" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 attachvpngateway | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Adds an ingress authorization rule to a Client VPN endpoint. Ingress authorization rules act as firewall rules that grant access to networks. You must configure ingress authorization rules to enable clients to access resources in Amazon Web Services or on-premises networks.</p>
export def "aws ec2 authorizeclientvpningress" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 authorizeclientvpningress | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Adds the specified outbound (egress) rules to a security group.</p> <p>An outbound rule permits instances to send traffic to the specified IPv4 or IPv6 address ranges, the IP address ranges specified by a prefix list, or the instances that are associated with a source security group. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/security-group-rules.html">Security group rules</a>.</p> <p>You must specify exactly one of the following destinations: an IPv4 or IPv6 address range, a prefix list, or a security group. You must specify a protocol for each rule (for example, TCP). If the protocol is TCP or UDP, you must also specify a port or port range. If the protocol is ICMP or ICMPv6, you must also specify the ICMP type and code.</p> <p>Rule changes are propagated to instances associated with the security group as quickly as possible. However, a small delay might occur.</p> <p>For examples of rules that you can add to security groups for specific access scenarios, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html">Security group rules for different use cases</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>For information about security group quotas, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC quotas</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 authorizesecuritygroupegress" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 authorizesecuritygroupegress | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Adds the specified inbound (ingress) rules to a security group.</p> <p>An inbound rule permits instances to receive traffic from the specified IPv4 or IPv6 address range, the IP address ranges that are specified by a prefix list, or the instances that are associated with a destination security group. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/security-group-rules.html">Security group rules</a>.</p> <p>You must specify exactly one of the following sources: an IPv4 or IPv6 address range, a prefix list, or a security group. You must specify a protocol for each rule (for example, TCP). If the protocol is TCP or UDP, you must also specify a port or port range. If the protocol is ICMP or ICMPv6, you must also specify the ICMP/ICMPv6 type and code.</p> <p>Rule changes are propagated to instances associated with the security group as quickly as possible. However, a small delay might occur.</p> <p>For examples of rules that you can add to security groups for specific access scenarios, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html">Security group rules for different use cases</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>For more information about security group quotas, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC quotas</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 authorizesecuritygroupingress" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 authorizesecuritygroupingress | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Bundles an Amazon instance store-backed Windows instance.</p> <p>During bundling, only the root device volume (C:\) is bundled. Data on other instance store volumes is not preserved.</p> <note> <p>This action is not applicable for Linux/Unix instances or Windows instances that are backed by Amazon EBS.</p> </note>
export def "aws ec2 bundleinstance" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 bundleinstance | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Cancels a bundling operation for an instance store-backed Windows instance.</p>
export def "aws ec2 cancelbundletask" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 cancelbundletask | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Cancels the specified Capacity Reservation, releases the reserved capacity, and changes the Capacity Reservation's state to <code>cancelled</code>.</p> <p>You can cancel a Capacity Reservation that is in the following states:</p> <ul> <li> <p> <code>assessing</code> </p> </li> <li> <p> <code>active</code> and there is no commitment duration or the commitment duration has elapsed. You can't cancel a future-dated Capacity Reservation during the commitment duration.</p> </li> </ul> <note> <p>You can't modify or cancel a Capacity Block. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-blocks.html">Capacity Blocks for ML</a>.</p> </note> <p>If a future-dated Capacity Reservation enters the <code>delayed</code> state, the commitment duration is waived, and you can cancel it as soon as it enters the <code>active</code> state.</p> <p>Instances running in the reserved capacity continue running until you stop them. Stopped instances that target the Capacity Reservation can no longer launch. Modify these instances to either target a different Capacity Reservation, launch On-Demand Instance capacity, or run in any open Capacity Reservation that has matching attributes and sufficient capacity.</p>
export def "aws ec2 cancelcapacityreservation" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 cancelcapacityreservation | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Cancels one or more Capacity Reservation Fleets. When you cancel a Capacity Reservation Fleet, the following happens:</p> <ul> <li> <p>The Capacity Reservation Fleet's status changes to <code>cancelled</code>.</p> </li> <li> <p>The individual Capacity Reservations in the Fleet are cancelled. Instances running in the Capacity Reservations at the time of cancelling the Fleet continue to run in shared capacity.</p> </li> <li> <p>The Fleet stops creating new Capacity Reservations.</p> </li> </ul>
export def "aws ec2 cancelcapacityreservationfleets" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 cancelcapacityreservationfleets | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Cancels an active conversion task. The task can be the import of an instance or volume. The action removes all artifacts of the conversion, including a partially uploaded volume or instance. If the conversion is complete or is in the process of transferring the final disk image, the command fails and returns an exception.</p>
export def "aws ec2 cancelconversiontask" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 cancelconversiontask | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Cancels the generation of an account status report.</p> <p>You can only cancel a report while it has the <code>running</code> status. Reports with other statuses (<code>complete</code>, <code>cancelled</code>, or <code>error</code>) can't be canceled.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_declarative_status-report.html">Generating the account status report for declarative policies</a> in the <i>Amazon Web Services Organizations User Guide</i>.</p>
export def "aws ec2 canceldeclarativepoliciesreport" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 canceldeclarativepoliciesreport | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Cancels an active export task. The request removes all artifacts of the export, including any partially-created Amazon S3 objects. If the export task is complete or is in the process of transferring the final disk image, the command fails and returns an error.</p>
export def "aws ec2 cancelexporttask" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 cancelexporttask | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Removes your Amazon Web Services account from the launch permissions for the specified AMI. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cancel-sharing-an-AMI.html">Cancel having an AMI shared with your Amazon Web Services account</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 cancelimagelaunchpermission" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 cancelimagelaunchpermission | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Cancels an in-process import virtual machine or import snapshot task.</p>
export def "aws ec2 cancelimporttask" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 cancelimporttask | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Cancels the specified Reserved Instance listing in the Reserved Instance Marketplace.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Sell in the Reserved Instance Marketplace</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 cancelreservedinstanceslisting" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 cancelreservedinstanceslisting | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Cancels the specified Spot Fleet requests.</p> <p>After you cancel a Spot Fleet request, the Spot Fleet launches no new instances.</p> <p>You must also specify whether a canceled Spot Fleet request should terminate its instances. If you choose to terminate the instances, the Spot Fleet request enters the <code>cancelled_terminating</code> state. Otherwise, the Spot Fleet request enters the <code>cancelled_running</code> state and the instances continue to run until they are interrupted or you terminate them manually.</p> <p class="title"> <b>Restrictions</b> </p> <ul> <li> <p>You can delete up to 100 fleets in a single request. If you exceed the specified number, no fleets are deleted.</p> </li> </ul>
export def "aws ec2 cancelspotfleetrequests" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 cancelspotfleetrequests | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Cancels one or more Spot Instance requests.</p> <important> <p>Canceling a Spot Instance request does not terminate running Spot Instances associated with the request.</p> </important>
export def "aws ec2 cancelspotinstancerequests" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 cancelspotinstancerequests | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Determines whether a product code is associated with an instance. This action can only be used by the owner of the product code. It is useful when a product code owner must verify whether another user's instance is eligible for support.</p>
export def "aws ec2 confirmproductinstance" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 confirmproductinstance | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Copies the specified Amazon FPGA Image (AFI) to the current Region.</p>
export def "aws ec2 copyfpgaimage" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 copyfpgaimage | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Initiates an AMI copy operation. You must specify the source AMI ID and both the source and destination locations. The copy operation must be initiated in the destination Region.</p> <p class="title"> <b>CopyImage supports the following source to destination copies:</b> </p> <ul> <li> <p>Region to Region</p> </li> <li> <p>Region to Outpost</p> </li> <li> <p>Parent Region to Local Zone</p> </li> <li> <p>Local Zone to parent Region</p> </li> <li> <p>Between Local Zones with the same parent Region (only supported for certain Local Zones)</p> </li> </ul> <p class="title"> <b>CopyImage does not support the following source to destination copies:</b> </p> <ul> <li> <p>Local Zone to non-parent Regions</p> </li> <li> <p>Between Local Zones with different parent Regions</p> </li> <li> <p>Local Zone to Outpost</p> </li> <li> <p>Outpost to Local Zone</p> </li> <li> <p>Outpost to Region</p> </li> <li> <p>Between Outposts</p> </li> <li> <p>Within same Outpost</p> </li> <li> <p>Cross-partition copies (use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateStoreImageTask.html">CreateStoreImageTask</a> instead)</p> </li> </ul> <p class="title"> <b>Destination specification</b> </p> <ul> <li> <p>Region to Region: The destination Region is the Region in which you initiate the copy operation.</p> </li> <li> <p>Region to Outpost: Specify the destination using the <code>DestinationOutpostArn</code> parameter (the ARN of the Outpost)</p> </li> <li> <p>Region to Local Zone, and Local Zone to Local Zone copies: Specify the destination using the <code>DestinationAvailabilityZone</code> parameter (the name of the destination Local Zone) or <code>DestinationAvailabilityZoneId</code> parameter (the ID of the destination Local Zone).</p> </li> </ul> <p class="title"> <b>Snapshot encryption</b> </p> <ul> <li> <p>Region to Outpost: Backing snapshots copied to an Outpost are encrypted by default using the default encryption key for the Region or the key that you specify. Outposts do not support unencrypted snapshots.</p> </li> <li> <p>Region to Local Zone, and Local Zone to Local Zone: Not all Local Zones require encrypted snapshots. In Local Zones that require encrypted snapshots, backing snapshots are automatically encrypted during copy. In Local Zones where encryption is not required, snapshots retain their original encryption state (encrypted or unencrypted) by default.</p> </li> </ul> <p>For more information, including the required permissions for copying an AMI, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/CopyingAMIs.html">Copy an Amazon EC2 AMI</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 copyimage" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 copyimage | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates an exact copy of an Amazon EBS snapshot.</p> <p>The location of the source snapshot determines whether you can copy it or not, and the allowed destinations for the snapshot copy.</p> <ul> <li> <p>If the source snapshot is in a Region, you can copy it within that Region, to another Region, to an Outpost associated with that Region, or to a Local Zone in that Region.</p> </li> <li> <p>If the source snapshot is in a Local Zone, you can copy it within that Local Zone, to another Local Zone in the same zone group, or to the parent Region of the Local Zone.</p> </li> <li> <p>If the source snapshot is on an Outpost, you can't copy it.</p> </li> </ul> <p>When copying snapshots to a Region, the encryption outcome for the snapshot copy depends on the Amazon EBS encryption by default setting for the destination Region, the encryption status of the source snapshot, and the encryption parameters you specify in the request. For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-copy-snapshot.html#creating-encrypted-snapshots"> Encryption and snapshot copying</a>.</p> <p>Snapshots copied to an Outpost must be encrypted. Unencrypted snapshots are not supported on Outposts. For more information, <a href="https://docs.aws.amazon.com/ebs/latest/userguide/snapshots-outposts.html#considerations"> Amazon EBS local snapshots on Outposts</a>.</p> <note> <p>Snapshots copies have an arbitrary source volume ID. Do not use this volume ID for any purpose.</p> </note> <p>For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-copy-snapshot.html">Copy an Amazon EBS snapshot</a> in the <i>Amazon EBS User Guide</i>.</p>
export def "aws ec2 copysnapshot" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 copysnapshot | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a new Capacity Reservation with the specified attributes. Capacity Reservations enable you to reserve capacity for your Amazon EC2 instances in a specific Availability Zone for any duration.</p> <p>You can create a Capacity Reservation at any time, and you can choose when it starts. You can create a Capacity Reservation for immediate use or you can request a Capacity Reservation for a future date.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html"> Reserve compute capacity with On-Demand Capacity Reservations</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>Your request to create a Capacity Reservation could fail if:</p> <ul> <li> <p>Amazon EC2 does not have sufficient capacity. In this case, try again at a later time, try in a different Availability Zone, or request a smaller Capacity Reservation. If your workload is flexible across instance types and sizes, try with different instance attributes.</p> </li> <li> <p>The requested quantity exceeds your On-Demand Instance quota. In this case, increase your On-Demand Instance quota for the requested instance type and try again. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html"> Amazon EC2 Service Quotas</a> in the <i>Amazon EC2 User Guide</i>.</p> </li> </ul>
export def "aws ec2 createcapacityreservation" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createcapacityreservation | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p> Create a new Capacity Reservation by splitting the capacity of the source Capacity Reservation. The new Capacity Reservation will have the same attributes as the source Capacity Reservation except for tags. The source Capacity Reservation must be <code>active</code> and owned by your Amazon Web Services account. </p>
export def "aws ec2 createcapacityreservationbysplitting" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createcapacityreservationbysplitting | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a Capacity Reservation Fleet. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/work-with-cr-fleets.html#create-crfleet">Create a Capacity Reservation Fleet</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 createcapacityreservationfleet" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createcapacityreservationfleet | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a carrier gateway. For more information about carrier gateways, see <a href="https://docs.aws.amazon.com/wavelength/latest/developerguide/how-wavelengths-work.html#wavelength-carrier-gateway">Carrier gateways</a> in the <i>Amazon Web Services Wavelength Developer Guide</i>.</p>
export def "aws ec2 createcarriergateway" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createcarriergateway | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a Client VPN endpoint. A Client VPN endpoint is the resource you create and configure to enable and manage client VPN sessions. It is the destination endpoint at which all client VPN sessions are terminated.</p>
export def "aws ec2 createclientvpnendpoint" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createclientvpnendpoint | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Adds a route to a network to a Client VPN endpoint. Each Client VPN endpoint has a route table that describes the available destination network routes. Each route in the route table specifies the path for traﬃc to speciﬁc resources or networks.</p>
export def "aws ec2 createclientvpnroute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createclientvpnroute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p> Creates a range of customer-owned IP addresses. </p>
export def "aws ec2 createcoipcidr" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createcoipcidr | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p> Creates a pool of customer-owned IP (CoIP) addresses. </p>
export def "aws ec2 createcoippool" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createcoippool | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Provides information to Amazon Web Services about your customer gateway device. The customer gateway device is the appliance at your end of the VPN connection. You must provide the IP address of the customer gateway device’s external interface. The IP address must be static and can be behind a device performing network address translation (NAT).</p> <p>For devices that use Border Gateway Protocol (BGP), you can also provide the device's BGP Autonomous System Number (ASN). You can use an existing ASN assigned to your network. If you don't have an ASN already, you can use a private ASN. For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/cgw-options.html">Customer gateway options for your Site-to-Site VPN connection</a> in the <i>Amazon Web Services Site-to-Site VPN User Guide</i>.</p> <p>To create more than one customer gateway with the same VPN type, IP address, and BGP ASN, specify a unique device name for each customer gateway. An identical request returns information about the existing customer gateway; it doesn't create a new customer gateway.</p>
export def "aws ec2 createcustomergateway" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createcustomergateway | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a default subnet with a size <code>/20</code> IPv4 CIDR block in the specified Availability Zone in your default VPC. You can have only one default subnet per Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/work-with-default-vpc.html#create-default-subnet">Create a default subnet</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 createdefaultsubnet" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createdefaultsubnet | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a default VPC with a size <code>/16</code> IPv4 CIDR block and a default subnet in each Availability Zone. For more information about the components of a default VPC, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html">Default VPCs</a> in the <i>Amazon VPC User Guide</i>. You cannot specify the components of the default VPC yourself.</p> <p>If you deleted your previous default VPC, you can create a default VPC. You cannot have more than one default VPC per Region.</p>
export def "aws ec2 createdefaultvpc" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createdefaultvpc | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Delegates ownership of the Amazon EBS root volume for an Apple silicon Mac instance to an administrative user.</p>
export def "aws ec2 createdelegatemacvolumeownershiptask" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createdelegatemacvolumeownershiptask | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a custom set of DHCP options. After you create a DHCP option set, you associate it with a VPC. After you associate a DHCP option set with a VPC, all existing and newly launched instances in the VPC use this set of DHCP options.</p> <p>The following are the individual DHCP options you can specify. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP option sets</a> in the <i>Amazon VPC User Guide</i>.</p> <ul> <li> <p> <code>domain-name</code> - If you're using AmazonProvidedDNS in <code>us-east-1</code>, specify <code>ec2.internal</code>. If you're using AmazonProvidedDNS in any other Region, specify <code>region.compute.internal</code>. Otherwise, specify a custom domain name. This value is used to complete unqualified DNS hostnames.</p> <p>Some Linux operating systems accept multiple domain names separated by spaces. However, Windows and other Linux operating systems treat the value as a single domain, which results in unexpected behavior. If your DHCP option set is associated with a VPC that has instances running operating systems that treat the value as a single domain, specify only one domain name.</p> </li> <li> <p> <code>domain-name-servers</code> - The IP addresses of up to four DNS servers, or AmazonProvidedDNS. To specify multiple domain name servers in a single parameter, separate the IP addresses using commas. To have your instances receive custom DNS hostnames as specified in <code>domain-name</code>, you must specify a custom DNS server.</p> </li> <li> <p> <code>ntp-servers</code> - The IP addresses of up to eight Network Time Protocol (NTP) servers (four IPv4 addresses and four IPv6 addresses).</p> </li> <li> <p> <code>netbios-name-servers</code> - The IP addresses of up to four NetBIOS name servers.</p> </li> <li> <p> <code>netbios-node-type</code> - The NetBIOS node type (1, 2, 4, or 8). We recommend that you specify 2. Broadcast and multicast are not supported. For more information about NetBIOS node types, see <a href="https://www.ietf.org/rfc/rfc2132.txt">RFC 2132</a>.</p> </li> <li> <p> <code>ipv6-address-preferred-lease-time</code> - A value (in seconds, minutes, hours, or years) for how frequently a running instance with an IPv6 assigned to it goes through DHCPv6 lease renewal. Acceptable values are between 140 and 2147483647 seconds (approximately 68 years). If no value is entered, the default lease time is 140 seconds. If you use long-term addressing for EC2 instances, you can increase the lease time and avoid frequent lease renewal requests. Lease renewal typically occurs when half of the lease time has elapsed.</p> </li> </ul>
export def "aws ec2 createdhcpoptions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createdhcpoptions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>[IPv6 only] Creates an egress-only internet gateway for your VPC. An egress-only internet gateway is used to enable outbound communication over IPv6 from instances in your VPC to the internet, and prevents hosts outside of your VPC from initiating an IPv6 connection with your instance.</p>
export def "aws ec2 createegressonlyinternetgateway" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createegressonlyinternetgateway | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates an EC2 Fleet that contains the configuration information for On-Demand Instances and Spot Instances. Instances are launched immediately if there is available capacity.</p> <p>A single EC2 Fleet can include multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet.html">EC2 Fleet</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 createfleet" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createfleet | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates one or more flow logs to capture information about IP traffic for a specific network interface, subnet, or VPC. </p> <p>Flow log data for a monitored network interface is recorded as flow log records, which are log events consisting of fields that describe the traffic flow. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/flow-log-records.html">Flow log records</a> in the <i>Amazon VPC User Guide</i>.</p> <p>When publishing to CloudWatch Logs, flow log records are published to a log group, and each network interface has a unique log stream in the log group. When publishing to Amazon S3, flow log records for all of the monitored network interfaces are published to a single log file object that is stored in the specified bucket.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html">VPC Flow Logs</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 createflowlogs" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createflowlogs | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates an Amazon FPGA Image (AFI) from the specified design checkpoint (DCP).</p> <p>The create operation is asynchronous. To verify that the AFI was successfully created and is ready for use, check the output logs.</p> <p>An AFI contains the FPGA bitstream that is ready to download to an FPGA. You can securely deploy an AFI on multiple FPGA-accelerated instances. For more information, see the <a href="https://github.com/aws/aws-fpga/">Amazon Web Services FPGA Hardware Development Kit</a>.</p>
export def "aws ec2 createfpgaimage" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createfpgaimage | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates an Amazon EBS-backed AMI from an Amazon EBS-backed instance that is either running or stopped.</p> <p>If you customized your instance with instance store volumes or Amazon EBS volumes in addition to the root device volume, the new AMI contains block device mapping information for those volumes. When you launch an instance from this new AMI, the instance automatically launches with those additional volumes.</p> <p>The location of the source instance determines where you can create the snapshots of the AMI:</p> <ul> <li> <p>If the source instance is in a Region, you must create the snapshots in the same Region as the instance.</p> </li> <li> <p>If the source instance is in a Local Zone, you can create the snapshots in the same Local Zone or in its parent Region.</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html">Create an Amazon EBS-backed AMI</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
export def "aws ec2 createimage" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createimage | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a report that shows how your image is used across other Amazon Web Services accounts. The report provides visibility into which accounts are using the specified image, and how many resources (EC2 instances or launch templates) are referencing it.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/your-ec2-ami-usage.html">View your AMI usage</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 createimageusagereport" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createimageusagereport | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates an EC2 Instance Connect Endpoint.</p> <p>An EC2 Instance Connect Endpoint allows you to connect to an instance, without requiring the instance to have a public IPv4 or public IPv6 address. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Connect-using-EC2-Instance-Connect-Endpoint.html">Connect to your instances using EC2 Instance Connect Endpoint</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 createinstanceconnectendpoint" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createinstanceconnectendpoint | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates an event window in which scheduled events for the associated Amazon EC2 instances can run.</p> <p>You can define either a set of time ranges or a cron expression when creating the event window, but not both. All event window times are in UTC.</p> <p>You can create up to 200 event windows per Amazon Web Services Region.</p> <p>When you create the event window, targets (instance IDs, Dedicated Host IDs, or tags) are not yet associated with it. To ensure that the event window can be used, you must associate one or more targets with it by using the <a>AssociateInstanceEventWindow</a> API.</p> <important> <p>Event windows are applicable only for scheduled events that stop, reboot, or terminate instances.</p> <p>Event windows are <i>not</i> applicable for:</p> <ul> <li> <p>Expedited scheduled events and network maintenance events. </p> </li> <li> <p>Unscheduled maintenance such as AutoRecovery and unplanned reboots.</p> </li> </ul> </important> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled events</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 createinstanceeventwindow" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createinstanceeventwindow | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Exports a running or stopped instance to an Amazon S3 bucket.</p> <p>For information about the prerequisites for your Amazon S3 bucket, supported operating systems, image formats, and known limitations for the types of instances you can export, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport.html">Exporting an instance as a VM Using VM Import/Export</a> in the <i>VM Import/Export User Guide</i>.</p>
export def "aws ec2 createinstanceexporttask" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createinstanceexporttask | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates an internet gateway for use with a VPC. After creating the internet gateway, you attach it to a VPC using <a>AttachInternetGateway</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Internet_Gateway.html">Internet gateways</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 createinternetgateway" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createinternetgateway | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Create an IPAM. Amazon VPC IP Address Manager (IPAM) is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across Amazon Web Services Regions and accounts throughout your Amazon Web Services Organization.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/create-ipam.html">Create an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>. </p>
export def "aws ec2 createipam" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createipam | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Create a verification token. A verification token is an Amazon Web Services-generated random value that you can use to prove ownership of an external resource. For example, you can use a verification token to validate that you control a public IP address range when you bring an IP address range to Amazon Web Services (BYOIP). </p>
export def "aws ec2 createipamexternalresourceverificationtoken" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createipamexternalresourceverificationtoken | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Create an IP address pool for Amazon VPC IP Address Manager (IPAM). In IPAM, a pool is a collection of contiguous IP addresses CIDRs. Pools enable you to organize your IP addresses according to your routing and security needs. For example, if you have separate routing and security needs for development and production applications, you can create a pool for each.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/create-top-ipam.html">Create a top-level pool</a> in the <i>Amazon VPC IPAM User Guide</i>. </p>
export def "aws ec2 createipampool" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createipampool | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates an IPAM resource discovery. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.</p>
export def "aws ec2 createipamresourcediscovery" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createipamresourcediscovery | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Create an IPAM scope. In IPAM, a scope is the highest-level container within IPAM. An IPAM contains two default scopes. Each scope represents the IP space for a single network. The private scope is intended for all private IP address space. The public scope is intended for all public IP address space. Scopes enable you to reuse IP addresses across multiple unconnected networks without causing IP address overlap or conflict.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/add-scope-ipam.html">Add a scope</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
export def "aws ec2 createipamscope" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createipamscope | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates an ED25519 or 2048-bit RSA key pair with the specified name and in the specified format. Amazon EC2 stores the public key and displays the private key for you to save to a file. The private key is returned as an unencrypted PEM encoded PKCS#1 private key or an unencrypted PPK formatted private key for use with PuTTY. If a key with the specified name already exists, Amazon EC2 returns an error.</p> <p>The key pair returned to you is available only in the Amazon Web Services Region in which you create it. If you prefer, you can create your own key pair using a third-party tool and upload it to any Region using <a>ImportKeyPair</a>.</p> <p>You can have up to 5,000 key pairs per Amazon Web Services Region.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 key pairs</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 createkeypair" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createkeypair | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a launch template.</p> <p>A launch template contains the parameters to launch an instance. When you launch an instance using <a>RunInstances</a>, you can specify a launch template instead of providing the launch parameters in the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Store instance launch parameters in Amazon EC2 launch templates</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>To clone an existing launch template as the basis for a new launch template, use the Amazon EC2 console. The API, SDKs, and CLI do not support cloning a template. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/create-launch-template.html#create-launch-template-from-existing-launch-template">Create a launch template from an existing launch template</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 createlaunchtemplate" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createlaunchtemplate | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a new version of a launch template. You must specify an existing launch template, either by name or ID. You can determine whether the new version inherits parameters from a source version, and add or overwrite parameters as needed.</p> <p>Launch template versions are numbered in the order in which they are created. You can't specify, change, or replace the numbering of launch template versions.</p> <p>Launch templates are immutable; after you create a launch template, you can't modify it. Instead, you can create a new version of the launch template that includes the changes that you require.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-launch-template-versions.html">Modify a launch template (manage launch template versions)</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 createlaunchtemplateversion" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createlaunchtemplateversion | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a static route for the specified local gateway route table. You must specify one of the following targets: </p> <ul> <li> <p> <code>LocalGatewayVirtualInterfaceGroupId</code> </p> </li> <li> <p> <code>NetworkInterfaceId</code> </p> </li> </ul>
export def "aws ec2 createlocalgatewayroute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createlocalgatewayroute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p> Creates a local gateway route table. </p>
export def "aws ec2 createlocalgatewayroutetable" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createlocalgatewayroutetable | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p> Creates a local gateway route table virtual interface group association. </p>
export def "aws ec2 createlocalgatewayroutetablevirtualinterfacegroupassociation" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createlocalgatewayroutetablevirtualinterfacegroupassociation | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Associates the specified VPC with the specified local gateway route table.</p>
export def "aws ec2 createlocalgatewayroutetablevpcassociation" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createlocalgatewayroutetablevpcassociation | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Create a virtual interface for a local gateway. </p>
export def "aws ec2 createlocalgatewayvirtualinterface" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createlocalgatewayvirtualinterface | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Create a local gateway virtual interface group.</p>
export def "aws ec2 createlocalgatewayvirtualinterfacegroup" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createlocalgatewayvirtualinterfacegroup | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a System Integrity Protection (SIP) modification task to configure the SIP settings for an x86 Mac instance or Apple silicon Mac instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/mac-sip-settings.html#mac-sip-configure"> Configure SIP for Amazon EC2 instances</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>When you configure the SIP settings for your instance, you can either enable or disable all SIP settings, or you can specify a custom SIP configuration that selectively enables or disables specific SIP settings.</p> <note> <p>If you implement a custom configuration, <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/mac-sip-settings.html#mac-sip-check-settings"> connect to the instance and verify the settings</a> to ensure that your requirements are properly implemented and functioning as intended.</p> <p>SIP configurations might change with macOS updates. We recommend that you review custom SIP settings after any macOS version upgrade to ensure continued compatibility and proper functionality of your security configurations.</p> </note> <p>To enable or disable all SIP settings, use the <b>MacSystemIntegrityProtectionStatus</b> parameter only. For example, to enable all SIP settings, specify the following:</p> <ul> <li> <p> <code>MacSystemIntegrityProtectionStatus=enabled</code> </p> </li> </ul> <p>To specify a custom configuration that selectively enables or disables specific SIP settings, use the <b>MacSystemIntegrityProtectionStatus</b> parameter to enable or disable all SIP settings, and then use the <b>MacSystemIntegrityProtectionConfiguration</b> parameter to specify exceptions. In this case, the exceptions you specify for <b>MacSystemIntegrityProtectionConfiguration</b> override the value you specify for <b>MacSystemIntegrityProtectionStatus</b>. For example, to enable all SIP settings, except <code>NvramProtections</code>, specify the following:</p> <ul> <li> <p> <code>MacSystemIntegrityProtectionStatus=enabled</code> </p> </li> <li> <p> <code>MacSystemIntegrityProtectionConfigurationRequest "NvramProtections=disabled"</code> </p> </li> </ul>
export def "aws ec2 createmacsystemintegrityprotectionmodificationtask" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createmacsystemintegrityprotectionmodificationtask | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a managed prefix list. You can specify entries for the prefix list. Each entry consists of a CIDR block and an optional description.</p>
export def "aws ec2 createmanagedprefixlist" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createmanagedprefixlist | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a NAT gateway in the specified subnet. This action creates a network interface in the specified subnet with a private IP address from the IP address range of the subnet. You can create either a public NAT gateway or a private NAT gateway.</p> <p>With a public NAT gateway, internet-bound traffic from a private subnet can be routed to the NAT gateway, so that instances in a private subnet can connect to the internet.</p> <p>With a private NAT gateway, private communication is routed across VPCs and on-premises networks through a transit gateway or virtual private gateway. Common use cases include running large workloads behind a small pool of allowlisted IPv4 addresses, preserving private IPv4 addresses, and communicating between overlapping networks.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">NAT gateways</a> in the <i>Amazon VPC User Guide</i>.</p> <important> <p>When you create a public NAT gateway and assign it an EIP or secondary EIPs, the network border group of the EIPs must match the network border group of the Availability Zone (AZ) that the public NAT gateway is in. If it's not the same, the NAT gateway will fail to launch. You can see the network border group for the subnet's AZ by viewing the details of the subnet. Similarly, you can view the network border group of an EIP by viewing the details of the EIP address. For more information about network border groups and EIPs, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/WorkWithEIPs.html">Allocate an Elastic IP address</a> in the <i>Amazon VPC User Guide</i>. </p> </important>
export def "aws ec2 createnatgateway" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createnatgateway | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a network ACL in a VPC. Network ACLs provide an optional layer of security (in addition to security groups) for the instances in your VPC.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html">Network ACLs</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 createnetworkacl" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createnetworkacl | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates an entry (a rule) in a network ACL with the specified rule number. Each network ACL has a set of numbered ingress rules and a separate set of numbered egress rules. When determining whether a packet should be allowed in or out of a subnet associated with the ACL, we process the entries in the ACL according to the rule numbers, in ascending order. Each network ACL has a set of ingress rules and a separate set of egress rules.</p> <p>We recommend that you leave room between the rule numbers (for example, 100, 110, 120, ...), and not number them one right after the other (for example, 101, 102, 103, ...). This makes it easier to add a rule between existing ones without having to renumber the rules.</p> <p>After you add an entry, you can't modify it; you must either replace it, or create an entry and delete the old one.</p> <p>For more information about network ACLs, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html">Network ACLs</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 createnetworkaclentry" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createnetworkaclentry | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a Network Access Scope.</p> <p>Amazon Web Services Network Access Analyzer enables cloud networking and cloud operations teams to verify that their networks on Amazon Web Services conform to their network security and governance objectives. For more information, see the <a href="https://docs.aws.amazon.com/vpc/latest/network-access-analyzer/">Amazon Web Services Network Access Analyzer Guide</a>.</p>
export def "aws ec2 createnetworkinsightsaccessscope" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createnetworkinsightsaccessscope | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a path to analyze for reachability.</p> <p>Reachability Analyzer enables you to analyze and debug network reachability between two resources in your virtual private cloud (VPC). For more information, see the <a href="https://docs.aws.amazon.com/vpc/latest/reachability/">Reachability Analyzer Guide</a>.</p>
export def "aws ec2 createnetworkinsightspath" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createnetworkinsightspath | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a network interface in the specified subnet.</p> <p>The number of IP addresses you can assign to a network interface varies by instance type.</p> <p>For more information about network interfaces, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html">Elastic network interfaces</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 createnetworkinterface" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createnetworkinterface | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Grants an Amazon Web Services-authorized account permission to attach the specified network interface to an instance in their account.</p> <p>You can grant permission to a single Amazon Web Services account only, and only one account at a time.</p>
export def "aws ec2 createnetworkinterfacepermission" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createnetworkinterfacepermission | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a placement group in which to launch instances. The strategy of the placement group determines how the instances are organized within the group. </p> <p>A <code>cluster</code> placement group is a logical grouping of instances within a single Availability Zone that benefit from low network latency, high network throughput. A <code>spread</code> placement group places instances on distinct hardware. A <code>partition</code> placement group places groups of instances in different partitions, where instances in one partition do not share the same hardware with instances in another partition.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement groups</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 createplacementgroup" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createplacementgroup | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a public IPv4 address pool. A public IPv4 pool is an EC2 IP address pool required for the public IPv4 CIDRs that you own and bring to Amazon Web Services to manage with IPAM. IPv6 addresses you bring to Amazon Web Services, however, use IPAM pools only. To monitor the status of pool creation, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribePublicIpv4Pools.html">DescribePublicIpv4Pools</a>.</p>
export def "aws ec2 createpublicipv4pool" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createpublicipv4pool | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Replaces the EBS-backed root volume for a <code>running</code> instance with a new volume that is restored to the original root volume's launch state, that is restored to a specific snapshot taken from the original root volume, or that is restored from an AMI that has the same key characteristics as that of the instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/replace-root.html">Replace a root volume</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 createreplacerootvolumetask" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createreplacerootvolumetask | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a listing for Amazon EC2 Standard Reserved Instances to be sold in the Reserved Instance Marketplace. You can submit one Standard Reserved Instance listing at a time. To get a list of your Standard Reserved Instances, you can use the <a>DescribeReservedInstances</a> operation.</p> <note> <p>Only Standard Reserved Instances can be sold in the Reserved Instance Marketplace. Convertible Reserved Instances cannot be sold.</p> </note> <p>The Reserved Instance Marketplace matches sellers who want to resell Standard Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.</p> <p>To sell your Standard Reserved Instances, you must first register as a seller in the Reserved Instance Marketplace. After completing the registration process, you can create a Reserved Instance Marketplace listing of some or all of your Standard Reserved Instances, and specify the upfront price to receive for them. Your Standard Reserved Instance listings then become available for purchase. To view the details of your Standard Reserved Instance listing, you can use the <a>DescribeReservedInstancesListings</a> operation.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Sell in the Reserved Instance Marketplace</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 createreservedinstanceslisting" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createreservedinstanceslisting | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Starts a task that restores an AMI from an Amazon S3 object that was previously created by using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateStoreImageTask.html">CreateStoreImageTask</a>.</p> <p>To use this API, you must have the required permissions. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/work-with-ami-store-restore.html#ami-s3-permissions">Permissions for storing and restoring AMIs using S3</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html">Store and restore an AMI using S3</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 createrestoreimagetask" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createrestoreimagetask | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a route in a route table within a VPC.</p> <p>You must specify either a destination CIDR block or a prefix list ID. You must also specify exactly one of the resources from the parameter list.</p> <p>When determining how to route traffic, we use the route with the most specific match. For example, traffic is destined for the IPv4 address <code>192.0.2.3</code>, and the route table includes the following two IPv4 routes:</p> <ul> <li> <p> <code>192.0.2.0/24</code> (goes to some target A)</p> </li> <li> <p> <code>192.0.2.0/28</code> (goes to some target B)</p> </li> </ul> <p>Both routes apply to the traffic destined for <code>192.0.2.3</code>. However, the second route in the list covers a smaller number of IP addresses and is therefore more specific, so we use that route to determine where to target the traffic.</p> <p>For more information about route tables, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route tables</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 createroute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createroute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a new route server to manage dynamic routing in a VPC.</p> <p>Amazon VPC Route Server simplifies routing for traffic between workloads that are deployed within a VPC and its internet gateways. With this feature, VPC Route Server dynamically updates VPC and internet gateway route tables with your preferred IPv4 or IPv6 routes to achieve routing fault tolerance for those workloads. This enables you to automatically reroute traffic within a VPC, which increases the manageability of VPC routing and interoperability with third-party workloads.</p> <p>Route server supports the follow route table types:</p> <ul> <li> <p>VPC route tables not associated with subnets</p> </li> <li> <p>Subnet route tables</p> </li> <li> <p>Internet gateway route tables</p> </li> </ul> <p>Route server does not support route tables associated with virtual private gateways. To propagate routes into a transit gateway route table, use <a href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-connect.html">Transit Gateway Connect</a>.</p> <p>For more information see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/dynamic-routing-route-server.html">Dynamic routing in your VPC with VPC Route Server</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 createrouteserver" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createrouteserver | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a new endpoint for a route server in a specified subnet.</p> <p>A route server endpoint is an Amazon Web Services-managed component inside a subnet that facilitates <a href="https://en.wikipedia.org/wiki/Border_Gateway_Protocol">BGP (Border Gateway Protocol)</a> connections between your route server and your BGP peers.</p> <p>For more information see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/dynamic-routing-route-server.html">Dynamic routing in your VPC with VPC Route Server</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 createrouteserverendpoint" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createrouteserverendpoint | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a new BGP peer for a specified route server endpoint.</p> <p>A route server peer is a session between a route server endpoint and the device deployed in Amazon Web Services (such as a firewall appliance or other network security function running on an EC2 instance). The device must meet these requirements:</p> <ul> <li> <p>Have an elastic network interface in the VPC</p> </li> <li> <p>Support BGP (Border Gateway Protocol)</p> </li> <li> <p>Can initiate BGP sessions</p> </li> </ul> <p>For more information see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/dynamic-routing-route-server.html">Dynamic routing in your VPC with VPC Route Server</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 createrouteserverpeer" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createrouteserverpeer | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a route table for the specified VPC. After you create a route table, you can add routes and associate the table with a subnet.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route tables</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 createroutetable" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createroutetable | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a security group.</p> <p>A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 security groups</a> in the <i>Amazon EC2 User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security groups for your VPC</a> in the <i>Amazon VPC User Guide</i>.</p> <p>When you create a security group, you specify a friendly name of your choice. You can't have two security groups for the same VPC with the same name.</p> <p>You have a default security group for use in your VPC. If you don't specify a security group when you launch an instance, the instance is launched into the appropriate default security group. A default security group includes a default rule that grants instances unrestricted network access to each other.</p> <p>You can add or remove rules from your security groups using <a>AuthorizeSecurityGroupIngress</a>, <a>AuthorizeSecurityGroupEgress</a>, <a>RevokeSecurityGroupIngress</a>, and <a>RevokeSecurityGroupEgress</a>.</p> <p>For more information about VPC security group limits, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC Limits</a>.</p>
export def "aws ec2 createsecuritygroup" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createsecuritygroup | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a snapshot of an EBS volume and stores it in Amazon S3. You can use snapshots for backups, to make copies of EBS volumes, and to save data before shutting down an instance.</p> <p>The location of the source EBS volume determines where you can create the snapshot.</p> <ul> <li> <p>If the source volume is in a Region, you must create the snapshot in the same Region as the volume.</p> </li> <li> <p>If the source volume is in a Local Zone, you can create the snapshot in the same Local Zone or in its parent Amazon Web Services Region.</p> </li> <li> <p>If the source volume is on an Outpost, you can create the snapshot on the same Outpost or in its parent Amazon Web Services Region.</p> </li> </ul> <p>When a snapshot is created, any Amazon Web Services Marketplace product codes that are associated with the source volume are propagated to the snapshot.</p> <p>You can take a snapshot of an attached volume that is in use. However, snapshots only capture data that has been written to your Amazon EBS volume at the time the snapshot command is issued; this might exclude any data that has been cached by any applications or the operating system. If you can pause any file systems on the volume long enough to take a snapshot, your snapshot should be complete. However, if you cannot pause all file writes to the volume, you should unmount the volume from within the instance, issue the snapshot command, and then remount the volume to ensure a consistent and complete snapshot. You may remount and use your volume while the snapshot status is <code>pending</code>.</p> <p>When you create a snapshot for an EBS volume that serves as a root device, we recommend that you stop the instance before taking the snapshot.</p> <p>Snapshots that are taken from encrypted volumes are automatically encrypted. Volumes that are created from encrypted snapshots are also automatically encrypted. Your encrypted volumes and any associated snapshots always remain protected. For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html">Amazon EBS encryption</a> in the <i>Amazon EBS User Guide</i>.</p>
export def "aws ec2 createsnapshot" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createsnapshot | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates crash-consistent snapshots of multiple EBS volumes attached to an Amazon EC2 instance. Volumes are chosen by specifying an instance. Each volume attached to the specified instance will produce one snapshot that is crash-consistent across the instance. You can include all of the volumes currently attached to the instance, or you can exclude the root volume or specific data (non-root) volumes from the multi-volume snapshot set.</p> <p>The location of the source instance determines where you can create the snapshots.</p> <ul> <li> <p>If the source instance is in a Region, you must create the snapshots in the same Region as the instance.</p> </li> <li> <p>If the source instance is in a Local Zone, you can create the snapshots in the same Local Zone or in its parent Amazon Web Services Region.</p> </li> <li> <p>If the source instance is on an Outpost, you can create the snapshots on the same Outpost or in its parent Amazon Web Services Region.</p> </li> </ul>
export def "aws ec2 createsnapshots" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createsnapshots | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a data feed for Spot Instances, enabling you to view Spot Instance usage logs. You can create one data feed per Amazon Web Services account. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html">Spot Instance data feed</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 createspotdatafeedsubscription" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createspotdatafeedsubscription | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Stores an AMI as a single object in an Amazon S3 bucket.</p> <p>To use this API, you must have the required permissions. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/work-with-ami-store-restore.html#ami-s3-permissions">Permissions for storing and restoring AMIs using S3</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html">Store and restore an AMI using S3</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 createstoreimagetask" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createstoreimagetask | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a subnet in the specified VPC. For an IPv4 only subnet, specify an IPv4 CIDR block. If the VPC has an IPv6 CIDR block, you can create an IPv6 only subnet or a dual stack subnet instead. For an IPv6 only subnet, specify an IPv6 CIDR block. For a dual stack subnet, specify both an IPv4 CIDR block and an IPv6 CIDR block.</p> <p>A subnet CIDR block must not overlap the CIDR block of an existing subnet in the VPC. After you create a subnet, you can't change its CIDR block.</p> <p>The allowed size for an IPv4 subnet is between a /28 netmask (16 IP addresses) and a /16 netmask (65,536 IP addresses). Amazon Web Services reserves both the first four and the last IPv4 address in each subnet's CIDR block. They're not available for your use.</p> <p>If you've associated an IPv6 CIDR block with your VPC, you can associate an IPv6 CIDR block with a subnet when you create it. </p> <p>If you add more than one subnet to a VPC, they're set up in a star topology with a logical router in the middle.</p> <p>When you stop an instance in a subnet, it retains its private IPv4 address. It's therefore possible to have a subnet with no running instances (they're all stopped), but no remaining IP addresses available.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/configure-subnets.html">Subnets</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 createsubnet" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createsubnet | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a subnet CIDR reservation. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/subnet-cidr-reservation.html">Subnet CIDR reservations</a> in the <i>Amazon VPC User Guide</i> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/work-with-prefixes.html">Manage prefixes for your network interfaces</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 createsubnetcidrreservation" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createsubnetcidrreservation | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Adds or overwrites only the specified tags for the specified Amazon EC2 resource or resources. When you specify an existing tag key, the value is overwritten with the new value. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value. Tag keys must be unique per resource.</p> <p>For more information about tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tag your Amazon EC2 resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For more information about creating IAM policies that control users' access to resources based on tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-iam-actions-resources.html">Supported resource-level permissions for Amazon EC2 API actions</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
export def "aws ec2 createtags" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createtags | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a Traffic Mirror filter.</p> <p>A Traffic Mirror filter is a set of rules that defines the traffic to mirror.</p> <p>By default, no traffic is mirrored. To mirror traffic, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilterRule.htm">CreateTrafficMirrorFilterRule</a> to add Traffic Mirror rules to the filter. The rules you add define what traffic gets mirrored. You can also use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyTrafficMirrorFilterNetworkServices.html">ModifyTrafficMirrorFilterNetworkServices</a> to mirror supported network services.</p>
export def "aws ec2 createtrafficmirrorfilter" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createtrafficmirrorfilter | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a Traffic Mirror filter rule.</p> <p>A Traffic Mirror rule defines the Traffic Mirror source traffic to mirror.</p> <p>You need the Traffic Mirror filter ID when you create the rule.</p>
export def "aws ec2 createtrafficmirrorfilterrule" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createtrafficmirrorfilterrule | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a Traffic Mirror session.</p> <p>A Traffic Mirror session actively copies packets from a Traffic Mirror source to a Traffic Mirror target. Create a filter, and then assign it to the session to define a subset of the traffic to mirror, for example all TCP traffic.</p> <p>The Traffic Mirror source and the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in a different VPC connected via VPC peering or a transit gateway. </p> <p>By default, no traffic is mirrored. Use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilter.html">CreateTrafficMirrorFilter</a> to create filter rules that specify the traffic to mirror.</p>
export def "aws ec2 createtrafficmirrorsession" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createtrafficmirrorsession | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a target for your Traffic Mirror session.</p> <p>A Traffic Mirror target is the destination for mirrored traffic. The Traffic Mirror source and the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in different VPCs connected via VPC peering or a transit gateway.</p> <p>A Traffic Mirror target can be a network interface, a Network Load Balancer, or a Gateway Load Balancer endpoint.</p> <p>To use the target in a Traffic Mirror session, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorSession.htm">CreateTrafficMirrorSession</a>.</p>
export def "aws ec2 createtrafficmirrortarget" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createtrafficmirrortarget | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a transit gateway.</p> <p>You can use a transit gateway to interconnect your virtual private clouds (VPC) and on-premises networks. After the transit gateway enters the <code>available</code> state, you can attach your VPCs and VPN connections to the transit gateway.</p> <p>To attach your VPCs, use <a>CreateTransitGatewayVpcAttachment</a>.</p> <p>To attach a VPN connection, use <a>CreateCustomerGateway</a> to create a customer gateway and specify the ID of the customer gateway and the ID of the transit gateway in a call to <a>CreateVpnConnection</a>.</p> <p>When you create a transit gateway, we create a default transit gateway route table and use it as the default association route table and the default propagation route table. You can use <a>CreateTransitGatewayRouteTable</a> to create additional transit gateway route tables. If you disable automatic route propagation, we do not create a default transit gateway route table. You can use <a>EnableTransitGatewayRouteTablePropagation</a> to propagate routes from a resource attachment to a transit gateway route table. If you disable automatic associations, you can use <a>AssociateTransitGatewayRouteTable</a> to associate a resource attachment with a transit gateway route table.</p>
export def "aws ec2 createtransitgateway" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createtransitgateway | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a Connect attachment from a specified transit gateway attachment. A Connect attachment is a GRE-based tunnel attachment that you can use to establish a connection between a transit gateway and an appliance.</p> <p>A Connect attachment uses an existing VPC or Amazon Web Services Direct Connect attachment as the underlying transport mechanism.</p>
export def "aws ec2 createtransitgatewayconnect" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createtransitgatewayconnect | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a Connect peer for a specified transit gateway Connect attachment between a transit gateway and an appliance.</p> <p>The peer address and transit gateway address must be the same IP address family (IPv4 or IPv6).</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-connect.html#tgw-connect-peer">Connect peers</a> in the <i>Amazon Web Services Transit Gateways Guide</i>.</p>
export def "aws ec2 createtransitgatewayconnectpeer" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createtransitgatewayconnectpeer | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a multicast domain using the specified transit gateway.</p> <p>The transit gateway must be in the available state before you create a domain. Use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGateways.html">DescribeTransitGateways</a> to see the state of transit gateway.</p>
export def "aws ec2 createtransitgatewaymulticastdomain" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createtransitgatewaymulticastdomain | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Requests a transit gateway peering attachment between the specified transit gateway (requester) and a peer transit gateway (accepter). The peer transit gateway can be in your account or a different Amazon Web Services account.</p> <p>After you create the peering attachment, the owner of the accepter transit gateway must accept the attachment request.</p>
export def "aws ec2 createtransitgatewaypeeringattachment" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createtransitgatewaypeeringattachment | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a transit gateway policy table.</p>
export def "aws ec2 createtransitgatewaypolicytable" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createtransitgatewaypolicytable | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a reference (route) to a prefix list in a specified transit gateway route table.</p>
export def "aws ec2 createtransitgatewayprefixlistreference" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createtransitgatewayprefixlistreference | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a static route for the specified transit gateway route table.</p>
export def "aws ec2 createtransitgatewayroute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createtransitgatewayroute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a route table for the specified transit gateway.</p>
export def "aws ec2 createtransitgatewayroutetable" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createtransitgatewayroutetable | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Advertises a new transit gateway route table.</p>
export def "aws ec2 createtransitgatewayroutetableannouncement" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createtransitgatewayroutetableannouncement | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Attaches the specified VPC to the specified transit gateway.</p> <p>If you attach a VPC with a CIDR range that overlaps the CIDR range of a VPC that is already attached, the new VPC CIDR range is not propagated to the default propagation route table.</p> <p>To send VPC traffic to an attached transit gateway, add a route to the VPC route table using <a>CreateRoute</a>.</p>
export def "aws ec2 createtransitgatewayvpcattachment" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createtransitgatewayvpcattachment | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>An Amazon Web Services Verified Access endpoint is where you define your application along with an optional endpoint-level access policy.</p>
export def "aws ec2 createverifiedaccessendpoint" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createverifiedaccessendpoint | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>An Amazon Web Services Verified Access group is a collection of Amazon Web Services Verified Access endpoints who's associated applications have similar security requirements. Each instance within a Verified Access group shares an Verified Access policy. For example, you can group all Verified Access instances associated with "sales" applications together and use one common Verified Access policy.</p>
export def "aws ec2 createverifiedaccessgroup" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createverifiedaccessgroup | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>An Amazon Web Services Verified Access instance is a regional entity that evaluates application requests and grants access only when your security requirements are met.</p>
export def "aws ec2 createverifiedaccessinstance" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createverifiedaccessinstance | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>A trust provider is a third-party entity that creates, maintains, and manages identity information for users and devices. When an application request is made, the identity information sent by the trust provider is evaluated by Verified Access before allowing or denying the application request.</p>
export def "aws ec2 createverifiedaccesstrustprovider" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createverifiedaccesstrustprovider | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates an EBS volume that can be attached to an instance in the same Availability Zone.</p> <p>You can create a new empty volume or restore a volume from an EBS snapshot. Any Amazon Web Services Marketplace product codes from the snapshot are propagated to the volume.</p> <p>You can create encrypted volumes. Encrypted volumes must be attached to instances that support Amazon EBS encryption. Volumes that are created from encrypted snapshots are also automatically encrypted. For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html">Amazon EBS encryption</a> in the <i>Amazon EBS User Guide</i>.</p> <p>You can tag your volumes during creation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tag your Amazon EC2 resources</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-creating-volume.html">Create an Amazon EBS volume</a> in the <i>Amazon EBS User Guide</i>.</p>
export def "aws ec2 createvolume" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createvolume | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a VPC with the specified CIDR blocks. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-ip-addressing.html">IP addressing for your VPCs and subnets</a> in the <i>Amazon VPC User Guide</i>.</p> <p>You can optionally request an IPv6 CIDR block for the VPC. You can request an Amazon-provided IPv6 CIDR block from Amazon's pool of IPv6 addresses or an IPv6 CIDR block from an IPv6 address pool that you provisioned through bring your own IP addresses (<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">BYOIP</a>).</p> <p>By default, each instance that you launch in the VPC has the default DHCP options, which include only a default DNS server that we provide (AmazonProvidedDNS). For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP option sets</a> in the <i>Amazon VPC User Guide</i>.</p> <p>You can specify the instance tenancy value for the VPC when you create it. You can't change this value for the VPC after you create it. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html">Dedicated Instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 createvpc" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createvpc | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Create a VPC Block Public Access (BPA) exclusion. A VPC BPA exclusion is a mode that can be applied to a single VPC or subnet that exempts it from the account’s BPA mode and will allow bidirectional or egress-only access. You can create BPA exclusions for VPCs and subnets even when BPA is not enabled on the account to ensure that there is no traffic disruption to the exclusions when VPC BPA is turned on. To learn more about VPC BPA, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/security-vpc-bpa.html">Block public access to VPCs and subnets</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 createvpcblockpublicaccessexclusion" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createvpcblockpublicaccessexclusion | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a VPC endpoint. A VPC endpoint provides a private connection between the specified VPC and the specified endpoint service. You can use an endpoint service provided by Amazon Web Services, an Amazon Web Services Marketplace Partner, or another Amazon Web Services account. For more information, see the <a href="https://docs.aws.amazon.com/vpc/latest/privatelink/">Amazon Web Services PrivateLink User Guide</a>.</p>
export def "aws ec2 createvpcendpoint" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createvpcendpoint | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a connection notification for a specified VPC endpoint or VPC endpoint service. A connection notification notifies you of specific endpoint events. You must create an SNS topic to receive notifications. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Creating an Amazon SNS topic</a> in the <i>Amazon SNS Developer Guide</i>.</p> <p>You can create a connection notification for interface endpoints only.</p>
export def "aws ec2 createvpcendpointconnectionnotification" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createvpcendpointconnectionnotification | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a VPC endpoint service to which service consumers (Amazon Web Services accounts, users, and IAM roles) can connect.</p> <p>Before you create an endpoint service, you must create one of the following for your service:</p> <ul> <li> <p>A <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/network/">Network Load Balancer</a>. Service consumers connect to your service using an interface endpoint.</p> </li> <li> <p>A <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/">Gateway Load Balancer</a>. Service consumers connect to your service using a Gateway Load Balancer endpoint.</p> </li> </ul> <p>If you set the private DNS name, you must prove that you own the private DNS domain name.</p> <p>For more information, see the <a href="https://docs.aws.amazon.com/vpc/latest/privatelink/">Amazon Web Services PrivateLink Guide</a>.</p>
export def "aws ec2 createvpcendpointserviceconfiguration" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createvpcendpointserviceconfiguration | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Requests a VPC peering connection between two VPCs: a requester VPC that you own and an accepter VPC with which to create the connection. The accepter VPC can belong to another Amazon Web Services account and can be in a different Region to the requester VPC. The requester VPC and accepter VPC cannot have overlapping CIDR blocks.</p> <note> <p>Limitations and rules apply to a VPC peering connection. For more information, see the <a href="https://docs.aws.amazon.com/vpc/latest/peering/vpc-peering-basics.html#vpc-peering-limitations">VPC peering limitations</a> in the <i>VPC Peering Guide</i>.</p> </note> <p>The owner of the accepter VPC must accept the peering request to activate the peering connection. The VPC peering connection request expires after 7 days, after which it cannot be accepted or rejected.</p> <p>If you create a VPC peering connection request between VPCs with overlapping CIDR blocks, the VPC peering connection has a status of <code>failed</code>.</p>
export def "aws ec2 createvpcpeeringconnection" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createvpcpeeringconnection | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a VPN connection between an existing virtual private gateway or transit gateway and a customer gateway. The supported connection type is <code>ipsec.1</code>.</p> <p>The response includes information that you need to give to your network administrator to configure your customer gateway.</p> <important> <p>We strongly recommend that you use HTTPS when calling this operation because the response contains sensitive cryptographic information for configuring your customer gateway device.</p> </important> <p>If you decide to shut down your VPN connection for any reason and later create a new VPN connection, you must reconfigure your customer gateway with the new information returned from this call.</p> <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services Site-to-Site VPN User Guide</i>.</p>
export def "aws ec2 createvpnconnection" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createvpnconnection | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services Site-to-Site VPN User Guide</i>.</p>
export def "aws ec2 createvpnconnectionroute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createvpnconnectionroute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a virtual private gateway. A virtual private gateway is the endpoint on the VPC side of your VPN connection. You can create a virtual private gateway before creating the VPC itself.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services Site-to-Site VPN User Guide</i>.</p>
export def "aws ec2 createvpngateway" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 createvpngateway | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes a carrier gateway.</p> <important> <p>If you do not delete the route that contains the carrier gateway as the Target, the route is a blackhole route. For information about how to delete a route, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DeleteRoute.html">DeleteRoute</a>.</p> </important>
export def "aws ec2 deletecarriergateway" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletecarriergateway | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified Client VPN endpoint. You must disassociate all target networks before you can delete a Client VPN endpoint.</p>
export def "aws ec2 deleteclientvpnendpoint" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deleteclientvpnendpoint | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes a route from a Client VPN endpoint. You can only delete routes that you manually added using the <b>CreateClientVpnRoute</b> action. You cannot delete routes that were automatically added when associating a subnet. To remove routes that have been automatically added, disassociate the target subnet from the Client VPN endpoint.</p>
export def "aws ec2 deleteclientvpnroute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deleteclientvpnroute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p> Deletes a range of customer-owned IP addresses. </p>
export def "aws ec2 deletecoipcidr" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletecoipcidr | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes a pool of customer-owned IP (CoIP) addresses. </p>
export def "aws ec2 deletecoippool" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletecoippool | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified customer gateway. You must delete the VPN connection before you can delete the customer gateway.</p>
export def "aws ec2 deletecustomergateway" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletecustomergateway | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified set of DHCP options. You must disassociate the set of DHCP options before you can delete it. You can disassociate the set of DHCP options by associating either a new set of options or the default set of options with the VPC.</p>
export def "aws ec2 deletedhcpoptions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletedhcpoptions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes an egress-only internet gateway.</p>
export def "aws ec2 deleteegressonlyinternetgateway" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deleteegressonlyinternetgateway | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified EC2 Fleet request.</p> <p>After you delete an EC2 Fleet request, it launches no new instances.</p> <p>You must also specify whether a deleted EC2 Fleet request should terminate its instances. If you choose to terminate the instances, the EC2 Fleet request enters the <code>deleted_terminating</code> state. Otherwise, it enters the <code>deleted_running</code> state, and the instances continue to run until they are interrupted or you terminate them manually.</p> <p>A deleted <code>instant</code> fleet with running instances is not supported. When you delete an <code>instant</code> fleet, Amazon EC2 automatically terminates all its instances. For fleets with more than 1000 instances, the deletion request might fail. If your fleet has more than 1000 instances, first terminate most of the instances manually, leaving 1000 or fewer. Then delete the fleet, and the remaining instances will be terminated automatically.</p> <p class="title"> <b>Restrictions</b> </p> <ul> <li> <p>You can delete up to 25 fleets of type <code>instant</code> in a single request.</p> </li> <li> <p>You can delete up to 100 fleets of type <code>maintain</code> or <code>request</code> in a single request.</p> </li> <li> <p>You can delete up to 125 fleets in a single request, provided you do not exceed the quota for each fleet type, as specified above.</p> </li> <li> <p>If you exceed the specified number of fleets to delete, no fleets are deleted.</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/delete-fleet.html">Delete an EC2 Fleet request and the instances in the fleet</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 deletefleets" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletefleets | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes one or more flow logs.</p>
export def "aws ec2 deleteflowlogs" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deleteflowlogs | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified Amazon FPGA Image (AFI).</p>
export def "aws ec2 deletefpgaimage" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletefpgaimage | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified image usage report.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/your-ec2-ami-usage.html">View your AMI usage</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 deleteimageusagereport" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deleteimageusagereport | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified EC2 Instance Connect Endpoint.</p>
export def "aws ec2 deleteinstanceconnectendpoint" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deleteinstanceconnectendpoint | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified event window.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled events</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 deleteinstanceeventwindow" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deleteinstanceeventwindow | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified internet gateway. You must detach the internet gateway from the VPC before you can delete it.</p>
export def "aws ec2 deleteinternetgateway" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deleteinternetgateway | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Delete an IPAM. Deleting an IPAM removes all monitored data associated with the IPAM including the historical data for CIDRs.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/delete-ipam.html">Delete an IPAM</a> in the <i>Amazon VPC IPAM User Guide</i>. </p>
export def "aws ec2 deleteipam" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deleteipam | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Delete a verification token. A verification token is an Amazon Web Services-generated random value that you can use to prove ownership of an external resource. For example, you can use a verification token to validate that you control a public IP address range when you bring an IP address range to Amazon Web Services (BYOIP). </p>
export def "aws ec2 deleteipamexternalresourceverificationtoken" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deleteipamexternalresourceverificationtoken | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Delete an IPAM pool.</p> <note> <p>You cannot delete an IPAM pool if there are allocations in it or CIDRs provisioned to it. To release allocations, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ReleaseIpamPoolAllocation.html">ReleaseIpamPoolAllocation</a>. To deprovision pool CIDRs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DeprovisionIpamPoolCidr.html">DeprovisionIpamPoolCidr</a>.</p> </note> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/delete-pool-ipam.html">Delete a pool</a> in the <i>Amazon VPC IPAM User Guide</i>. </p>
export def "aws ec2 deleteipampool" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deleteipampool | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes an IPAM resource discovery. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.</p>
export def "aws ec2 deleteipamresourcediscovery" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deleteipamresourcediscovery | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Delete the scope for an IPAM. You cannot delete the default scopes.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/delete-scope-ipam.html">Delete a scope</a> in the <i>Amazon VPC IPAM User Guide</i>. </p>
export def "aws ec2 deleteipamscope" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deleteipamscope | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified key pair, by removing the public key from Amazon EC2.</p>
export def "aws ec2 deletekeypair" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletekeypair | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes a launch template. Deleting a launch template deletes all of its versions.</p>
export def "aws ec2 deletelaunchtemplate" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletelaunchtemplate | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes one or more versions of a launch template.</p> <p>You can't delete the default version of a launch template; you must first assign a different version as the default. If the default version is the only version for the launch template, you must delete the entire launch template using <a>DeleteLaunchTemplate</a>.</p> <p>You can delete up to 200 launch template versions in a single request. To delete more than 200 versions in a single request, use <a>DeleteLaunchTemplate</a>, which deletes the launch template and all of its versions.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/delete-launch-template.html#delete-launch-template-version">Delete a launch template version</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 deletelaunchtemplateversions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletelaunchtemplateversions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified route from the specified local gateway route table.</p>
export def "aws ec2 deletelocalgatewayroute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletelocalgatewayroute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p> Deletes a local gateway route table. </p>
export def "aws ec2 deletelocalgatewayroutetable" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletelocalgatewayroutetable | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p> Deletes a local gateway route table virtual interface group association. </p>
export def "aws ec2 deletelocalgatewayroutetablevirtualinterfacegroupassociation" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletelocalgatewayroutetablevirtualinterfacegroupassociation | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified association between a VPC and local gateway route table.</p>
export def "aws ec2 deletelocalgatewayroutetablevpcassociation" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletelocalgatewayroutetablevpcassociation | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified local gateway virtual interface.</p>
export def "aws ec2 deletelocalgatewayvirtualinterface" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletelocalgatewayvirtualinterface | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Delete the specified local gateway interface group.</p>
export def "aws ec2 deletelocalgatewayvirtualinterfacegroup" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletelocalgatewayvirtualinterfacegroup | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified managed prefix list. You must first remove all references to the prefix list in your resources.</p>
export def "aws ec2 deletemanagedprefixlist" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletemanagedprefixlist | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified NAT gateway. Deleting a public NAT gateway disassociates its Elastic IP address, but does not release the address from your account. Deleting a NAT gateway does not delete any NAT gateway routes in your route tables.</p>
export def "aws ec2 deletenatgateway" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletenatgateway | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified network ACL. You can't delete the ACL if it's associated with any subnets. You can't delete the default network ACL.</p>
export def "aws ec2 deletenetworkacl" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletenetworkacl | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified ingress or egress entry (rule) from the specified network ACL.</p>
export def "aws ec2 deletenetworkaclentry" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletenetworkaclentry | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified Network Access Scope.</p>
export def "aws ec2 deletenetworkinsightsaccessscope" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletenetworkinsightsaccessscope | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified Network Access Scope analysis.</p>
export def "aws ec2 deletenetworkinsightsaccessscopeanalysis" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletenetworkinsightsaccessscopeanalysis | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified network insights analysis.</p>
export def "aws ec2 deletenetworkinsightsanalysis" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletenetworkinsightsanalysis | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified path.</p>
export def "aws ec2 deletenetworkinsightspath" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletenetworkinsightspath | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified network interface. You must detach the network interface before you can delete it.</p>
export def "aws ec2 deletenetworkinterface" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletenetworkinterface | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes a permission for a network interface. By default, you cannot delete the permission if the account for which you're removing the permission has attached the network interface to an instance. However, you can force delete the permission, regardless of any attachment.</p>
export def "aws ec2 deletenetworkinterfacepermission" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletenetworkinterfacepermission | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified placement group. You must terminate all instances in the placement group before you can delete the placement group. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement groups</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 deleteplacementgroup" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deleteplacementgroup | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Delete a public IPv4 pool. A public IPv4 pool is an EC2 IP address pool required for the public IPv4 CIDRs that you own and bring to Amazon Web Services to manage with IPAM. IPv6 addresses you bring to Amazon Web Services, however, use IPAM pools only.</p>
export def "aws ec2 deletepublicipv4pool" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletepublicipv4pool | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the queued purchases for the specified Reserved Instances.</p>
export def "aws ec2 deletequeuedreservedinstances" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletequeuedreservedinstances | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified route from the specified route table.</p>
export def "aws ec2 deleteroute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deleteroute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified route server.</p> <p>Amazon VPC Route Server simplifies routing for traffic between workloads that are deployed within a VPC and its internet gateways. With this feature, VPC Route Server dynamically updates VPC and internet gateway route tables with your preferred IPv4 or IPv6 routes to achieve routing fault tolerance for those workloads. This enables you to automatically reroute traffic within a VPC, which increases the manageability of VPC routing and interoperability with third-party workloads.</p> <p>Route server supports the follow route table types:</p> <ul> <li> <p>VPC route tables not associated with subnets</p> </li> <li> <p>Subnet route tables</p> </li> <li> <p>Internet gateway route tables</p> </li> </ul> <p>Route server does not support route tables associated with virtual private gateways. To propagate routes into a transit gateway route table, use <a href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-connect.html">Transit Gateway Connect</a>.</p> <p>For more information see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/dynamic-routing-route-server.html">Dynamic routing in your VPC with VPC Route Server</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 deleterouteserver" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deleterouteserver | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified route server endpoint.</p> <p>A route server endpoint is an Amazon Web Services-managed component inside a subnet that facilitates <a href="https://en.wikipedia.org/wiki/Border_Gateway_Protocol">BGP (Border Gateway Protocol)</a> connections between your route server and your BGP peers.</p>
export def "aws ec2 deleterouteserverendpoint" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deleterouteserverendpoint | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified BGP peer from a route server.</p> <p>A route server peer is a session between a route server endpoint and the device deployed in Amazon Web Services (such as a firewall appliance or other network security function running on an EC2 instance). The device must meet these requirements:</p> <ul> <li> <p>Have an elastic network interface in the VPC</p> </li> <li> <p>Support BGP (Border Gateway Protocol)</p> </li> <li> <p>Can initiate BGP sessions</p> </li> </ul>
export def "aws ec2 deleterouteserverpeer" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deleterouteserverpeer | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified route table. You must disassociate the route table from any subnets before you can delete it. You can't delete the main route table.</p>
export def "aws ec2 deleteroutetable" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deleteroutetable | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes a security group.</p> <p>If you attempt to delete a security group that is associated with an instance or network interface, is referenced by another security group in the same VPC, or has a VPC association, the operation fails with <code>DependencyViolation</code>.</p>
export def "aws ec2 deletesecuritygroup" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletesecuritygroup | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified snapshot.</p> <p>When you make periodic snapshots of a volume, the snapshots are incremental, and only the blocks on the device that have changed since your last snapshot are saved in the new snapshot. When you delete a snapshot, only the data not needed for any other snapshot is removed. So regardless of which prior snapshots have been deleted, all active snapshots will have access to all the information needed to restore the volume.</p> <p>You cannot delete a snapshot of the root device of an EBS volume used by a registered AMI. You must first deregister the AMI before you can delete the snapshot.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-deleting-snapshot.html">Delete an Amazon EBS snapshot</a> in the <i>Amazon EBS User Guide</i>.</p>
export def "aws ec2 deletesnapshot" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletesnapshot | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the data feed for Spot Instances.</p>
export def "aws ec2 deletespotdatafeedsubscription" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletespotdatafeedsubscription | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified subnet. You must terminate all running instances in the subnet before you can delete the subnet.</p>
export def "aws ec2 deletesubnet" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletesubnet | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes a subnet CIDR reservation.</p>
export def "aws ec2 deletesubnetcidrreservation" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletesubnetcidrreservation | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified set of tags from the specified set of resources.</p> <p>To list the current tags, use <a>DescribeTags</a>. For more information about tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tag your Amazon EC2 resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
export def "aws ec2 deletetags" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletetags | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified Traffic Mirror filter.</p> <p>You cannot delete a Traffic Mirror filter that is in use by a Traffic Mirror session.</p>
export def "aws ec2 deletetrafficmirrorfilter" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletetrafficmirrorfilter | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified Traffic Mirror rule.</p>
export def "aws ec2 deletetrafficmirrorfilterrule" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletetrafficmirrorfilterrule | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified Traffic Mirror session.</p>
export def "aws ec2 deletetrafficmirrorsession" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletetrafficmirrorsession | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified Traffic Mirror target.</p> <p>You cannot delete a Traffic Mirror target that is in use by a Traffic Mirror session.</p>
export def "aws ec2 deletetrafficmirrortarget" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletetrafficmirrortarget | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified transit gateway.</p>
export def "aws ec2 deletetransitgateway" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletetransitgateway | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified Connect attachment. You must first delete any Connect peers for the attachment.</p>
export def "aws ec2 deletetransitgatewayconnect" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletetransitgatewayconnect | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified Connect peer.</p>
export def "aws ec2 deletetransitgatewayconnectpeer" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletetransitgatewayconnectpeer | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified transit gateway multicast domain.</p>
export def "aws ec2 deletetransitgatewaymulticastdomain" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletetransitgatewaymulticastdomain | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes a transit gateway peering attachment.</p>
export def "aws ec2 deletetransitgatewaypeeringattachment" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletetransitgatewaypeeringattachment | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified transit gateway policy table.</p>
export def "aws ec2 deletetransitgatewaypolicytable" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletetransitgatewaypolicytable | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes a reference (route) to a prefix list in a specified transit gateway route table.</p>
export def "aws ec2 deletetransitgatewayprefixlistreference" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletetransitgatewayprefixlistreference | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified route from the specified transit gateway route table.</p>
export def "aws ec2 deletetransitgatewayroute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletetransitgatewayroute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified transit gateway route table. If there are any route tables associated with the transit gateway route table, you must first run <a>DisassociateRouteTable</a> before you can delete the transit gateway route table. This removes any route tables associated with the transit gateway route table.</p>
export def "aws ec2 deletetransitgatewayroutetable" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletetransitgatewayroutetable | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Advertises to the transit gateway that a transit gateway route table is deleted.</p>
export def "aws ec2 deletetransitgatewayroutetableannouncement" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletetransitgatewayroutetableannouncement | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified VPC attachment.</p>
export def "aws ec2 deletetransitgatewayvpcattachment" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletetransitgatewayvpcattachment | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Delete an Amazon Web Services Verified Access endpoint.</p>
export def "aws ec2 deleteverifiedaccessendpoint" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deleteverifiedaccessendpoint | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Delete an Amazon Web Services Verified Access group.</p>
export def "aws ec2 deleteverifiedaccessgroup" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deleteverifiedaccessgroup | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Delete an Amazon Web Services Verified Access instance.</p>
export def "aws ec2 deleteverifiedaccessinstance" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deleteverifiedaccessinstance | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Delete an Amazon Web Services Verified Access trust provider.</p>
export def "aws ec2 deleteverifiedaccesstrustprovider" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deleteverifiedaccesstrustprovider | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified EBS volume. The volume must be in the <code>available</code> state (not attached to an instance).</p> <p>The volume can remain in the <code>deleting</code> state for several minutes.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-deleting-volume.html">Delete an Amazon EBS volume</a> in the <i>Amazon EBS User Guide</i>.</p>
export def "aws ec2 deletevolume" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletevolume | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified VPC. You must detach or delete all gateways and resources that are associated with the VPC before you can delete it. For example, you must terminate all instances running in the VPC, delete all security groups associated with the VPC (except the default one), delete all route tables associated with the VPC (except the default one), and so on. When you delete the VPC, it deletes the default security group, network ACL, and route table for the VPC.</p> <p>If you created a flow log for the VPC that you are deleting, note that flow logs for deleted VPCs are eventually automatically removed.</p>
export def "aws ec2 deletevpc" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletevpc | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Delete a VPC Block Public Access (BPA) exclusion. A VPC BPA exclusion is a mode that can be applied to a single VPC or subnet that exempts it from the account’s BPA mode and will allow bidirectional or egress-only access. You can create BPA exclusions for VPCs and subnets even when BPA is not enabled on the account to ensure that there is no traffic disruption to the exclusions when VPC BPA is turned on. To learn more about VPC BPA, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/security-vpc-bpa.html">Block public access to VPCs and subnets</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 deletevpcblockpublicaccessexclusion" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletevpcblockpublicaccessexclusion | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified VPC endpoint connection notifications.</p>
export def "aws ec2 deletevpcendpointconnectionnotifications" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletevpcendpointconnectionnotifications | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified VPC endpoint service configurations. Before you can delete an endpoint service configuration, you must reject any <code>Available</code> or <code>PendingAcceptance</code> interface endpoint connections that are attached to the service.</p>
export def "aws ec2 deletevpcendpointserviceconfigurations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletevpcendpointserviceconfigurations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified VPC endpoints.</p> <p>When you delete a gateway endpoint, we delete the endpoint routes in the route tables for the endpoint.</p> <p>When you delete a Gateway Load Balancer endpoint, we delete its endpoint network interfaces. You can only delete Gateway Load Balancer endpoints when the routes that are associated with the endpoint are deleted.</p> <p>When you delete an interface endpoint, we delete its endpoint network interfaces.</p>
export def "aws ec2 deletevpcendpoints" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletevpcendpoints | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes a VPC peering connection. Either the owner of the requester VPC or the owner of the accepter VPC can delete the VPC peering connection if it's in the <code>active</code> state. The owner of the requester VPC can delete a VPC peering connection in the <code>pending-acceptance</code> state. You cannot delete a VPC peering connection that's in the <code>failed</code> or <code>rejected</code> state.</p>
export def "aws ec2 deletevpcpeeringconnection" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletevpcpeeringconnection | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified VPN connection.</p> <p>If you're deleting the VPC and its associated components, we recommend that you detach the virtual private gateway from the VPC and delete the VPC before deleting the VPN connection. If you believe that the tunnel credentials for your VPN connection have been compromised, you can delete the VPN connection and create a new one that has new keys, without needing to delete the VPC or virtual private gateway. If you create a new VPN connection, you must reconfigure the customer gateway device using the new configuration information returned with the new VPN connection ID.</p> <p>For certificate-based authentication, delete all Certificate Manager (ACM) private certificates used for the Amazon Web Services-side tunnel endpoints for the VPN connection before deleting the VPN connection.</p>
export def "aws ec2 deletevpnconnection" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletevpnconnection | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.</p>
export def "aws ec2 deletevpnconnectionroute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletevpnconnectionroute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deletes the specified virtual private gateway. You must first detach the virtual private gateway from the VPC. Note that you don't need to delete the virtual private gateway if you plan to delete and recreate the VPN connection between your VPC and your network.</p>
export def "aws ec2 deletevpngateway" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deletevpngateway | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Releases the specified address range that you provisioned for use with your Amazon Web Services resources through bring your own IP addresses (BYOIP) and deletes the corresponding address pool.</p> <p>Before you can release an address range, you must stop advertising it and you must not have any IP addresses allocated from its address range.</p>
export def "aws ec2 deprovisionbyoipcidr" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deprovisionbyoipcidr | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deprovisions your Autonomous System Number (ASN) from your Amazon Web Services account. This action can only be called after any BYOIP CIDR associations are removed from your Amazon Web Services account with <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIpamByoasn.html">DisassociateIpamByoasn</a>. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoasn.html">Tutorial: Bring your ASN to IPAM</a> in the <i>Amazon VPC IPAM guide</i>.</p>
export def "aws ec2 deprovisionipambyoasn" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deprovisionipambyoasn | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deprovision a CIDR provisioned from an IPAM pool. If you deprovision a CIDR from a pool that has a source pool, the CIDR is recycled back into the source pool. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/depro-pool-cidr-ipam.html">Deprovision pool CIDRs</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
export def "aws ec2 deprovisionipampoolcidr" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deprovisionipampoolcidr | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deprovision a CIDR from a public IPv4 pool.</p>
export def "aws ec2 deprovisionpublicipv4poolcidr" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deprovisionpublicipv4poolcidr | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deregisters the specified AMI. A deregistered AMI can't be used to launch new instances.</p> <p>If a deregistered EBS-backed AMI matches a Recycle Bin retention rule, it moves to the Recycle Bin for the specified retention period. It can be restored before its retention period expires, after which it is permanently deleted. If the deregistered AMI doesn't match a retention rule, it is permanently deleted immediately. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/recycle-bin.html">Recover deleted Amazon EBS snapshots and EBS-backed AMIs with Recycle Bin</a> in the <i>Amazon EBS User Guide</i>.</p> <p>When deregistering an EBS-backed AMI, you can optionally delete its associated snapshots at the same time. However, if a snapshot is associated with multiple AMIs, it won't be deleted even if specified for deletion, although the AMI will still be deregistered.</p> <p>Deregistering an AMI does not delete the following:</p> <ul> <li> <p>Instances already launched from the AMI. You'll continue to incur usage costs for the instances until you terminate them.</p> </li> <li> <p>For EBS-backed AMIs: Snapshots that are associated with multiple AMIs. You'll continue to incur snapshot storage costs.</p> </li> <li> <p>For instance store-backed AMIs: The files uploaded to Amazon S3 during AMI creation. You'll continue to incur S3 storage costs.</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/deregister-ami.html">Deregister an Amazon EC2 AMI</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 deregisterimage" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deregisterimage | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deregisters tag keys to prevent tags that have the specified tag keys from being included in scheduled event notifications for resources in the Region.</p>
export def "aws ec2 deregisterinstanceeventnotificationattributes" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deregisterinstanceeventnotificationattributes | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deregisters the specified members (network interfaces) from the transit gateway multicast group.</p>
export def "aws ec2 deregistertransitgatewaymulticastgroupmembers" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deregistertransitgatewaymulticastgroupmembers | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Deregisters the specified sources (network interfaces) from the transit gateway multicast group.</p>
export def "aws ec2 deregistertransitgatewaymulticastgroupsources" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 deregistertransitgatewaymulticastgroupsources | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes attributes of your Amazon Web Services account. The following are the supported account attributes:</p> <ul> <li> <p> <code>default-vpc</code>: The ID of the default VPC for your account, or <code>none</code>.</p> </li> <li> <p> <code>max-instances</code>: This attribute is no longer supported. The returned value does not reflect your actual vCPU limit for running On-Demand Instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-on-demand-instances.html#ec2-on-demand-instances-limits">On-Demand Instance Limits</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </li> <li> <p> <code>max-elastic-ips</code>: The maximum number of Elastic IP addresses that you can allocate.</p> </li> <li> <p> <code>supported-platforms</code>: This attribute is deprecated.</p> </li> <li> <p> <code>vpc-max-elastic-ips</code>: The maximum number of Elastic IP addresses that you can allocate.</p> </li> <li> <p> <code>vpc-max-security-groups-per-interface</code>: The maximum number of security groups that you can assign to a network interface.</p> </li> </ul> <note> <p>The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.</p> </note>
export def "aws ec2 describeaccountattributes" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeaccountattributes | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes an Elastic IP address transfer. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#transfer-EIPs-intro">Transfer Elastic IP addresses</a> in the <i>Amazon VPC User Guide</i>.</p> <p>When you transfer an Elastic IP address, there is a two-step handshake between the source and transfer Amazon Web Services accounts. When the source account starts the transfer, the transfer account has seven days to accept the Elastic IP address transfer. During those seven days, the source account can view the pending transfer by using this action. After seven days, the transfer expires and ownership of the Elastic IP address returns to the source account. Accepted transfers are visible to the source account for 14 days after the transfers have been accepted.</p>
export def "aws ec2 describeaddresstransfers" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeaddresstransfers | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified Elastic IP addresses or all of your Elastic IP addresses.</p>
export def "aws ec2 describeaddresses" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeaddresses | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the attributes of the specified Elastic IP addresses. For requirements, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#Using_Elastic_Addressing_Reverse_DNS">Using reverse DNS for email applications</a>.</p>
export def "aws ec2 describeaddressesattribute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeaddressesattribute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the longer ID format settings for all resource types in a specific Region. This request is useful for performing a quick audit to determine whether a specific Region is fully opted in for longer IDs (17-character IDs).</p> <p>This request only returns information about resource types that support longer IDs.</p> <p>The following resource types support longer IDs: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p>
export def "aws ec2 describeaggregateidformat" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeaggregateidformat | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the Availability Zones, Local Zones, and Wavelength Zones that are available to you.</p> <p>For more information about Availability Zones, Local Zones, and Wavelength Zones, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html">Regions and zones</a> in the <i>Amazon EC2 User Guide</i>.</p> <note> <p>The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.</p> </note>
export def "aws ec2 describeavailabilityzones" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeavailabilityzones | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the current Infrastructure Performance metric subscriptions.</p>
export def "aws ec2 describeawsnetworkperformancemetricsubscriptions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeawsnetworkperformancemetricsubscriptions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified bundle tasks or all of your bundle tasks.</p> <note> <p>Completed bundle tasks are listed for only a limited time. If your bundle task is no longer in the list, you can still register an AMI from it. Just use <code>RegisterImage</code> with the Amazon S3 bucket name and image manifest name you provided to the bundle task.</p> </note> <note> <p>The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.</p> </note>
export def "aws ec2 describebundletasks" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describebundletasks | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the IP address ranges that were provisioned for use with Amazon Web Services resources through through bring your own IP addresses (BYOIP).</p>
export def "aws ec2 describebyoipcidrs" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describebyoipcidrs | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the events for the specified Capacity Block extension during the specified time.</p>
export def "aws ec2 describecapacityblockextensionhistory" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describecapacityblockextensionhistory | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes Capacity Block extension offerings available for purchase in the Amazon Web Services Region that you're currently using.</p>
export def "aws ec2 describecapacityblockextensionofferings" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describecapacityblockextensionofferings | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes Capacity Block offerings available for purchase in the Amazon Web Services Region that you're currently using. With Capacity Blocks, you can purchase a specific GPU instance type or EC2 UltraServer for a period of time.</p> <p>To search for an available Capacity Block offering, you specify a reservation duration and instance count.</p>
export def "aws ec2 describecapacityblockofferings" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describecapacityblockofferings | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the availability of capacity for the specified Capacity blocks, or all of your Capacity Blocks.</p>
export def "aws ec2 describecapacityblockstatus" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describecapacityblockstatus | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes details about Capacity Blocks in the Amazon Web Services Region that you're currently using.</p>
export def "aws ec2 describecapacityblocks" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describecapacityblocks | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes a request to assign the billing of the unused capacity of a Capacity Reservation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/transfer-billing.html"> Billing assignment for shared Amazon EC2 Capacity Reservations</a>.</p>
export def "aws ec2 describecapacityreservationbillingrequests" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describecapacityreservationbillingrequests | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more Capacity Reservation Fleets.</p>
export def "aws ec2 describecapacityreservationfleets" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describecapacityreservationfleets | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more of your Capacity Reservations. The results describe only the Capacity Reservations in the Amazon Web Services Region that you're currently using.</p>
export def "aws ec2 describecapacityreservations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describecapacityreservations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more of your carrier gateways.</p>
export def "aws ec2 describecarriergateways" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describecarriergateways | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <note> <p>This action is deprecated.</p> </note> <p>Describes your linked EC2-Classic instances. This request only returns information about EC2-Classic instances linked to a VPC through ClassicLink. You cannot use this request to return information about other instances.</p>
export def "aws ec2 describeclassiclinkinstances" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeclassiclinkinstances | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the authorization rules for a specified Client VPN endpoint.</p>
export def "aws ec2 describeclientvpnauthorizationrules" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeclientvpnauthorizationrules | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes active client connections and connections that have been terminated within the last 60 minutes for the specified Client VPN endpoint.</p>
export def "aws ec2 describeclientvpnconnections" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeclientvpnconnections | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more Client VPN endpoints in the account.</p>
export def "aws ec2 describeclientvpnendpoints" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeclientvpnendpoints | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the routes for the specified Client VPN endpoint.</p>
export def "aws ec2 describeclientvpnroutes" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeclientvpnroutes | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the target networks associated with the specified Client VPN endpoint.</p>
export def "aws ec2 describeclientvpntargetnetworks" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeclientvpntargetnetworks | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified customer-owned address pools or all of your customer-owned address pools.</p>
export def "aws ec2 describecoippools" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describecoippools | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified conversion tasks or all your conversion tasks. For more information, see the <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/">VM Import/Export User Guide</a>.</p> <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
export def "aws ec2 describeconversiontasks" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeconversiontasks | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more of your VPN customer gateways.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services Site-to-Site VPN User Guide</i>.</p>
export def "aws ec2 describecustomergateways" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describecustomergateways | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the metadata of an account status report, including the status of the report.</p> <p>To view the full report, download it from the Amazon S3 bucket where it was saved. Reports are accessible only when they have the <code>complete</code> status. Reports with other statuses (<code>running</code>, <code>cancelled</code>, or <code>error</code>) are not available in the S3 bucket. For more information about downloading objects from an S3 bucket, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/download-objects.html">Downloading objects</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_declarative_status-report.html">Generating the account status report for declarative policies</a> in the <i>Amazon Web Services Organizations User Guide</i>.</p>
export def "aws ec2 describedeclarativepoliciesreports" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describedeclarativepoliciesreports | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes your DHCP option sets. The default is to describe all your DHCP option sets. Alternatively, you can specify specific DHCP option set IDs or filter the results to include only the DHCP option sets that match specific criteria.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP option sets</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 describedhcpoptions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describedhcpoptions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes your egress-only internet gateways. The default is to describe all your egress-only internet gateways. Alternatively, you can specify specific egress-only internet gateway IDs or filter the results to include only the egress-only internet gateways that match specific criteria.</p>
export def "aws ec2 describeegressonlyinternetgateways" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeegressonlyinternetgateways | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <note> <p>Amazon Elastic Graphics reached end of life on January 8, 2024.</p> </note> <p>Describes the Elastic Graphics accelerator associated with your instances.</p>
export def "aws ec2 describeelasticgpus" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeelasticgpus | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified export image tasks or all of your export image tasks.</p>
export def "aws ec2 describeexportimagetasks" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeexportimagetasks | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified export instance tasks or all of your export instance tasks.</p>
export def "aws ec2 describeexporttasks" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeexporttasks | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describe details for Windows AMIs that are configured for Windows fast launch.</p>
export def "aws ec2 describefastlaunchimages" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describefastlaunchimages | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the state of fast snapshot restores for your snapshots.</p>
export def "aws ec2 describefastsnapshotrestores" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describefastsnapshotrestores | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the events for the specified EC2 Fleet during the specified time.</p> <p>EC2 Fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query by the last evaluated time and not miss a recorded event. EC2 Fleet events are available for 48 hours.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/fleet-monitor.html">Monitor fleet events using Amazon EventBridge</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 describefleethistory" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describefleethistory | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the running instances for the specified EC2 Fleet.</p> <note> <p>Currently, <code>DescribeFleetInstances</code> does not support fleets of type <code>instant</code>. Instead, use <code>DescribeFleets</code>, specifying the <code>instant</code> fleet ID in the request.</p> </note> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-ec2-fleet.html#monitor-ec2-fleet">Describe your EC2 Fleet</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 describefleetinstances" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describefleetinstances | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified EC2 Fleet or all of your EC2 Fleets.</p> <important> <p>If a fleet is of type <code>instant</code>, you must specify the fleet ID in the request, otherwise the fleet does not appear in the response.</p> </important> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-ec2-fleet.html#monitor-ec2-fleet">Describe your EC2 Fleet</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 describefleets" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describefleets | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more flow logs.</p> <p>To view the published flow log records, you must view the log destination. For example, the CloudWatch Logs log group, the Amazon S3 bucket, or the Kinesis Data Firehose delivery stream.</p>
export def "aws ec2 describeflowlogs" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeflowlogs | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified attribute of the specified Amazon FPGA Image (AFI).</p>
export def "aws ec2 describefpgaimageattribute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describefpgaimageattribute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the Amazon FPGA Images (AFIs) available to you. These include public AFIs, private AFIs that you own, and AFIs owned by other Amazon Web Services accounts for which you have load permissions.</p>
export def "aws ec2 describefpgaimages" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describefpgaimages | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the Dedicated Host reservations that are available to purchase.</p> <p>The results describe all of the Dedicated Host reservation offerings, including offerings that might not match the instance family and Region of your Dedicated Hosts. When purchasing an offering, ensure that the instance family and Region of the offering matches that of the Dedicated Hosts with which it is to be associated. For more information about supported instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html">Dedicated Hosts</a> in the <i>Amazon EC2 User Guide</i>. </p>
export def "aws ec2 describehostreservationofferings" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describehostreservationofferings | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes reservations that are associated with Dedicated Hosts in your account.</p>
export def "aws ec2 describehostreservations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describehostreservations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified Dedicated Hosts or all your Dedicated Hosts.</p> <p>The results describe only the Dedicated Hosts in the Region you're currently using. All listed instances consume capacity on your Dedicated Host. Dedicated Hosts that have recently been released are listed with the state <code>released</code>.</p>
export def "aws ec2 describehosts" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describehosts | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes your IAM instance profile associations.</p>
export def "aws ec2 describeiaminstanceprofileassociations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeiaminstanceprofileassociations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the ID format settings for your resources on a per-Region basis, for example, to view which resource types are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified; it does not return information about other resource types.</p> <p>The following resource types support longer IDs: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p> <p>These settings apply to the IAM user who makes the request; they do not apply to the entire Amazon Web Services account. By default, an IAM user defaults to the same settings as the root user, unless they explicitly override the settings by running the <a>ModifyIdFormat</a> command. Resources created with longer IDs are visible to all IAM users, regardless of these settings and provided that they have permission to use the relevant <code>Describe</code> command for the resource type.</p>
export def "aws ec2 describeidformat" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeidformat | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the ID format settings for resources for the specified IAM user, IAM role, or root user. For example, you can view the resource types that are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified; it does not return information about other resource types. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p> <p>The following resource types support longer IDs: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p> <p>These settings apply to the principal specified in the request. They do not apply to the principal that makes the request.</p>
export def "aws ec2 describeidentityidformat" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeidentityidformat | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified attribute of the specified AMI. You can specify only one attribute at a time.</p> <note> <p>The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.</p> </note>
export def "aws ec2 describeimageattribute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeimageattribute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes your Amazon Web Services resources that are referencing the specified images.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-ami-references.html">Identify your resources referencing specified AMIs</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 describeimagereferences" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeimagereferences | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the entries in image usage reports, showing how your images are used across other Amazon Web Services accounts.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/your-ec2-ami-usage.html">View your AMI usage</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 describeimageusagereportentries" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeimageusagereportentries | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the configuration and status of image usage reports, filtered by report IDs or image IDs.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/your-ec2-ami-usage.html">View your AMI usage</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 describeimageusagereports" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeimageusagereports | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified images (AMIs, AKIs, and ARIs) available to you or all of the images available to you.</p> <p>The images available to you include public images, private images that you own, and private images owned by other Amazon Web Services accounts for which you have explicit launch permissions.</p> <p>Recently deregistered images appear in the returned results for a short interval and then return empty results. After all instances that reference a deregistered AMI are terminated, specifying the ID of the image will eventually return an error indicating that the AMI ID cannot be found.</p> <p>When Allowed AMIs is set to <code>enabled</code>, only allowed images are returned in the results, with the <code>imageAllowed</code> field set to <code>true</code> for each image. In <code>audit-mode</code>, the <code>imageAllowed</code> field is set to <code>true</code> for images that meet the account's Allowed AMIs criteria, and <code>false</code> for images that don't meet the criteria. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-allowed-amis.html">Allowed AMIs</a>.</p> <p>The Amazon EC2 API follows an eventual consistency model. This means that the result of an API command you run that creates or modifies resources might not be immediately available to all subsequent commands you run. For guidance on how to manage eventual consistency, see <a href="https://docs.aws.amazon.com/ec2/latest/devguide/eventual-consistency.html">Eventual consistency in the Amazon EC2 API</a> in the <i>Amazon EC2 Developer Guide</i>.</p> <important> <p>We strongly recommend using only paginated requests. Unpaginated requests are susceptible to throttling and timeouts.</p> </important> <note> <p>The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.</p> </note>
export def "aws ec2 describeimages" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeimages | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Displays details about an import virtual machine or import snapshot tasks that are already created.</p>
export def "aws ec2 describeimportimagetasks" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeimportimagetasks | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes your import snapshot tasks.</p>
export def "aws ec2 describeimportsnapshottasks" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeimportsnapshottasks | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified attribute of the specified instance. You can specify only one attribute at a time. </p>
export def "aws ec2 describeinstanceattribute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeinstanceattribute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified EC2 Instance Connect Endpoints or all EC2 Instance Connect Endpoints.</p>
export def "aws ec2 describeinstanceconnectendpoints" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeinstanceconnectendpoints | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the credit option for CPU usage of the specified burstable performance instances. The credit options are <code>standard</code> and <code>unlimited</code>.</p> <p>If you do not specify an instance ID, Amazon EC2 returns burstable performance instances with the <code>unlimited</code> credit option, as well as instances that were previously configured as T2, T3, and T3a with the <code>unlimited</code> credit option. For example, if you resize a T2 instance, while it is configured as <code>unlimited</code>, to an M4 instance, Amazon EC2 returns the M4 instance.</p> <p>If you specify one or more instance IDs, Amazon EC2 returns the credit option (<code>standard</code> or <code>unlimited</code>) of those instances. If you specify an instance ID that is not valid, such as an instance that is not a burstable performance instance, an error is returned.</p> <p>Recently terminated instances might appear in the returned results. This interval is usually less than one hour.</p> <p>If an Availability Zone is experiencing a service disruption and you specify instance IDs in the affected zone, or do not specify any instance IDs at all, the call fails. If you specify only instance IDs in an unaffected zone, the call works normally.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 describeinstancecreditspecifications" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeinstancecreditspecifications | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the tag keys that are registered to appear in scheduled event notifications for resources in the current Region.</p>
export def "aws ec2 describeinstanceeventnotificationattributes" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeinstanceeventnotificationattributes | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified event windows or all event windows.</p> <p>If you specify event window IDs, the output includes information for only the specified event windows. If you specify filters, the output includes information for only those event windows that meet the filter criteria. If you do not specify event windows IDs or filters, the output includes information for all event windows, which can affect performance. We recommend that you use pagination to ensure that the operation returns quickly and successfully. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled events</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 describeinstanceeventwindows" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeinstanceeventwindows | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the AMI that was used to launch an instance, even if the AMI is deprecated, deregistered, made private (no longer public or shared with your account), or not allowed.</p> <p>If you specify instance IDs, the output includes information for only the specified instances. If you specify filters, the output includes information for only those instances that meet the filter criteria. If you do not specify instance IDs or filters, the output includes information for all instances, which can affect performance.</p> <p>If you specify an instance ID that is not valid, an instance that doesn't exist, or an instance that you do not own, an error (<code>InvalidInstanceID.NotFound</code>) is returned.</p> <p>Recently terminated instances might appear in the returned results. This interval is usually less than one hour.</p> <p>In the rare case where an Availability Zone is experiencing a service disruption and you specify instance IDs that are in the affected Availability Zone, or do not specify any instance IDs at all, the call fails. If you specify only instance IDs that are in an unaffected Availability Zone, the call works normally.</p> <note> <p>The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.</p> </note>
export def "aws ec2 describeinstanceimagemetadata" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeinstanceimagemetadata | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the status of the specified instances or all of your instances. By default, only running instances are described, unless you specifically indicate to return the status of all instances.</p> <p>Instance status includes the following components:</p> <ul> <li> <p> <b>Status checks</b> - Amazon EC2 performs status checks on running EC2 instances to identify hardware and software issues. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-system-instance-status-check.html">Status checks for your instances</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstances.html">Troubleshoot instances with failed status checks</a> in the <i>Amazon EC2 User Guide</i>.</p> </li> <li> <p> <b>Scheduled events</b> - Amazon EC2 can schedule events (such as reboot, stop, or terminate) for your instances related to hardware issues, software updates, or system maintenance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-instances-status-check_sched.html">Scheduled events for your instances</a> in the <i>Amazon EC2 User Guide</i>.</p> </li> <li> <p> <b>Instance state</b> - You can manage your instances from the moment you launch them through their termination. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance lifecycle</a> in the <i>Amazon EC2 User Guide</i>.</p> </li> </ul> <p>The Amazon EC2 API follows an eventual consistency model. This means that the result of an API command you run that creates or modifies resources might not be immediately available to all subsequent commands you run. For guidance on how to manage eventual consistency, see <a href="https://docs.aws.amazon.com/ec2/latest/devguide/eventual-consistency.html">Eventual consistency in the Amazon EC2 API</a> in the <i>Amazon EC2 Developer Guide</i>.</p> <note> <p>The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.</p> </note>
export def "aws ec2 describeinstancestatus" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeinstancestatus | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes a tree-based hierarchy that represents the physical host placement of your EC2 instances within an Availability Zone or Local Zone. You can use this information to determine the relative proximity of your EC2 instances within the Amazon Web Services network to support your tightly coupled workloads.</p> <p>Instance topology is supported for specific instance types only. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-topology-prerequisites.html"> Prerequisites for Amazon EC2 instance topology</a> in the <i>Amazon EC2 User Guide</i>.</p> <note> <p>The Amazon EC2 API follows an eventual consistency model due to the distributed nature of the system supporting it. As a result, when you call the DescribeInstanceTopology API command immediately after launching instances, the response might return a <code>null</code> value for <code>capacityBlockId</code> because the data might not have fully propagated across all subsystems. For more information, see <a href="https://docs.aws.amazon.com/ec2/latest/devguide/eventual-consistency.html">Eventual consistency in the Amazon EC2 API</a> in the <i>Amazon EC2 Developer Guide</i>.</p> </note> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-topology.html">Amazon EC2 instance topology</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 describeinstancetopology" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeinstancetopology | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Lists the instance types that are offered for the specified location. If no location is specified, the default is to list the instance types that are offered in the current Region.</p>
export def "aws ec2 describeinstancetypeofferings" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeinstancetypeofferings | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified instance types. By default, all instance types for the current Region are described. Alternatively, you can filter the results.</p>
export def "aws ec2 describeinstancetypes" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeinstancetypes | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified instances or all instances.</p> <p>If you specify instance IDs, the output includes information for only the specified instances. If you specify filters, the output includes information for only those instances that meet the filter criteria. If you do not specify instance IDs or filters, the output includes information for all instances, which can affect performance. We recommend that you use pagination to ensure that the operation returns quickly and successfully.</p> <p>If you specify an instance ID that is not valid, an error is returned. If you specify an instance that you do not own, it is not included in the output.</p> <p>Recently terminated instances might appear in the returned results. This interval is usually less than one hour.</p> <p>If you describe instances in the rare case where an Availability Zone is experiencing a service disruption and you specify instance IDs that are in the affected zone, or do not specify any instance IDs at all, the call fails. If you describe instances and specify only instance IDs that are in an unaffected zone, the call works normally.</p> <p>The Amazon EC2 API follows an eventual consistency model. This means that the result of an API command you run that creates or modifies resources might not be immediately available to all subsequent commands you run. For guidance on how to manage eventual consistency, see <a href="https://docs.aws.amazon.com/ec2/latest/devguide/eventual-consistency.html">Eventual consistency in the Amazon EC2 API</a> in the <i>Amazon EC2 Developer Guide</i>.</p> <important> <p>We strongly recommend using only paginated requests. Unpaginated requests are susceptible to throttling and timeouts.</p> </important> <note> <p>The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.</p> </note>
export def "aws ec2 describeinstances" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeinstances | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes your internet gateways. The default is to describe all your internet gateways. Alternatively, you can specify specific internet gateway IDs or filter the results to include only the internet gateways that match specific criteria.</p>
export def "aws ec2 describeinternetgateways" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeinternetgateways | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes your Autonomous System Numbers (ASNs), their provisioning statuses, and the BYOIP CIDRs with which they are associated. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoasn.html">Tutorial: Bring your ASN to IPAM</a> in the <i>Amazon VPC IPAM guide</i>.</p>
export def "aws ec2 describeipambyoasn" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeipambyoasn | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describe verification tokens. A verification token is an Amazon Web Services-generated random value that you can use to prove ownership of an external resource. For example, you can use a verification token to validate that you control a public IP address range when you bring an IP address range to Amazon Web Services (BYOIP). </p>
export def "aws ec2 describeipamexternalresourceverificationtokens" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeipamexternalresourceverificationtokens | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Get information about your IPAM pools.</p>
export def "aws ec2 describeipampools" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeipampools | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes IPAM resource discoveries. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.</p>
export def "aws ec2 describeipamresourcediscoveries" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeipamresourcediscoveries | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes resource discovery association with an Amazon VPC IPAM. An associated resource discovery is a resource discovery that has been associated with an IPAM..</p>
export def "aws ec2 describeipamresourcediscoveryassociations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeipamresourcediscoveryassociations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Get information about your IPAM scopes.</p>
export def "aws ec2 describeipamscopes" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeipamscopes | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Get information about your IPAM pools.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>. </p>
export def "aws ec2 describeipams" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeipams | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes your IPv6 address pools.</p>
export def "aws ec2 describeipv6pools" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeipv6pools | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified key pairs or all of your key pairs.</p> <p>For more information about key pairs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Amazon EC2 key pairs</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 describekeypairs" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describekeypairs | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more versions of a specified launch template. You can describe all versions, individual versions, or a range of versions. You can also describe all the latest versions or all the default versions of all the launch templates in your account.</p>
export def "aws ec2 describelaunchtemplateversions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describelaunchtemplateversions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more launch templates.</p>
export def "aws ec2 describelaunchtemplates" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describelaunchtemplates | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the associations between virtual interface groups and local gateway route tables.</p>
export def "aws ec2 describelocalgatewayroutetablevirtualinterfacegroupassociations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describelocalgatewayroutetablevirtualinterfacegroupassociations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified associations between VPCs and local gateway route tables.</p>
export def "aws ec2 describelocalgatewayroutetablevpcassociations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describelocalgatewayroutetablevpcassociations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more local gateway route tables. By default, all local gateway route tables are described. Alternatively, you can filter the results.</p>
export def "aws ec2 describelocalgatewayroutetables" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describelocalgatewayroutetables | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified local gateway virtual interface groups.</p>
export def "aws ec2 describelocalgatewayvirtualinterfacegroups" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describelocalgatewayvirtualinterfacegroups | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified local gateway virtual interfaces.</p>
export def "aws ec2 describelocalgatewayvirtualinterfaces" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describelocalgatewayvirtualinterfaces | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more local gateways. By default, all local gateways are described. Alternatively, you can filter the results.</p>
export def "aws ec2 describelocalgateways" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describelocalgateways | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the lock status for a snapshot.</p>
export def "aws ec2 describelockedsnapshots" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describelockedsnapshots | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified EC2 Mac Dedicated Host or all of your EC2 Mac Dedicated Hosts.</p>
export def "aws ec2 describemachosts" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describemachosts | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes a System Integrity Protection (SIP) modification task or volume ownership delegation task for an Amazon EC2 Mac instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/mac-sip-settings.html#mac-sip-configure">Configure SIP for Amazon EC2 instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 describemacmodificationtasks" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describemacmodificationtasks | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes your managed prefix lists and any Amazon Web Services-managed prefix lists.</p>
export def "aws ec2 describemanagedprefixlists" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describemanagedprefixlists | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <note> <p>This action is deprecated.</p> </note> <p>Describes your Elastic IP addresses that are being moved from or being restored to the EC2-Classic platform. This request does not return information about any other Elastic IP addresses in your account.</p>
export def "aws ec2 describemovingaddresses" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describemovingaddresses | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes your NAT gateways. The default is to describe all your NAT gateways. Alternatively, you can specify specific NAT gateway IDs or filter the results to include only the NAT gateways that match specific criteria.</p>
export def "aws ec2 describenatgateways" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describenatgateways | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes your network ACLs. The default is to describe all your network ACLs. Alternatively, you can specify specific network ACL IDs or filter the results to include only the network ACLs that match specific criteria.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html">Network ACLs</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 describenetworkacls" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describenetworkacls | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified Network Access Scope analyses.</p>
export def "aws ec2 describenetworkinsightsaccessscopeanalyses" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describenetworkinsightsaccessscopeanalyses | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified Network Access Scopes.</p>
export def "aws ec2 describenetworkinsightsaccessscopes" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describenetworkinsightsaccessscopes | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more of your network insights analyses.</p>
export def "aws ec2 describenetworkinsightsanalyses" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describenetworkinsightsanalyses | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more of your paths.</p>
export def "aws ec2 describenetworkinsightspaths" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describenetworkinsightspaths | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes a network interface attribute. You can specify only one attribute at a time.</p>
export def "aws ec2 describenetworkinterfaceattribute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describenetworkinterfaceattribute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the permissions for your network interfaces. </p>
export def "aws ec2 describenetworkinterfacepermissions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describenetworkinterfacepermissions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified network interfaces or all your network interfaces.</p> <p>If you have a large number of network interfaces, the operation fails unless you use pagination or one of the following filters: <code>group-id</code>, <code>mac-address</code>, <code>private-dns-name</code>, <code>private-ip-address</code>, <code>subnet-id</code>, or <code>vpc-id</code>.</p> <important> <p>We strongly recommend using only paginated requests. Unpaginated requests are susceptible to throttling and timeouts.</p> </important>
export def "aws ec2 describenetworkinterfaces" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describenetworkinterfaces | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the Outposts link aggregation groups (LAGs).</p> <note> <p>LAGs are only available for second-generation Outposts racks at this time.</p> </note>
export def "aws ec2 describeoutpostlags" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeoutpostlags | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified placement groups or all of your placement groups.</p> <note> <p>To describe a specific placement group that is <i>shared</i> with your account, you must specify the ID of the placement group using the <code>GroupId</code> parameter. Specifying the name of a <i>shared</i> placement group using the <code>GroupNames</code> parameter will result in an error.</p> </note> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement groups</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 describeplacementgroups" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeplacementgroups | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes available Amazon Web Services services in a prefix list format, which includes the prefix list name and prefix list ID of the service and the IP address range for the service.</p>
export def "aws ec2 describeprefixlists" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeprefixlists | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the ID format settings for the root user and all IAM roles and IAM users that have explicitly specified a longer ID (17-character ID) preference. </p> <p>By default, all IAM roles and IAM users default to the same ID settings as the root user, unless they explicitly override the settings. This request is useful for identifying those IAM users and IAM roles that have overridden the default ID settings.</p> <p>The following resource types support longer IDs: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p>
export def "aws ec2 describeprincipalidformat" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeprincipalidformat | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified IPv4 address pools.</p>
export def "aws ec2 describepublicipv4pools" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describepublicipv4pools | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the Regions that are enabled for your account, or all Regions.</p> <p>For a list of the Regions supported by Amazon EC2, see <a href="https://docs.aws.amazon.com/ec2/latest/devguide/ec2-endpoints.html">Amazon EC2 service endpoints</a>.</p> <p>For information about enabling and disabling Regions for your account, see <a href="https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-regions.html">Specify which Amazon Web Services Regions your account can use</a> in the <i>Amazon Web Services Account Management Reference Guide</i>.</p> <note> <p>The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.</p> </note>
export def "aws ec2 describeregions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeregions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes a root volume replacement task. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/replace-root.html">Replace a root volume</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 describereplacerootvolumetasks" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describereplacerootvolumetasks | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more of the Reserved Instances that you purchased.</p> <p>For more information about Reserved Instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html">Reserved Instances</a> in the <i>Amazon EC2 User Guide</i>.</p> <note> <p>The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.</p> </note>
export def "aws ec2 describereservedinstances" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describereservedinstances | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes your account's Reserved Instance listings in the Reserved Instance Marketplace.</p> <p>The Reserved Instance Marketplace matches sellers who want to resell Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.</p> <p>As a seller, you choose to list some or all of your Reserved Instances, and you specify the upfront price to receive for them. Your Reserved Instances are then listed in the Reserved Instance Marketplace and are available for purchase.</p> <p>As a buyer, you specify the configuration of the Reserved Instance to purchase, and the Marketplace matches what you're searching for with what's available. The Marketplace first sells the lowest priced Reserved Instances to you, and continues to sell available Reserved Instance listings to you until your demand is met. You are charged based on the total price of all of the listings that you purchase.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Sell in the Reserved Instance Marketplace</a> in the <i>Amazon EC2 User Guide</i>.</p> <note> <p>The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.</p> </note>
export def "aws ec2 describereservedinstanceslistings" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describereservedinstanceslistings | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the modifications made to your Reserved Instances. If no parameter is specified, information about all your Reserved Instances modification requests is returned. If a modification ID is specified, only information about the specific modification is returned.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modify Reserved Instances</a> in the <i>Amazon EC2 User Guide</i>.</p> <note> <p>The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.</p> </note>
export def "aws ec2 describereservedinstancesmodifications" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describereservedinstancesmodifications | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes Reserved Instance offerings that are available for purchase. With Reserved Instances, you purchase the right to launch instances for a period of time. During that time period, you do not receive insufficient capacity errors, and you pay a lower usage rate than the rate charged for On-Demand instances for the actual time used.</p> <p>If you have listed your own Reserved Instances for sale in the Reserved Instance Marketplace, they will be excluded from these results. This is to ensure that you do not purchase your own Reserved Instances.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Sell in the Reserved Instance Marketplace</a> in the <i>Amazon EC2 User Guide</i>.</p> <note> <p>The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.</p> </note>
export def "aws ec2 describereservedinstancesofferings" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describereservedinstancesofferings | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more route server endpoints.</p> <p>A route server endpoint is an Amazon Web Services-managed component inside a subnet that facilitates <a href="https://en.wikipedia.org/wiki/Border_Gateway_Protocol">BGP (Border Gateway Protocol)</a> connections between your route server and your BGP peers.</p> <p>For more information see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/dynamic-routing-route-server.html">Dynamic routing in your VPC with VPC Route Server</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 describerouteserverendpoints" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describerouteserverendpoints | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more route server peers.</p> <p>A route server peer is a session between a route server endpoint and the device deployed in Amazon Web Services (such as a firewall appliance or other network security function running on an EC2 instance). The device must meet these requirements:</p> <ul> <li> <p>Have an elastic network interface in the VPC</p> </li> <li> <p>Support BGP (Border Gateway Protocol)</p> </li> <li> <p>Can initiate BGP sessions</p> </li> </ul> <p>For more information see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/dynamic-routing-route-server.html">Dynamic routing in your VPC with VPC Route Server</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 describerouteserverpeers" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describerouteserverpeers | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more route servers.</p> <p>Amazon VPC Route Server simplifies routing for traffic between workloads that are deployed within a VPC and its internet gateways. With this feature, VPC Route Server dynamically updates VPC and internet gateway route tables with your preferred IPv4 or IPv6 routes to achieve routing fault tolerance for those workloads. This enables you to automatically reroute traffic within a VPC, which increases the manageability of VPC routing and interoperability with third-party workloads.</p> <p>Route server supports the follow route table types:</p> <ul> <li> <p>VPC route tables not associated with subnets</p> </li> <li> <p>Subnet route tables</p> </li> <li> <p>Internet gateway route tables</p> </li> </ul> <p>Route server does not support route tables associated with virtual private gateways. To propagate routes into a transit gateway route table, use <a href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-connect.html">Transit Gateway Connect</a>.</p> <p>For more information see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/dynamic-routing-route-server.html">Dynamic routing in your VPC with VPC Route Server</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 describerouteservers" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describerouteservers | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes your route tables. The default is to describe all your route tables. Alternatively, you can specify specific route table IDs or filter the results to include only the route tables that match specific criteria.</p> <p>Each subnet in your VPC must be associated with a route table. If a subnet is not explicitly associated with any route table, it is implicitly associated with the main route table. This command does not return the subnet ID for implicit associations.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route tables</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 describeroutetables" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeroutetables | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Finds available schedules that meet the specified criteria.</p> <p>You can search for an available schedule no more than 3 months in advance. You must meet the minimum required duration of 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.</p> <p>After you find a schedule that meets your needs, call <a>PurchaseScheduledInstances</a> to purchase Scheduled Instances with that schedule.</p>
export def "aws ec2 describescheduledinstanceavailability" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describescheduledinstanceavailability | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified Scheduled Instances or all your Scheduled Instances.</p>
export def "aws ec2 describescheduledinstances" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describescheduledinstances | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the VPCs on the other side of a VPC peering or Transit Gateway connection that are referencing the security groups you've specified in this request.</p>
export def "aws ec2 describesecuritygroupreferences" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describesecuritygroupreferences | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more of your security group rules.</p>
export def "aws ec2 describesecuritygrouprules" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describesecuritygrouprules | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes security group VPC associations made with <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateSecurityGroupVpc.html">AssociateSecurityGroupVpc</a>.</p>
export def "aws ec2 describesecuritygroupvpcassociations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describesecuritygroupvpcassociations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified security groups or all of your security groups.</p>
export def "aws ec2 describesecuritygroups" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describesecuritygroups | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the Outpost service link virtual interfaces.</p>
export def "aws ec2 describeservicelinkvirtualinterfaces" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeservicelinkvirtualinterfaces | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified attribute of the specified snapshot. You can specify only one attribute at a time.</p> <p>For more information about EBS snapshots, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-snapshots.html">Amazon EBS snapshots</a> in the <i>Amazon EBS User Guide</i>.</p>
export def "aws ec2 describesnapshotattribute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describesnapshotattribute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the storage tier status of one or more Amazon EBS snapshots.</p>
export def "aws ec2 describesnapshottierstatus" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describesnapshottierstatus | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified EBS snapshots available to you or all of the EBS snapshots available to you.</p> <p>The snapshots available to you include public snapshots, private snapshots that you own, and private snapshots owned by other Amazon Web Services accounts for which you have explicit create volume permissions.</p> <p>The create volume permissions fall into the following categories:</p> <ul> <li> <p> <i>public</i>: The owner of the snapshot granted create volume permissions for the snapshot to the <code>all</code> group. All Amazon Web Services accounts have create volume permissions for these snapshots.</p> </li> <li> <p> <i>explicit</i>: The owner of the snapshot granted create volume permissions to a specific Amazon Web Services account.</p> </li> <li> <p> <i>implicit</i>: An Amazon Web Services account has implicit create volume permissions for all snapshots it owns.</p> </li> </ul> <p>The list of snapshots returned can be filtered by specifying snapshot IDs, snapshot owners, or Amazon Web Services accounts with create volume permissions. If no options are specified, Amazon EC2 returns all snapshots for which you have create volume permissions.</p> <p>If you specify one or more snapshot IDs, only snapshots that have the specified IDs are returned. If you specify an invalid snapshot ID, an error is returned. If you specify a snapshot ID for which you do not have access, it is not included in the returned results.</p> <p>If you specify one or more snapshot owners using the <code>OwnerIds</code> option, only snapshots from the specified owners and for which you have access are returned. The results can include the Amazon Web Services account IDs of the specified owners, <code>amazon</code> for snapshots owned by Amazon, or <code>self</code> for snapshots that you own.</p> <p>If you specify a list of restorable users, only snapshots with create snapshot permissions for those users are returned. You can specify Amazon Web Services account IDs (if you own the snapshots), <code>self</code> for snapshots for which you own or have explicit permissions, or <code>all</code> for public snapshots.</p> <p>If you are describing a long list of snapshots, we recommend that you paginate the output to make the list more manageable. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p> <p>For more information about EBS snapshots, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-snapshots.html">Amazon EBS snapshots</a> in the <i>Amazon EBS User Guide</i>.</p> <important> <p>We strongly recommend using only paginated requests. Unpaginated requests are susceptible to throttling and timeouts.</p> </important>
export def "aws ec2 describesnapshots" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describesnapshots | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the data feed for Spot Instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html">Spot Instance data feed</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 describespotdatafeedsubscription" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describespotdatafeedsubscription | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the running instances for the specified Spot Fleet.</p>
export def "aws ec2 describespotfleetinstances" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describespotfleetinstances | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the events for the specified Spot Fleet request during the specified time.</p> <p>Spot Fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query by the last evaluated time and not miss a recorded event. Spot Fleet events are available for 48 hours.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/fleet-monitor.html">Monitor fleet events using Amazon EventBridge</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 describespotfleetrequesthistory" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describespotfleetrequesthistory | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes your Spot Fleet requests.</p> <p>Spot Fleet requests are deleted 48 hours after they are canceled and their instances are terminated.</p>
export def "aws ec2 describespotfleetrequests" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describespotfleetrequests | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified Spot Instance requests.</p> <p>You can use <code>DescribeSpotInstanceRequests</code> to find a running Spot Instance by examining the response. If the status of the Spot Instance is <code>fulfilled</code>, the instance ID appears in the response and contains the identifier of the instance. Alternatively, you can use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances">DescribeInstances</a> with a filter to look for instances where the instance lifecycle is <code>spot</code>.</p> <p>We recommend that you set <code>MaxResults</code> to a value between 5 and 1000 to limit the number of items returned. This paginates the output, which makes the list more manageable and returns the items faster. If the list of items exceeds your <code>MaxResults</code> value, then that number of items is returned along with a <code>NextToken</code> value that can be passed to a subsequent <code>DescribeSpotInstanceRequests</code> request to retrieve the remaining items.</p> <p>Spot Instance requests are deleted four hours after they are canceled and their instances are terminated.</p>
export def "aws ec2 describespotinstancerequests" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describespotinstancerequests | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the Spot price history. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances-history.html">Spot Instance pricing history</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>When you specify a start and end time, the operation returns the prices of the instance types within that time range. It also returns the last price change before the start time, which is the effective price as of the start time.</p>
export def "aws ec2 describespotpricehistory" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describespotpricehistory | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the stale security group rules for security groups referenced across a VPC peering connection, transit gateway connection, or with a security group VPC association. Rules are stale when they reference a deleted security group. Rules can also be stale if they reference a security group in a peer VPC for which the VPC peering connection has been deleted, across a transit gateway where the transit gateway has been deleted (or <a href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-vpc-attachments.html#vpc-attachment-security">the transit gateway security group referencing feature</a> has been disabled), or if a security group VPC association has been disassociated.</p>
export def "aws ec2 describestalesecuritygroups" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describestalesecuritygroups | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the progress of the AMI store tasks. You can describe the store tasks for specified AMIs. If you don't specify the AMIs, you get a paginated list of store tasks from the last 31 days.</p> <p>For each AMI task, the response indicates if the task is <code>InProgress</code>, <code>Completed</code>, or <code>Failed</code>. For tasks <code>InProgress</code>, the response shows the estimated progress as a percentage.</p> <p>Tasks are listed in reverse chronological order. Currently, only tasks from the past 31 days can be viewed.</p> <p>To use this API, you must have the required permissions. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/work-with-ami-store-restore.html#ami-s3-permissions">Permissions for storing and restoring AMIs using S3</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-store-restore.html">Store and restore an AMI using S3</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 describestoreimagetasks" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describestoreimagetasks | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes your subnets. The default is to describe all your subnets. Alternatively, you can specify specific subnet IDs or filter the results to include only the subnets that match specific criteria.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/configure-subnets.html">Subnets</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 describesubnets" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describesubnets | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified tags for your EC2 resources.</p> <p>For more information about tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tag your Amazon EC2 resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <important> <p>We strongly recommend using only paginated requests. Unpaginated requests are susceptible to throttling and timeouts.</p> </important> <note> <p>The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.</p> </note>
export def "aws ec2 describetags" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describetags | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describe traffic mirror filters that determine the traffic that is mirrored.</p>
export def "aws ec2 describetrafficmirrorfilterrules" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describetrafficmirrorfilterrules | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more Traffic Mirror filters.</p>
export def "aws ec2 describetrafficmirrorfilters" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describetrafficmirrorfilters | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror sessions are described. Alternatively, you can filter the results.</p>
export def "aws ec2 describetrafficmirrorsessions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describetrafficmirrorsessions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Information about one or more Traffic Mirror targets.</p>
export def "aws ec2 describetrafficmirrortargets" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describetrafficmirrortargets | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more attachments between resources and transit gateways. By default, all attachments are described. Alternatively, you can filter the results by attachment ID, attachment state, resource ID, or resource owner.</p>
export def "aws ec2 describetransitgatewayattachments" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describetransitgatewayattachments | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more Connect peers.</p>
export def "aws ec2 describetransitgatewayconnectpeers" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describetransitgatewayconnectpeers | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more Connect attachments.</p>
export def "aws ec2 describetransitgatewayconnects" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describetransitgatewayconnects | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more transit gateway multicast domains.</p>
export def "aws ec2 describetransitgatewaymulticastdomains" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describetransitgatewaymulticastdomains | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes your transit gateway peering attachments.</p>
export def "aws ec2 describetransitgatewaypeeringattachments" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describetransitgatewaypeeringattachments | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more transit gateway route policy tables. </p>
export def "aws ec2 describetransitgatewaypolicytables" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describetransitgatewaypolicytables | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more transit gateway route table advertisements.</p>
export def "aws ec2 describetransitgatewayroutetableannouncements" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describetransitgatewayroutetableannouncements | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more transit gateway route tables. By default, all transit gateway route tables are described. Alternatively, you can filter the results.</p>
export def "aws ec2 describetransitgatewayroutetables" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describetransitgatewayroutetables | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more VPC attachments. By default, all VPC attachments are described. Alternatively, you can filter the results.</p>
export def "aws ec2 describetransitgatewayvpcattachments" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describetransitgatewayvpcattachments | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more transit gateways. By default, all transit gateways are described. Alternatively, you can filter the results.</p>
export def "aws ec2 describetransitgateways" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describetransitgateways | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more network interface trunk associations.</p>
export def "aws ec2 describetrunkinterfaceassociations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describetrunkinterfaceassociations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified Amazon Web Services Verified Access endpoints.</p>
export def "aws ec2 describeverifiedaccessendpoints" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeverifiedaccessendpoints | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified Verified Access groups.</p>
export def "aws ec2 describeverifiedaccessgroups" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeverifiedaccessgroups | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified Amazon Web Services Verified Access instances.</p>
export def "aws ec2 describeverifiedaccessinstanceloggingconfigurations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeverifiedaccessinstanceloggingconfigurations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified Amazon Web Services Verified Access instances.</p>
export def "aws ec2 describeverifiedaccessinstances" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeverifiedaccessinstances | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified Amazon Web Services Verified Access trust providers.</p>
export def "aws ec2 describeverifiedaccesstrustproviders" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describeverifiedaccesstrustproviders | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified attribute of the specified volume. You can specify only one attribute at a time.</p> <p>For more information about EBS volumes, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volumes.html">Amazon EBS volumes</a> in the <i>Amazon EBS User Guide</i>.</p>
export def "aws ec2 describevolumeattribute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describevolumeattribute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the status of the specified volumes. Volume status provides the result of the checks performed on your volumes to determine events that can impair the performance of your volumes. The performance of a volume can be affected if an issue occurs on the volume's underlying host. If the volume's underlying host experiences a power outage or system issue, after the system is restored, there could be data inconsistencies on the volume. Volume events notify you if this occurs. Volume actions notify you if any action needs to be taken in response to the event.</p> <p>The <code>DescribeVolumeStatus</code> operation provides the following information about the specified volumes:</p> <p> <i>Status</i>: Reflects the current status of the volume. The possible values are <code>ok</code>, <code>impaired</code> , <code>warning</code>, or <code>insufficient-data</code>. If all checks pass, the overall status of the volume is <code>ok</code>. If the check fails, the overall status is <code>impaired</code>. If the status is <code>insufficient-data</code>, then the checks might still be taking place on your volume at the time. We recommend that you retry the request. For more information about volume status, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/monitoring-volume-status.html">Monitor the status of your volumes</a> in the <i>Amazon EBS User Guide</i>.</p> <p> <i>Events</i>: Reflect the cause of a volume status and might require you to take action. For example, if your volume returns an <code>impaired</code> status, then the volume event might be <code>potential-data-inconsistency</code>. This means that your volume has been affected by an issue with the underlying host, has all I/O operations disabled, and might have inconsistent data.</p> <p> <i>Actions</i>: Reflect the actions you might have to take in response to an event. For example, if the status of the volume is <code>impaired</code> and the volume event shows <code>potential-data-inconsistency</code>, then the action shows <code>enable-volume-io</code>. This means that you may want to enable the I/O operations for the volume and then check the volume for data consistency. For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/work_volumes_impaired.html">Work with an impaired EBS volume</a>.</p> <p>Volume status is based on the volume status checks, and does not reflect the volume state. Therefore, volume status does not indicate volumes in the <code>error</code> state (for example, when a volume is incapable of accepting I/O.)</p> <note> <p>The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.</p> </note>
export def "aws ec2 describevolumestatus" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describevolumestatus | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified EBS volumes or all of your EBS volumes.</p> <p>If you are describing a long list of volumes, we recommend that you paginate the output to make the list more manageable. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination">Pagination</a>.</p> <p>For more information about EBS volumes, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volumes.html">Amazon EBS volumes</a> in the <i>Amazon EBS User Guide</i>.</p> <important> <p>We strongly recommend using only paginated requests. Unpaginated requests are susceptible to throttling and timeouts.</p> </important> <note> <p>The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.</p> </note>
export def "aws ec2 describevolumes" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describevolumes | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the most recent volume modification request for the specified EBS volumes.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/monitoring-volume-modifications.html"> Monitor the progress of volume modifications</a> in the <i>Amazon EBS User Guide</i>.</p>
export def "aws ec2 describevolumesmodifications" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describevolumesmodifications | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the specified attribute of the specified VPC. You can specify only one attribute at a time.</p>
export def "aws ec2 describevpcattribute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describevpcattribute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describe VPC Block Public Access (BPA) exclusions. A VPC BPA exclusion is a mode that can be applied to a single VPC or subnet that exempts it from the account’s BPA mode and will allow bidirectional or egress-only access. You can create BPA exclusions for VPCs and subnets even when BPA is not enabled on the account to ensure that there is no traffic disruption to the exclusions when VPC BPA is turned on. To learn more about VPC BPA, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/security-vpc-bpa.html">Block public access to VPCs and subnets</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 describevpcblockpublicaccessexclusions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describevpcblockpublicaccessexclusions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describe VPC Block Public Access (BPA) options. VPC Block Public Access (BPA) enables you to block resources in VPCs and subnets that you own in a Region from reaching or being reached from the internet through internet gateways and egress-only internet gateways. To learn more about VPC BPA, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/security-vpc-bpa.html">Block public access to VPCs and subnets</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 describevpcblockpublicaccessoptions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describevpcblockpublicaccessoptions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <note> <p>This action is deprecated.</p> </note> <p>Describes the ClassicLink status of the specified VPCs.</p>
export def "aws ec2 describevpcclassiclink" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describevpcclassiclink | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <note> <p>This action is deprecated.</p> </note> <p>Describes the ClassicLink DNS support status of one or more VPCs. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance.</p>
export def "aws ec2 describevpcclassiclinkdnssupport" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describevpcclassiclinkdnssupport | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the VPC resources, VPC endpoint services, Amazon Lattice services, or service networks associated with the VPC endpoint.</p>
export def "aws ec2 describevpcendpointassociations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describevpcendpointassociations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the connection notifications for VPC endpoints and VPC endpoint services.</p>
export def "aws ec2 describevpcendpointconnectionnotifications" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describevpcendpointconnectionnotifications | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the VPC endpoint connections to your VPC endpoint services, including any endpoints that are pending your acceptance.</p>
export def "aws ec2 describevpcendpointconnections" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describevpcendpointconnections | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the VPC endpoint service configurations in your account (your services).</p>
export def "aws ec2 describevpcendpointserviceconfigurations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describevpcendpointserviceconfigurations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the principals (service consumers) that are permitted to discover your VPC endpoint service. Principal ARNs with path components aren't supported.</p>
export def "aws ec2 describevpcendpointservicepermissions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describevpcendpointservicepermissions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes available services to which you can create a VPC endpoint.</p> <p>When the service provider and the consumer have different accounts in multiple Availability Zones, and the consumer views the VPC endpoint service information, the response only includes the common Availability Zones. For example, when the service provider account uses <code>us-east-1a</code> and <code>us-east-1c</code> and the consumer uses <code>us-east-1a</code> and <code>us-east-1b</code>, the response includes the VPC endpoint services in the common Availability Zone, <code>us-east-1a</code>.</p>
export def "aws ec2 describevpcendpointservices" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describevpcendpointservices | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes your VPC endpoints. The default is to describe all your VPC endpoints. Alternatively, you can specify specific VPC endpoint IDs or filter the results to include only the VPC endpoints that match specific criteria.</p>
export def "aws ec2 describevpcendpoints" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describevpcendpoints | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes your VPC peering connections. The default is to describe all your VPC peering connections. Alternatively, you can specify specific VPC peering connection IDs or filter the results to include only the VPC peering connections that match specific criteria.</p>
export def "aws ec2 describevpcpeeringconnections" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describevpcpeeringconnections | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes your VPCs. The default is to describe all your VPCs. Alternatively, you can specify specific VPC IDs or filter the results to include only the VPCs that match specific criteria.</p>
export def "aws ec2 describevpcs" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describevpcs | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more of your VPN connections.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services Site-to-Site VPN User Guide</i>.</p>
export def "aws ec2 describevpnconnections" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describevpnconnections | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes one or more of your virtual private gateways.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">Amazon Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services Site-to-Site VPN User Guide</i>.</p>
export def "aws ec2 describevpngateways" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 describevpngateways | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <note> <p>This action is deprecated.</p> </note> <p>Unlinks (detaches) a linked EC2-Classic instance from a VPC. After the instance has been unlinked, the VPC security groups are no longer associated with it. An instance is automatically unlinked from a VPC when it's stopped.</p>
export def "aws ec2 detachclassiclinkvpc" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 detachclassiclinkvpc | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Detaches an internet gateway from a VPC, disabling connectivity between the internet and the VPC. The VPC must not contain any running instances with Elastic IP addresses or public IPv4 addresses.</p>
export def "aws ec2 detachinternetgateway" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 detachinternetgateway | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Detaches a network interface from an instance.</p>
export def "aws ec2 detachnetworkinterface" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 detachnetworkinterface | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Detaches the specified Amazon Web Services Verified Access trust provider from the specified Amazon Web Services Verified Access instance.</p>
export def "aws ec2 detachverifiedaccesstrustprovider" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 detachverifiedaccesstrustprovider | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Detaches an EBS volume from an instance. Make sure to unmount any file systems on the device within your operating system before detaching the volume. Failure to do so can result in the volume becoming stuck in the <code>busy</code> state while detaching. If this happens, detachment can be delayed indefinitely until you unmount the volume, force detachment, reboot the instance, or all three. If an EBS volume is the root device of an instance, it can't be detached while the instance is running. To detach the root volume, stop the instance first.</p> <p>When a volume with an Amazon Web Services Marketplace product code is detached from an instance, the product code is no longer associated with the instance.</p> <p>You can't detach or force detach volumes that are attached to Amazon Web Services-managed resources. Attempting to do this results in the <code>UnsupportedOperationException</code> exception.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-detaching-volume.html">Detach an Amazon EBS volume</a> in the <i>Amazon EBS User Guide</i>.</p>
export def "aws ec2 detachvolume" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 detachvolume | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Detaches a virtual private gateway from a VPC. You do this if you're planning to turn off the VPC and not use it anymore. You can confirm a virtual private gateway has been completely detached from a VPC by describing the virtual private gateway (any attachments to the virtual private gateway are also described).</p> <p>You must wait for the attachment's state to switch to <code>detached</code> before you can delete the VPC or attach a different VPC to the virtual private gateway.</p>
export def "aws ec2 detachvpngateway" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 detachvpngateway | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disables Elastic IP address transfer. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#transfer-EIPs-intro">Transfer Elastic IP addresses</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 disableaddresstransfer" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disableaddresstransfer | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disables Allowed AMIs for your account in the specified Amazon Web Services Region. When set to <code>disabled</code>, the image criteria in your Allowed AMIs settings do not apply, and no restrictions are placed on AMI discoverability or usage. Users in your account can launch instances using any public AMI or AMI shared with your account.</p> <note> <p>The Allowed AMIs feature does not restrict the AMIs owned by your account. Regardless of the criteria you set, the AMIs created by your account will always be discoverable and usable by users in your account.</p> </note> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-allowed-amis.html">Control the discovery and use of AMIs in Amazon EC2 with Allowed AMIs</a> in <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 disableallowedimagessettings" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disableallowedimagessettings | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disables Infrastructure Performance metric subscriptions.</p>
export def "aws ec2 disableawsnetworkperformancemetricsubscription" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disableawsnetworkperformancemetricsubscription | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disables EBS encryption by default for your account in the current Region.</p> <p>After you disable encryption by default, you can still create encrypted volumes by enabling encryption when you create each volume.</p> <p>Disabling encryption by default does not change the encryption status of your existing volumes.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html">Amazon EBS encryption</a> in the <i>Amazon EBS User Guide</i>.</p>
export def "aws ec2 disableebsencryptionbydefault" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disableebsencryptionbydefault | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Discontinue Windows fast launch for a Windows AMI, and clean up existing pre-provisioned snapshots. After you disable Windows fast launch, the AMI uses the standard launch process for each new instance. Amazon EC2 must remove all pre-provisioned snapshots before you can enable Windows fast launch again.</p> <note> <p>You can only change these settings for Windows AMIs that you own or that have been shared with you.</p> </note>
export def "aws ec2 disablefastlaunch" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disablefastlaunch | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disables fast snapshot restores for the specified snapshots in the specified Availability Zones.</p>
export def "aws ec2 disablefastsnapshotrestores" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disablefastsnapshotrestores | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Sets the AMI state to <code>disabled</code> and removes all launch permissions from the AMI. A disabled AMI can't be used for instance launches.</p> <p>A disabled AMI can't be shared. If an AMI was public or previously shared, it is made private. If an AMI was shared with an Amazon Web Services account, organization, or Organizational Unit, they lose access to the disabled AMI. </p> <p>A disabled AMI does not appear in <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeImages.html">DescribeImages</a> API calls by default.</p> <p>Only the AMI owner can disable an AMI.</p> <p>You can re-enable a disabled AMI using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_EnableImage.html">EnableImage</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/disable-an-ami.html">Disable an AMI</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 disableimage" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disableimage | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disables <i>block public access for AMIs</i> at the account level in the specified Amazon Web Services Region. This removes the <i>block public access</i> restriction from your account. With the restriction removed, you can publicly share your AMIs in the specified Amazon Web Services Region.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-public-access-to-amis.html">Block public access to your AMIs</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 disableimageblockpublicaccess" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disableimageblockpublicaccess | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Cancels the deprecation of the specified AMI.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-deprecate.html">Deprecate an Amazon EC2 AMI</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 disableimagedeprecation" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disableimagedeprecation | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disables deregistration protection for an AMI. When deregistration protection is disabled, the AMI can be deregistered.</p> <p>If you chose to include a 24-hour cooldown period when you enabled deregistration protection for the AMI, then, when you disable deregistration protection, you won’t immediately be able to deregister the AMI.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-deregistration-protection.html">Protect an Amazon EC2 AMI from deregistration</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 disableimagederegistrationprotection" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disableimagederegistrationprotection | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disable the IPAM account. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/enable-integ-ipam.html">Enable integration with Organizations</a> in the <i>Amazon VPC IPAM User Guide</i>. </p>
export def "aws ec2 disableipamorganizationadminaccount" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disableipamorganizationadminaccount | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disables route propagation from a route server to a specified route table.</p> <p>When enabled, route server propagation installs the routes in the FIB on the route table you've specified. Route server supports IPv4 and IPv6 route propagation.</p> <p>Amazon VPC Route Server simplifies routing for traffic between workloads that are deployed within a VPC and its internet gateways. With this feature, VPC Route Server dynamically updates VPC and internet gateway route tables with your preferred IPv4 or IPv6 routes to achieve routing fault tolerance for those workloads. This enables you to automatically reroute traffic within a VPC, which increases the manageability of VPC routing and interoperability with third-party workloads.</p> <p>Route server supports the follow route table types:</p> <ul> <li> <p>VPC route tables not associated with subnets</p> </li> <li> <p>Subnet route tables</p> </li> <li> <p>Internet gateway route tables</p> </li> </ul> <p>Route server does not support route tables associated with virtual private gateways. To propagate routes into a transit gateway route table, use <a href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-connect.html">Transit Gateway Connect</a>.</p> <p>For more information see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/dynamic-routing-route-server.html">Dynamic routing in your VPC with VPC Route Server</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 disablerouteserverpropagation" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disablerouteserverpropagation | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disables access to the EC2 serial console of all instances for your account. By default, access to the EC2 serial console is disabled for your account. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configure-access-to-serial-console.html#serial-console-account-access">Manage account access to the EC2 serial console</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 disableserialconsoleaccess" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disableserialconsoleaccess | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disables the <i>block public access for snapshots</i> setting at the account level for the specified Amazon Web Services Region. After you disable block public access for snapshots in a Region, users can publicly share snapshots in that Region.</p> <important> <p>Enabling block public access for snapshots in <i>block-all-sharing</i> mode does not change the permissions for snapshots that are already publicly shared. Instead, it prevents these snapshots from be publicly visible and publicly accessible. Therefore, the attributes for these snapshots still indicate that they are publicly shared, even though they are not publicly available.</p> <p>If you disable block public access , these snapshots will become publicly available again.</p> </important> <p>For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/block-public-access-snapshots.html"> Block public access for snapshots</a> in the <i>Amazon EBS User Guide</i> .</p> <p/>
export def "aws ec2 disablesnapshotblockpublicaccess" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disablesnapshotblockpublicaccess | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disables the specified resource attachment from propagating routes to the specified propagation route table.</p>
export def "aws ec2 disabletransitgatewayroutetablepropagation" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disabletransitgatewayroutetablepropagation | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disables a virtual private gateway (VGW) from propagating routes to a specified route table of a VPC.</p>
export def "aws ec2 disablevgwroutepropagation" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disablevgwroutepropagation | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <note> <p>This action is deprecated.</p> </note> <p>Disables ClassicLink for a VPC. You cannot disable ClassicLink for a VPC that has EC2-Classic instances linked to it.</p>
export def "aws ec2 disablevpcclassiclink" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disablevpcclassiclink | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <note> <p>This action is deprecated.</p> </note> <p>Disables ClassicLink DNS support for a VPC. If disabled, DNS hostnames resolve to public IP addresses when addressed between a linked EC2-Classic instance and instances in the VPC to which it's linked.</p> <p>You must specify a VPC ID in the request.</p>
export def "aws ec2 disablevpcclassiclinkdnssupport" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disablevpcclassiclinkdnssupport | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disassociates an Elastic IP address from the instance or network interface it's associated with.</p> <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error.</p> <p>An address cannot be disassociated if the all of the following conditions are met:</p> <ul> <li> <p>Network interface has a <code>publicDualStackDnsName</code> publicDnsName</p> </li> <li> <p>Public IPv4 address is the primary public IPv4 address</p> </li> <li> <p>Network interface only has one remaining public IPv4 address</p> </li> </ul>
export def "aws ec2 disassociateaddress" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disassociateaddress | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Cancels a pending request to assign billing of the unused capacity of a Capacity Reservation to a consumer account, or revokes a request that has already been accepted. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/assign-billing.html">Billing assignment for shared Amazon EC2 Capacity Reservations</a>.</p>
export def "aws ec2 disassociatecapacityreservationbillingowner" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disassociatecapacityreservationbillingowner | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disassociates a target network from the specified Client VPN endpoint. When you disassociate the last target network from a Client VPN, the following happens:</p> <ul> <li> <p>The route that was automatically added for the VPC is deleted</p> </li> <li> <p>All active client connections are terminated</p> </li> <li> <p>New client connections are disallowed</p> </li> <li> <p>The Client VPN endpoint's status changes to <code>pending-associate</code> </p> </li> </ul>
export def "aws ec2 disassociateclientvpntargetnetwork" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disassociateclientvpntargetnetwork | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disassociates an IAM role from an Certificate Manager (ACM) certificate. Disassociating an IAM role from an ACM certificate removes the Amazon S3 object that contains the certificate, certificate chain, and encrypted private key from the Amazon S3 bucket. It also revokes the IAM role's permission to use the KMS key used to encrypt the private key. This effectively revokes the role's permission to use the certificate.</p>
export def "aws ec2 disassociateenclavecertificateiamrole" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disassociateenclavecertificateiamrole | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disassociates an IAM instance profile from a running or stopped instance.</p> <p>Use <a>DescribeIamInstanceProfileAssociations</a> to get the association ID.</p>
export def "aws ec2 disassociateiaminstanceprofile" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disassociateiaminstanceprofile | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disassociates one or more targets from an event window.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled events</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 disassociateinstanceeventwindow" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disassociateinstanceeventwindow | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Remove the association between your Autonomous System Number (ASN) and your BYOIP CIDR. You may want to use this action to disassociate an ASN from a CIDR or if you want to swap ASNs. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoasn.html">Tutorial: Bring your ASN to IPAM</a> in the <i>Amazon VPC IPAM guide</i>.</p>
export def "aws ec2 disassociateipambyoasn" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disassociateipambyoasn | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disassociates a resource discovery from an Amazon VPC IPAM. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.</p>
export def "aws ec2 disassociateipamresourcediscovery" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disassociateipamresourcediscovery | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disassociates secondary Elastic IP addresses (EIPs) from a public NAT gateway. You cannot disassociate your primary EIP. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/nat-gateway-working-with.html#nat-gateway-edit-secondary">Edit secondary IP address associations</a> in the <i>Amazon VPC User Guide</i>.</p> <p>While disassociating is in progress, you cannot associate/disassociate additional EIPs while the connections are being drained. You are, however, allowed to delete the NAT gateway.</p> <p>An EIP is released only at the end of MaxDrainDurationSeconds. It stays associated and supports the existing connections but does not support any new connections (new connections are distributed across the remaining associated EIPs). As the existing connections drain out, the EIPs (and the corresponding private IP addresses mapped to them) are released.</p>
export def "aws ec2 disassociatenatgatewayaddress" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disassociatenatgatewayaddress | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disassociates a route server from a VPC.</p> <p>A route server association is the connection established between a route server and a VPC.</p> <p>For more information see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/dynamic-routing-route-server.html">Dynamic routing in your VPC with VPC Route Server</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 disassociaterouteserver" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disassociaterouteserver | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disassociates a subnet or gateway from a route table.</p> <p>After you perform this action, the subnet no longer uses the routes in the route table. Instead, it uses the routes in the VPC's main route table. For more information about route tables, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route tables</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 disassociateroutetable" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disassociateroutetable | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disassociates a security group from a VPC. You cannot disassociate the security group if any Elastic network interfaces in the associated VPC are still associated with the security group. Note that the disassociation is asynchronous and you can check the status of the request with <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSecurityGroupVpcAssociations.html">DescribeSecurityGroupVpcAssociations</a>.</p>
export def "aws ec2 disassociatesecuritygroupvpc" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disassociatesecuritygroupvpc | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disassociates a CIDR block from a subnet. Currently, you can disassociate an IPv6 CIDR block only. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it. </p>
export def "aws ec2 disassociatesubnetcidrblock" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disassociatesubnetcidrblock | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disassociates the specified subnets from the transit gateway multicast domain. </p>
export def "aws ec2 disassociatetransitgatewaymulticastdomain" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disassociatetransitgatewaymulticastdomain | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Removes the association between an an attachment and a policy table.</p>
export def "aws ec2 disassociatetransitgatewaypolicytable" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disassociatetransitgatewaypolicytable | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disassociates a resource attachment from a transit gateway route table.</p>
export def "aws ec2 disassociatetransitgatewayroutetable" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disassociatetransitgatewayroutetable | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Removes an association between a branch network interface with a trunk network interface.</p>
export def "aws ec2 disassociatetrunkinterface" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disassociatetrunkinterface | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disassociates a CIDR block from a VPC. To disassociate the CIDR block, you must specify its association ID. You can get the association ID by using <a>DescribeVpcs</a>. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it. </p> <p>You cannot disassociate the CIDR block with which you originally created the VPC (the primary CIDR block).</p>
export def "aws ec2 disassociatevpccidrblock" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 disassociatevpccidrblock | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Enables Elastic IP address transfer. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#transfer-EIPs-intro">Transfer Elastic IP addresses</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 enableaddresstransfer" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 enableaddresstransfer | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Enables Allowed AMIs for your account in the specified Amazon Web Services Region. Two values are accepted:</p> <ul> <li> <p> <code>enabled</code>: The image criteria in your Allowed AMIs settings are applied. As a result, only AMIs matching these criteria are discoverable and can be used by your account to launch instances.</p> </li> <li> <p> <code>audit-mode</code>: The image criteria in your Allowed AMIs settings are not applied. No restrictions are placed on AMI discoverability or usage. Users in your account can launch instances using any public AMI or AMI shared with your account.</p> <p>The purpose of <code>audit-mode</code> is to indicate which AMIs will be affected when Allowed AMIs is <code>enabled</code>. In <code>audit-mode</code>, each AMI displays either <code>"ImageAllowed": true</code> or <code>"ImageAllowed": false</code> to indicate whether the AMI will be discoverable and available to users in the account when Allowed AMIs is enabled.</p> </li> </ul> <note> <p>The Allowed AMIs feature does not restrict the AMIs owned by your account. Regardless of the criteria you set, the AMIs created by your account will always be discoverable and usable by users in your account.</p> </note> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-allowed-amis.html">Control the discovery and use of AMIs in Amazon EC2 with Allowed AMIs</a> in <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 enableallowedimagessettings" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 enableallowedimagessettings | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Enables Infrastructure Performance subscriptions.</p>
export def "aws ec2 enableawsnetworkperformancemetricsubscription" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 enableawsnetworkperformancemetricsubscription | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Enables EBS encryption by default for your account in the current Region.</p> <p>After you enable encryption by default, the EBS volumes that you create are always encrypted, either using the default KMS key or the KMS key that you specified when you created each volume. For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html">Amazon EBS encryption</a> in the <i>Amazon EBS User Guide</i>.</p> <p>Enabling encryption by default has no effect on the encryption status of your existing volumes.</p> <p>After you enable encryption by default, you can no longer launch instances using instance types that do not support encryption. For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption-requirements.html#ebs-encryption_supported_instances">Supported instance types</a>.</p>
export def "aws ec2 enableebsencryptionbydefault" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 enableebsencryptionbydefault | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>When you enable Windows fast launch for a Windows AMI, images are pre-provisioned, using snapshots to launch instances up to 65% faster. To create the optimized Windows image, Amazon EC2 launches an instance and runs through Sysprep steps, rebooting as required. Then it creates a set of reserved snapshots that are used for subsequent launches. The reserved snapshots are automatically replenished as they are used, depending on your settings for launch frequency.</p> <note> <p>You can only change these settings for Windows AMIs that you own or that have been shared with you.</p> </note>
export def "aws ec2 enablefastlaunch" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 enablefastlaunch | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Enables fast snapshot restores for the specified snapshots in the specified Availability Zones.</p> <p>You get the full benefit of fast snapshot restores after they enter the <code>enabled</code> state.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-fast-snapshot-restore.html">Amazon EBS fast snapshot restore</a> in the <i>Amazon EBS User Guide</i>.</p>
export def "aws ec2 enablefastsnapshotrestores" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 enablefastsnapshotrestores | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Re-enables a disabled AMI. The re-enabled AMI is marked as <code>available</code> and can be used for instance launches, appears in describe operations, and can be shared. Amazon Web Services accounts, organizations, and Organizational Units that lost access to the AMI when it was disabled do not regain access automatically. Once the AMI is available, it can be shared with them again.</p> <p>Only the AMI owner can re-enable a disabled AMI.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/disable-an-ami.html">Disable an Amazon EC2 AMI</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 enableimage" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 enableimage | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Enables <i>block public access for AMIs</i> at the account level in the specified Amazon Web Services Region. This prevents the public sharing of your AMIs. However, if you already have public AMIs, they will remain publicly available.</p> <p>The API can take up to 10 minutes to configure this setting. During this time, if you run <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetImageBlockPublicAccessState.html">GetImageBlockPublicAccessState</a>, the response will be <code>unblocked</code>. When the API has completed the configuration, the response will be <code>block-new-sharing</code>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-public-access-to-amis.html">Block public access to your AMIs</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 enableimageblockpublicaccess" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 enableimageblockpublicaccess | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Enables deprecation of the specified AMI at the specified date and time.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-deprecate.html">Deprecate an AMI</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 enableimagedeprecation" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 enableimagedeprecation | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Enables deregistration protection for an AMI. When deregistration protection is enabled, the AMI can't be deregistered.</p> <p>To allow the AMI to be deregistered, you must first disable deregistration protection.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-deregistration-protection.html">Protect an Amazon EC2 AMI from deregistration</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 enableimagederegistrationprotection" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 enableimagederegistrationprotection | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Enable an Organizations member account as the IPAM admin account. You cannot select the Organizations management account as the IPAM admin account. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/enable-integ-ipam.html">Enable integration with Organizations</a> in the <i>Amazon VPC IPAM User Guide</i>. </p>
export def "aws ec2 enableipamorganizationadminaccount" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 enableipamorganizationadminaccount | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Establishes a trust relationship between Reachability Analyzer and Organizations. This operation must be performed by the management account for the organization.</p> <p>After you establish a trust relationship, a user in the management account or a delegated administrator account can run a cross-account analysis using resources from the member accounts.</p>
export def "aws ec2 enablereachabilityanalyzerorganizationsharing" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 enablereachabilityanalyzerorganizationsharing | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Defines which route tables the route server can update with routes.</p> <p>When enabled, route server propagation installs the routes in the FIB on the route table you've specified. Route server supports IPv4 and IPv6 route propagation.</p> <p>For more information see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/dynamic-routing-route-server.html">Dynamic routing in your VPC with VPC Route Server</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 enablerouteserverpropagation" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 enablerouteserverpropagation | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Enables access to the EC2 serial console of all instances for your account. By default, access to the EC2 serial console is disabled for your account. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configure-access-to-serial-console.html#serial-console-account-access">Manage account access to the EC2 serial console</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 enableserialconsoleaccess" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 enableserialconsoleaccess | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Enables or modifies the <i>block public access for snapshots</i> setting at the account level for the specified Amazon Web Services Region. After you enable block public access for snapshots in a Region, users can no longer request public sharing for snapshots in that Region. Snapshots that are already publicly shared are either treated as private or they remain publicly shared, depending on the <b>State</b> that you specify.</p> <important> <p>Enabling block public access for snapshots in <i>block all sharing</i> mode does not change the permissions for snapshots that are already publicly shared. Instead, it prevents these snapshots from be publicly visible and publicly accessible. Therefore, the attributes for these snapshots still indicate that they are publicly shared, even though they are not publicly available.</p> <p>If you later disable block public access or change the mode to <i>block new sharing</i>, these snapshots will become publicly available again.</p> </important> <p>For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/block-public-access-snapshots.html"> Block public access for snapshots</a> in the <i>Amazon EBS User Guide</i>.</p>
export def "aws ec2 enablesnapshotblockpublicaccess" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 enablesnapshotblockpublicaccess | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Enables the specified attachment to propagate routes to the specified propagation route table.</p>
export def "aws ec2 enabletransitgatewayroutetablepropagation" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 enabletransitgatewayroutetablepropagation | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Enables a virtual private gateway (VGW) to propagate routes to the specified route table of a VPC.</p>
export def "aws ec2 enablevgwroutepropagation" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 enablevgwroutepropagation | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Enables I/O operations for a volume that had I/O operations disabled because the data on the volume was potentially inconsistent.</p>
export def "aws ec2 enablevolumeio" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 enablevolumeio | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <note> <p>This action is deprecated.</p> </note> <p>Enables a VPC for ClassicLink. You can then link EC2-Classic instances to your ClassicLink-enabled VPC to allow communication over private IP addresses. You cannot enable your VPC for ClassicLink if any of your VPC route tables have existing routes for address ranges within the <code>10.0.0.0/8</code> IP address range, excluding local routes for VPCs in the <code>10.0.0.0/16</code> and <code>10.1.0.0/16</code> IP address ranges.</p>
export def "aws ec2 enablevpcclassiclink" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 enablevpcclassiclink | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <note> <p>This action is deprecated.</p> </note> <p>Enables a VPC to support DNS hostname resolution for ClassicLink. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance.</p> <p>You must specify a VPC ID in the request.</p>
export def "aws ec2 enablevpcclassiclinkdnssupport" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 enablevpcclassiclinkdnssupport | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Downloads the client certificate revocation list for the specified Client VPN endpoint.</p>
export def "aws ec2 exportclientvpnclientcertificaterevocationlist" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 exportclientvpnclientcertificaterevocationlist | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Downloads the contents of the Client VPN endpoint configuration file for the specified Client VPN endpoint. The Client VPN endpoint configuration file includes the Client VPN endpoint and certificate information clients need to establish a connection with the Client VPN endpoint.</p>
export def "aws ec2 exportclientvpnclientconfiguration" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 exportclientvpnclientconfiguration | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Exports an Amazon Machine Image (AMI) to a VM file. For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport_image.html">Exporting a VM directly from an Amazon Machine Image (AMI)</a> in the <i>VM Import/Export User Guide</i>.</p>
export def "aws ec2 exportimage" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 exportimage | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Exports routes from the specified transit gateway route table to the specified S3 bucket. By default, all routes are exported. Alternatively, you can filter by CIDR range.</p> <p>The routes are saved to the specified bucket in a JSON file. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-route-tables.html#tgw-export-route-tables">Export route tables to Amazon S3</a> in the <i>Amazon Web Services Transit Gateways Guide</i>.</p>
export def "aws ec2 exporttransitgatewayroutes" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 exporttransitgatewayroutes | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Exports the client configuration for a Verified Access instance.</p>
export def "aws ec2 exportverifiedaccessinstanceclientconfiguration" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 exportverifiedaccessinstanceclientconfiguration | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Returns the currently negotiated security parameters for an active VPN tunnel, including IKE version, DH groups, encryption algorithms, and integrity algorithms.</p>
export def "aws ec2 getactivevpntunnelstatus" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getactivevpntunnelstatus | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets the current state of the Allowed AMIs setting and the list of Allowed AMIs criteria at the account level in the specified Region.</p> <note> <p>The Allowed AMIs feature does not restrict the AMIs owned by your account. Regardless of the criteria you set, the AMIs created by your account will always be discoverable and usable by users in your account.</p> </note> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-allowed-amis.html">Control the discovery and use of AMIs in Amazon EC2 with Allowed AMIs</a> in <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 getallowedimagessettings" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getallowedimagessettings | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Returns the IAM roles that are associated with the specified ACM (ACM) certificate. It also returns the name of the Amazon S3 bucket and the Amazon S3 object key where the certificate, certificate chain, and encrypted private key bundle are stored, and the ARN of the KMS key that's used to encrypt the private key.</p>
export def "aws ec2 getassociatedenclavecertificateiamroles" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getassociatedenclavecertificateiamroles | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets information about the IPv6 CIDR block associations for a specified IPv6 address pool.</p>
export def "aws ec2 getassociatedipv6poolcidrs" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getassociatedipv6poolcidrs | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets network performance data.</p>
export def "aws ec2 getawsnetworkperformancedata" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getawsnetworkperformancedata | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets usage information about a Capacity Reservation. If the Capacity Reservation is shared, it shows usage information for the Capacity Reservation owner and each Amazon Web Services account that is currently using the shared capacity. If the Capacity Reservation is not shared, it shows only the Capacity Reservation owner's usage.</p>
export def "aws ec2 getcapacityreservationusage" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getcapacityreservationusage | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the allocations from the specified customer-owned address pool.</p>
export def "aws ec2 getcoippoolusage" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getcoippoolusage | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets the console output for the specified instance. For Linux instances, the instance console output displays the exact console output that would normally be displayed on a physical monitor attached to a computer. For Windows instances, the instance console output includes the last three system event log errors.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html#instance-console-console-output">Instance console output</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 getconsoleoutput" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getconsoleoutput | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Retrieve a JPG-format screenshot of a running instance to help with troubleshooting.</p> <p>The returned content is Base64-encoded.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/troubleshoot-unreachable-instance.html#instance-console-console-output">Instance console output</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 getconsolescreenshot" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getconsolescreenshot | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Retrieves a summary of the account status report.</p> <p>To view the full report, download it from the Amazon S3 bucket where it was saved. Reports are accessible only when they have the <code>complete</code> status. Reports with other statuses (<code>running</code>, <code>cancelled</code>, or <code>error</code>) are not available in the S3 bucket. For more information about downloading objects from an S3 bucket, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/download-objects.html">Downloading objects</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_declarative_status-report.html">Generating the account status report for declarative policies</a> in the <i>Amazon Web Services Organizations User Guide</i>.</p>
export def "aws ec2 getdeclarativepoliciesreportsummary" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getdeclarativepoliciesreportsummary | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the default credit option for CPU usage of a burstable performance instance family.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 getdefaultcreditspecification" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getdefaultcreditspecification | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes the default KMS key for EBS encryption by default for your account in this Region.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html">Amazon EBS encryption</a> in the <i>Amazon EBS User Guide</i>.</p>
export def "aws ec2 getebsdefaultkmskeyid" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getebsdefaultkmskeyid | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Describes whether EBS encryption by default is enabled for your account in the current Region.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html">Amazon EBS encryption</a> in the <i>Amazon EBS User Guide</i>.</p>
export def "aws ec2 getebsencryptionbydefault" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getebsencryptionbydefault | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Generates a CloudFormation template that streamlines and automates the integration of VPC flow logs with Amazon Athena. This make it easier for you to query and gain insights from VPC flow logs data. Based on the information that you provide, we configure resources in the template to do the following:</p> <ul> <li> <p>Create a table in Athena that maps fields to a custom log format</p> </li> <li> <p>Create a Lambda function that updates the table with new partitions on a daily, weekly, or monthly basis</p> </li> <li> <p>Create a table partitioned between two timestamps in the past</p> </li> <li> <p>Create a set of named queries in Athena that you can use to get started quickly</p> </li> </ul> <note> <p> <code>GetFlowLogsIntegrationTemplate</code> does not support integration between Amazon Web Services Transit Gateway Flow Logs and Amazon Athena.</p> </note>
export def "aws ec2 getflowlogsintegrationtemplate" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getflowlogsintegrationtemplate | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Lists the resource groups to which a Capacity Reservation has been added.</p>
export def "aws ec2 getgroupsforcapacityreservation" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getgroupsforcapacityreservation | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Preview a reservation purchase with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation.</p> <p>This is a preview of the <a>PurchaseHostReservation</a> action and does not result in the offering being purchased.</p>
export def "aws ec2 gethostreservationpurchasepreview" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 gethostreservationpurchasepreview | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets the current state of <i>block public access for AMIs</i> at the account level in the specified Amazon Web Services Region.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-public-access-to-amis.html">Block public access to your AMIs</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 getimageblockpublicaccessstate" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getimageblockpublicaccessstate | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets the default instance metadata service (IMDS) settings that are set at the account level in the specified Amazon Web Services&#x2028; Region.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html#instance-metadata-options-order-of-precedence">Order of precedence for instance metadata options</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 getinstancemetadatadefaults" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getinstancemetadatadefaults | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets the public endorsement key associated with the Nitro Trusted Platform Module (NitroTPM) for the specified instance.</p>
export def "aws ec2 getinstancetpmekpub" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getinstancetpmekpub | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Returns a list of instance types with the specified instance attributes. You can use the response to preview the instance types without launching instances. Note that the response does not consider capacity.</p> <p>When you specify multiple parameters, you get instance types that satisfy all of the specified parameters. If you specify multiple values for a parameter, you get instance types that satisfy any of the specified values.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html#ec2fleet-get-instance-types-from-instance-requirements">Preview instance types with specified attributes</a>, <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html">Specify attributes for instance type selection for EC2 Fleet or Spot Fleet</a>, and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-placement-score.html">Spot placement score</a> in the <i>Amazon EC2 User Guide</i>, and <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html">Creating mixed instance groups using attribute-based instance type selection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
export def "aws ec2 getinstancetypesfrominstancerequirements" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getinstancetypesfrominstancerequirements | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>A binary representation of the UEFI variable store. Only non-volatile variables are stored. This is a base64 encoded and zlib compressed binary value that must be properly encoded.</p> <p>When you use <a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/register-image.html">register-image</a> to create an AMI, you can create an exact copy of your variable store by passing the UEFI data in the <code>UefiData</code> parameter. You can modify the UEFI data by using the <a href="https://github.com/awslabs/python-uefivars">python-uefivars tool</a> on GitHub. You can use the tool to convert the UEFI data into a human-readable format (JSON), which you can inspect and modify, and then convert back into the binary format to use with register-image.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/uefi-secure-boot.html">UEFI Secure Boot</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 getinstanceuefidata" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getinstanceuefidata | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Retrieve historical information about a CIDR within an IPAM scope. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/view-history-cidr-ipam.html">View the history of IP addresses</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
export def "aws ec2 getipamaddresshistory" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getipamaddresshistory | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets IPAM discovered accounts. A discovered account is an Amazon Web Services account that is monitored under a resource discovery. If you have integrated IPAM with Amazon Web Services Organizations, all accounts in the organization are discovered accounts. Only the IPAM account can get all discovered accounts in the organization.</p>
export def "aws ec2 getipamdiscoveredaccounts" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getipamdiscoveredaccounts | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets the public IP addresses that have been discovered by IPAM.</p>
export def "aws ec2 getipamdiscoveredpublicaddresses" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getipamdiscoveredpublicaddresses | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Returns the resource CIDRs that are monitored as part of a resource discovery. A discovered resource is a resource CIDR monitored under a resource discovery. The following resources can be discovered: VPCs, Public IPv4 pools, VPC subnets, and Elastic IP addresses. </p>
export def "aws ec2 getipamdiscoveredresourcecidrs" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getipamdiscoveredresourcecidrs | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Get a list of all the CIDR allocations in an IPAM pool. The Region you use should be the IPAM pool locale. The locale is the Amazon Web Services Region where this IPAM pool is available for allocations.</p> <note> <p>If you use this action after <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AllocateIpamPoolCidr.html">AllocateIpamPoolCidr</a> or <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ReleaseIpamPoolAllocation.html">ReleaseIpamPoolAllocation</a>, note that all EC2 API actions follow an <a href="https://docs.aws.amazon.com/ec2/latest/devguide/eventual-consistency.html">eventual consistency</a> model.</p> </note>
export def "aws ec2 getipampoolallocations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getipampoolallocations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Get the CIDRs provisioned to an IPAM pool.</p>
export def "aws ec2 getipampoolcidrs" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getipampoolcidrs | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Returns resource CIDRs managed by IPAM in a given scope. If an IPAM is associated with more than one resource discovery, the resource CIDRs across all of the resource discoveries is returned. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.</p>
export def "aws ec2 getipamresourcecidrs" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getipamresourcecidrs | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Retrieves the configuration data of the specified instance. You can use this data to create a launch template. </p> <p>This action calls on other describe actions to get instance information. Depending on your instance configuration, you may need to allow the following actions in your IAM policy: <code>DescribeSpotInstanceRequests</code>, <code>DescribeInstanceCreditSpecifications</code>, <code>DescribeVolumes</code>, and <code>DescribeInstanceAttribute</code>. Or, you can allow <code>describe*</code> depending on your instance requirements.</p>
export def "aws ec2 getlaunchtemplatedata" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getlaunchtemplatedata | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets information about the resources that are associated with the specified managed prefix list.</p>
export def "aws ec2 getmanagedprefixlistassociations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getmanagedprefixlistassociations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets information about the entries for a specified managed prefix list.</p>
export def "aws ec2 getmanagedprefixlistentries" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getmanagedprefixlistentries | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets the findings for the specified Network Access Scope analysis.</p>
export def "aws ec2 getnetworkinsightsaccessscopeanalysisfindings" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getnetworkinsightsaccessscopeanalysisfindings | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets the content for the specified Network Access Scope.</p>
export def "aws ec2 getnetworkinsightsaccessscopecontent" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getnetworkinsightsaccessscopecontent | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Retrieves the encrypted administrator password for a running Windows instance.</p> <p>The Windows password is generated at boot by the <code>EC2Config</code> service or <code>EC2Launch</code> scripts (Windows Server 2016 and later). This usually only happens the first time an instance is launched. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UsingConfig_WinAMI.html">EC2Config</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2launch.html">EC2Launch</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>For the <code>EC2Config</code> service, the password is not generated for rebundled AMIs unless <code>Ec2SetPassword</code> is enabled before bundling.</p> <p>The password is encrypted using the key pair that you specified when you launched the instance. You must provide the corresponding key pair file.</p> <p>When you launch an instance, password generation and encryption may take a few minutes. If you try to retrieve the password before it's available, the output returns an empty string. We recommend that you wait up to 15 minutes after launching an instance before trying to retrieve the generated password.</p>
export def "aws ec2 getpassworddata" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getpassworddata | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Returns a quote and exchange information for exchanging one or more specified Convertible Reserved Instances for a new Convertible Reserved Instance. If the exchange cannot be performed, the reason is returned in the response. Use <a>AcceptReservedInstancesExchangeQuote</a> to perform the exchange.</p>
export def "aws ec2 getreservedinstancesexchangequote" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getreservedinstancesexchangequote | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets information about the associations for the specified route server.</p> <p>A route server association is the connection established between a route server and a VPC.</p> <p>For more information see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/dynamic-routing-route-server.html">Dynamic routing in your VPC with VPC Route Server</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 getrouteserverassociations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getrouteserverassociations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets information about the route propagations for the specified route server.</p> <p>When enabled, route server propagation installs the routes in the FIB on the route table you've specified. Route server supports IPv4 and IPv6 route propagation.</p> <p>Amazon VPC Route Server simplifies routing for traffic between workloads that are deployed within a VPC and its internet gateways. With this feature, VPC Route Server dynamically updates VPC and internet gateway route tables with your preferred IPv4 or IPv6 routes to achieve routing fault tolerance for those workloads. This enables you to automatically reroute traffic within a VPC, which increases the manageability of VPC routing and interoperability with third-party workloads.</p> <p>Route server supports the follow route table types:</p> <ul> <li> <p>VPC route tables not associated with subnets</p> </li> <li> <p>Subnet route tables</p> </li> <li> <p>Internet gateway route tables</p> </li> </ul> <p>Route server does not support route tables associated with virtual private gateways. To propagate routes into a transit gateway route table, use <a href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-connect.html">Transit Gateway Connect</a>.</p>
export def "aws ec2 getrouteserverpropagations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getrouteserverpropagations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets the routing database for the specified route server. The <a href="https://en.wikipedia.org/wiki/Routing_table">Routing Information Base (RIB)</a> serves as a database that stores all the routing information and network topology data collected by a router or routing system, such as routes learned from BGP peers. The RIB is constantly updated as new routing information is received or existing routes change. This ensures that the route server always has the most current view of the network topology and can make optimal routing decisions.</p> <p>Amazon VPC Route Server simplifies routing for traffic between workloads that are deployed within a VPC and its internet gateways. With this feature, VPC Route Server dynamically updates VPC and internet gateway route tables with your preferred IPv4 or IPv6 routes to achieve routing fault tolerance for those workloads. This enables you to automatically reroute traffic within a VPC, which increases the manageability of VPC routing and interoperability with third-party workloads.</p> <p>Route server supports the follow route table types:</p> <ul> <li> <p>VPC route tables not associated with subnets</p> </li> <li> <p>Subnet route tables</p> </li> <li> <p>Internet gateway route tables</p> </li> </ul> <p>Route server does not support route tables associated with virtual private gateways. To propagate routes into a transit gateway route table, use <a href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-connect.html">Transit Gateway Connect</a>.</p>
export def "aws ec2 getrouteserverroutingdatabase" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getrouteserverroutingdatabase | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets security groups that can be associated by the Amazon Web Services account making the request with network interfaces in the specified VPC.</p>
export def "aws ec2 getsecuritygroupsforvpc" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getsecuritygroupsforvpc | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Retrieves the access status of your account to the EC2 serial console of all instances. By default, access to the EC2 serial console is disabled for your account. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configure-access-to-serial-console.html#serial-console-account-access">Manage account access to the EC2 serial console</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 getserialconsoleaccessstatus" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getserialconsoleaccessstatus | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets the current state of <i>block public access for snapshots</i> setting for the account and Region.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/block-public-access-snapshots.html"> Block public access for snapshots</a> in the <i>Amazon EBS User Guide</i>.</p>
export def "aws ec2 getsnapshotblockpublicaccessstate" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getsnapshotblockpublicaccessstate | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Calculates the Spot placement score for a Region or Availability Zone based on the specified target capacity and compute requirements.</p> <p>You can specify your compute requirements either by using <code>InstanceRequirementsWithMetadata</code> and letting Amazon EC2 choose the optimal instance types to fulfill your Spot request, or you can specify the instance types by using <code>InstanceTypes</code>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-placement-score.html">Spot placement score</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 getspotplacementscores" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getspotplacementscores | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets information about the subnet CIDR reservations.</p>
export def "aws ec2 getsubnetcidrreservations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getsubnetcidrreservations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Lists the route tables to which the specified resource attachment propagates routes.</p>
export def "aws ec2 gettransitgatewayattachmentpropagations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 gettransitgatewayattachmentpropagations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets information about the associations for the transit gateway multicast domain.</p>
export def "aws ec2 gettransitgatewaymulticastdomainassociations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 gettransitgatewaymulticastdomainassociations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets a list of the transit gateway policy table associations.</p>
export def "aws ec2 gettransitgatewaypolicytableassociations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 gettransitgatewaypolicytableassociations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Returns a list of transit gateway policy table entries.</p>
export def "aws ec2 gettransitgatewaypolicytableentries" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 gettransitgatewaypolicytableentries | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets information about the prefix list references in a specified transit gateway route table.</p>
export def "aws ec2 gettransitgatewayprefixlistreferences" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 gettransitgatewayprefixlistreferences | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets information about the associations for the specified transit gateway route table.</p>
export def "aws ec2 gettransitgatewayroutetableassociations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 gettransitgatewayroutetableassociations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets information about the route table propagations for the specified transit gateway route table.</p>
export def "aws ec2 gettransitgatewayroutetablepropagations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 gettransitgatewayroutetablepropagations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Get the Verified Access policy associated with the endpoint.</p>
export def "aws ec2 getverifiedaccessendpointpolicy" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getverifiedaccessendpointpolicy | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Gets the targets for the specified network CIDR endpoint for Verified Access.</p>
export def "aws ec2 getverifiedaccessendpointtargets" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getverifiedaccessendpointtargets | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Shows the contents of the Verified Access policy associated with the group.</p>
export def "aws ec2 getverifiedaccessgrouppolicy" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getverifiedaccessgrouppolicy | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Download an Amazon Web Services-provided sample configuration file to be used with the customer gateway device specified for your Site-to-Site VPN connection.</p>
export def "aws ec2 getvpnconnectiondevicesampleconfiguration" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getvpnconnectiondevicesampleconfiguration | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Obtain a list of customer gateway devices for which sample configuration files can be provided. The request has no additional parameters. You can also see the list of device types with sample configuration files available under <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/your-cgw.html">Your customer gateway device</a> in the <i>Amazon Web Services Site-to-Site VPN User Guide</i>.</p>
export def "aws ec2 getvpnconnectiondevicetypes" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getvpnconnectiondevicetypes | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Get details of available tunnel endpoint maintenance.</p>
export def "aws ec2 getvpntunnelreplacementstatus" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 getvpntunnelreplacementstatus | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Uploads a client certificate revocation list to the specified Client VPN endpoint. Uploading a client certificate revocation list overwrites the existing client certificate revocation list.</p> <p>Uploading a client certificate revocation list resets existing client connections.</p>
export def "aws ec2 importclientvpnclientcertificaterevocationlist" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 importclientvpnclientcertificaterevocationlist | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <note> <p>To import your virtual machines (VMs) with a console-based experience, you can use the <i>Import virtual machine images to Amazon Web Services</i> template in the <a href="https://console.aws.amazon.com/migrationhub/orchestrator">Migration Hub Orchestrator console</a>. For more information, see the <a href="https://docs.aws.amazon.com/migrationhub-orchestrator/latest/userguide/import-vm-images.html"> <i>Migration Hub Orchestrator User Guide</i> </a>.</p> </note> <p>Import single or multi-volume disk images or EBS snapshots into an Amazon Machine Image (AMI).</p> <important> <p>Amazon Web Services VM Import/Export strongly recommends specifying a value for either the <code>--license-type</code> or <code>--usage-operation</code> parameter when you create a new VM Import task. This ensures your operating system is licensed appropriately and your billing is optimized.</p> </important> <p>For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html">Importing a VM as an image using VM Import/Export</a> in the <i>VM Import/Export User Guide</i>.</p>
export def "aws ec2 importimage" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 importimage | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <note> <p>We recommend that you use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportImage.html"> <code>ImportImage</code> </a> API instead. For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html">Importing a VM as an image using VM Import/Export</a> in the <i>VM Import/Export User Guide</i>.</p> </note> <p>Creates an import instance task using metadata from the specified disk image.</p> <p>This API action supports only single-volume VMs. To import multi-volume VMs, use <a>ImportImage</a> instead.</p> <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p> <p>This API action is not supported by the Command Line Interface (CLI).</p>
export def "aws ec2 importinstance" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 importinstance | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Imports the public key from an RSA or ED25519 key pair that you created using a third-party tool. You give Amazon Web Services only the public key. The private key is never transferred between you and Amazon Web Services.</p> <p>For more information about the requirements for importing a key pair, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/create-key-pairs.html#how-to-generate-your-own-key-and-import-it-to-aws">Create a key pair and import the public key to Amazon EC2</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 importkeypair" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 importkeypair | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Imports a disk into an EBS snapshot.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-import-snapshot.html">Importing a disk as a snapshot using VM Import/Export</a> in the <i>VM Import/Export User Guide</i>.</p>
export def "aws ec2 importsnapshot" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 importsnapshot | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <note> <p>This API action supports only single-volume VMs. To import multi-volume VMs, use <a>ImportImage</a> instead. To import a disk to a snapshot, use <a>ImportSnapshot</a> instead.</p> </note> <p>Creates an import volume task using metadata from the specified disk image.</p> <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p> <p>This API action is not supported by the Command Line Interface (CLI).</p>
export def "aws ec2 importvolume" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 importvolume | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Lists one or more AMIs that are currently in the Recycle Bin. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/recycle-bin.html">Recycle Bin</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 listimagesinrecyclebin" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 listimagesinrecyclebin | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Lists one or more snapshots that are currently in the Recycle Bin.</p>
export def "aws ec2 listsnapshotsinrecyclebin" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 listsnapshotsinrecyclebin | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Locks an Amazon EBS snapshot in either <i>governance</i> or <i>compliance</i> mode to protect it against accidental or malicious deletions for a specific duration. A locked snapshot can't be deleted.</p> <p>You can also use this action to modify the lock settings for a snapshot that is already locked. The allowed modifications depend on the lock mode and lock state:</p> <ul> <li> <p>If the snapshot is locked in governance mode, you can modify the lock mode and the lock duration or lock expiration date.</p> </li> <li> <p>If the snapshot is locked in compliance mode and it is in the cooling-off period, you can modify the lock mode and the lock duration or lock expiration date.</p> </li> <li> <p>If the snapshot is locked in compliance mode and the cooling-off period has lapsed, you can only increase the lock duration or extend the lock expiration date.</p> </li> </ul>
export def "aws ec2 locksnapshot" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 locksnapshot | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies an attribute of the specified Elastic IP address. For requirements, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#Using_Elastic_Addressing_Reverse_DNS">Using reverse DNS for email applications</a>.</p>
export def "aws ec2 modifyaddressattribute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyaddressattribute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Changes the opt-in status of the specified zone group for your account.</p>
export def "aws ec2 modifyavailabilityzonegroup" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyavailabilityzonegroup | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies a Capacity Reservation's capacity, instance eligibility, and the conditions under which it is to be released. You can't modify a Capacity Reservation's instance type, EBS optimization, platform, instance store settings, Availability Zone, or tenancy. If you need to modify any of these attributes, we recommend that you cancel the Capacity Reservation, and then create a new one with the required attributes. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/capacity-reservations-modify.html"> Modify an active Capacity Reservation</a>.</p> <p>The allowed modifications depend on the state of the Capacity Reservation:</p> <ul> <li> <p> <code>assessing</code> or <code>scheduled</code> state - You can modify the tags only.</p> </li> <li> <p> <code>pending</code> state - You can't modify the Capacity Reservation in any way.</p> </li> <li> <p> <code>active</code> state but still within the commitment duration - You can't decrease the instance count or set an end date that is within the commitment duration. All other modifications are allowed.</p> </li> <li> <p> <code>active</code> state with no commitment duration or elapsed commitment duration - All modifications are allowed.</p> </li> <li> <p> <code>expired</code>, <code>cancelled</code>, <code>unsupported</code>, or <code>failed</code> state - You can't modify the Capacity Reservation in any way.</p> </li> </ul>
export def "aws ec2 modifycapacityreservation" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifycapacityreservation | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies a Capacity Reservation Fleet.</p> <p>When you modify the total target capacity of a Capacity Reservation Fleet, the Fleet automatically creates new Capacity Reservations, or modifies or cancels existing Capacity Reservations in the Fleet to meet the new total target capacity. When you modify the end date for the Fleet, the end dates for all of the individual Capacity Reservations in the Fleet are updated accordingly.</p>
export def "aws ec2 modifycapacityreservationfleet" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifycapacityreservationfleet | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the specified Client VPN endpoint. Modifying the DNS server resets existing client connections.</p>
export def "aws ec2 modifyclientvpnendpoint" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyclientvpnendpoint | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the default credit option for CPU usage of burstable performance instances. The default credit option is set at the account level per Amazon Web Services Region, and is specified per instance family. All new burstable performance instances in the account launch using the default credit option.</p> <p> <code>ModifyDefaultCreditSpecification</code> is an asynchronous operation, which works at an Amazon Web Services Region level and modifies the credit option for each Availability Zone. All zones in a Region are updated within five minutes. But if instances are launched during this operation, they might not get the new credit option until the zone is updated. To verify whether the update has occurred, you can call <code>GetDefaultCreditSpecification</code> and check <code>DefaultCreditSpecification</code> for updates.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 modifydefaultcreditspecification" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifydefaultcreditspecification | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Changes the default KMS key for EBS encryption by default for your account in this Region.</p> <p>Amazon Web Services creates a unique Amazon Web Services managed KMS key in each Region for use with encryption by default. If you change the default KMS key to a symmetric customer managed KMS key, it is used instead of the Amazon Web Services managed KMS key. Amazon EBS does not support asymmetric KMS keys.</p> <p>If you delete or disable the customer managed KMS key that you specified for use with encryption by default, your instances will fail to launch.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html">Amazon EBS encryption</a> in the <i>Amazon EBS User Guide</i>.</p>
export def "aws ec2 modifyebsdefaultkmskeyid" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyebsdefaultkmskeyid | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the specified EC2 Fleet.</p> <p>You can only modify an EC2 Fleet request of type <code>maintain</code>.</p> <p>While the EC2 Fleet is being modified, it is in the <code>modifying</code> state.</p> <p>To scale up your EC2 Fleet, increase its target capacity. The EC2 Fleet launches the additional Spot Instances according to the allocation strategy for the EC2 Fleet request. If the allocation strategy is <code>lowest-price</code>, the EC2 Fleet launches instances using the Spot Instance pool with the lowest price. If the allocation strategy is <code>diversified</code>, the EC2 Fleet distributes the instances across the Spot Instance pools. If the allocation strategy is <code>capacity-optimized</code>, EC2 Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.</p> <p>To scale down your EC2 Fleet, decrease its target capacity. First, the EC2 Fleet cancels any open requests that exceed the new target capacity. You can request that the EC2 Fleet terminate Spot Instances until the size of the fleet no longer exceeds the new target capacity. If the allocation strategy is <code>lowest-price</code>, the EC2 Fleet terminates the instances with the highest price per unit. If the allocation strategy is <code>capacity-optimized</code>, the EC2 Fleet terminates the instances in the Spot Instance pools that have the least available Spot Instance capacity. If the allocation strategy is <code>diversified</code>, the EC2 Fleet terminates instances across the Spot Instance pools. Alternatively, you can request that the EC2 Fleet keep the fleet at its current size, but not replace any Spot Instances that are interrupted or that you terminate manually.</p> <p>If you are finished with your EC2 Fleet for now, but will use it again later, you can set the target capacity to 0.</p>
export def "aws ec2 modifyfleet" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyfleet | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the specified attribute of the specified Amazon FPGA Image (AFI).</p>
export def "aws ec2 modifyfpgaimageattribute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyfpgaimageattribute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modify the auto-placement setting of a Dedicated Host. When auto-placement is enabled, any instances that you launch with a tenancy of <code>host</code> but without a specific host ID are placed onto any available Dedicated Host in your account that has auto-placement enabled. When auto-placement is disabled, you need to provide a host ID to have the instance launch onto a specific host. If no host ID is provided, the instance is launched onto a suitable host with auto-placement enabled.</p> <p>You can also use this API action to modify a Dedicated Host to support either multiple instance types in an instance family, or to support a specific instance type only.</p>
export def "aws ec2 modifyhosts" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyhosts | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the ID format for the specified resource on a per-Region basis. You can specify that resources should receive longer IDs (17-character IDs) when they are created.</p> <p>This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p> <p>This setting applies to the IAM user who makes the request; it does not apply to the entire Amazon Web Services account. By default, an IAM user defaults to the same settings as the root user. If you're using this action as the root user, then these settings apply to the entire account, unless an IAM user explicitly overrides these settings for themselves. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant <code>Describe</code> command for the resource type.</p>
export def "aws ec2 modifyidformat" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyidformat | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the ID format of a resource for a specified IAM user, IAM role, or the root user for an account; or all IAM users, IAM roles, and the root user for an account. You can specify that resources should receive longer IDs (17-character IDs) when they are created. </p> <p>This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p> <p>This setting applies to the principal specified in the request; it does not apply to the principal that makes the request. </p> <p>Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant <code>Describe</code> command for the resource type.</p>
export def "aws ec2 modifyidentityidformat" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyidentityidformat | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the specified attribute of the specified AMI. You can specify only one attribute at a time.</p> <p>To specify the attribute, you can use the <code>Attribute</code> parameter, or one of the following parameters: <code>Description</code>, <code>ImdsSupport</code>, or <code>LaunchPermission</code>.</p> <p>Images with an Amazon Web Services Marketplace product code cannot be made public.</p> <p>To enable the SriovNetSupport enhanced networking attribute of an image, enable SriovNetSupport on an instance and create an AMI from the instance.</p>
export def "aws ec2 modifyimageattribute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyimageattribute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the specified attribute of the specified instance. You can specify only one attribute at a time.</p> <p> <b>Note: </b>Using this action to change the security groups associated with an elastic network interface (ENI) attached to an instance can result in an error if the instance has more than one ENI. To change the security groups associated with an ENI attached to an instance that has multiple ENIs, we recommend that you use the <a>ModifyNetworkInterfaceAttribute</a> action.</p> <p>To modify some attributes, the instance must be stopped. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_ChangingAttributesWhileInstanceStopped.html">Modify a stopped instance</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 modifyinstanceattribute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyinstanceattribute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the Capacity Reservation settings for a stopped instance. Use this action to configure an instance to target a specific Capacity Reservation, run in any <code>open</code> Capacity Reservation with matching attributes, run in On-Demand Instance capacity, or only run in a Capacity Reservation.</p>
export def "aws ec2 modifyinstancecapacityreservationattributes" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyinstancecapacityreservationattributes | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the specified EC2 Instance Connect Endpoint.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/modify-ec2-instance-connect-endpoint.html">Modify an EC2 Instance Connect Endpoint</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 modifyinstanceconnectendpoint" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyinstanceconnectendpoint | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>By default, all vCPUs for the instance type are active when you launch an instance. When you configure the number of active vCPUs for the instance, it can help you save on licensing costs and optimize performance. The base cost of the instance remains unchanged.</p> <p>The number of active vCPUs equals the number of threads per CPU core multiplied by the number of cores. The instance must be in a <code>Stopped</code> state before you make changes.</p> <note> <p>Some instance type options do not support this capability. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cpu-options-supported-instances-values.html">Supported CPU options</a> in the <i>Amazon EC2 User Guide</i>.</p> </note>
export def "aws ec2 modifyinstancecpuoptions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyinstancecpuoptions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the credit option for CPU usage on a running or stopped burstable performance instance. The credit options are <code>standard</code> and <code>unlimited</code>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable performance instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 modifyinstancecreditspecification" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyinstancecreditspecification | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the start time for a scheduled Amazon EC2 instance event.</p>
export def "aws ec2 modifyinstanceeventstarttime" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyinstanceeventstarttime | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the specified event window.</p> <p>You can define either a set of time ranges or a cron expression when modifying the event window, but not both.</p> <p>To modify the targets associated with the event window, use the <a>AssociateInstanceEventWindow</a> and <a>DisassociateInstanceEventWindow</a> API.</p> <p>If Amazon Web Services has already scheduled an event, modifying an event window won't change the time of the scheduled event.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/event-windows.html">Define event windows for scheduled events</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 modifyinstanceeventwindow" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyinstanceeventwindow | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the recovery behavior of your instance to disable simplified automatic recovery or set the recovery behavior to default. The default configuration will not enable simplified automatic recovery for an unsupported instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-recover.html#instance-configuration-recovery">Simplified automatic recovery</a>.</p> <p>Modifies the reboot migration behavior during a user-initiated reboot of an instance that has a pending <code>system-reboot</code> event. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/schedevents_actions_reboot.html#reboot-migration">Enable or disable reboot migration</a>.</p>
export def "aws ec2 modifyinstancemaintenanceoptions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyinstancemaintenanceoptions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the default instance metadata service (IMDS) settings at the account level in the specified Amazon Web Services&#x2028; Region.</p> <note> <p>To remove a parameter's account-level default setting, specify <code>no-preference</code>. If an account-level setting is cleared with <code>no-preference</code>, then the instance launch considers the other instance metadata settings. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html#instance-metadata-options-order-of-precedence">Order of precedence for instance metadata options</a> in the <i>Amazon EC2 User Guide</i>.</p> </note>
export def "aws ec2 modifyinstancemetadatadefaults" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyinstancemetadatadefaults | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modify the instance metadata parameters on a running or stopped instance. When you modify the parameters on a stopped instance, they are applied when the instance is started. When you modify the parameters on a running instance, the API responds with a state of “pending”. After the parameter modifications are successfully applied to the instance, the state of the modifications changes from “pending” to “applied” in subsequent describe-instances API calls. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance metadata and user data</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 modifyinstancemetadataoptions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyinstancemetadataoptions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Change the configuration of the network performance options for an existing instance.</p>
export def "aws ec2 modifyinstancenetworkperformanceoptions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyinstancenetworkperformanceoptions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the placement attributes for a specified instance. You can do the following:</p> <ul> <li> <p>Modify the affinity between an instance and a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html">Dedicated Host</a>. When affinity is set to <code>host</code> and the instance is not associated with a specific Dedicated Host, the next time the instance is started, it is automatically associated with the host on which it lands. If the instance is restarted or rebooted, this relationship persists.</p> </li> <li> <p>Change the Dedicated Host with which an instance is associated.</p> </li> <li> <p>Change the instance tenancy of an instance.</p> </li> <li> <p>Move an instance to or from a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">placement group</a>.</p> </li> </ul> <p>At least one attribute for affinity, host ID, tenancy, or placement group name must be specified in the request. Affinity and tenancy can be modified in the same request.</p> <p>To modify the host ID, tenancy, placement group, or partition for an instance, the instance must be in the <code>stopped</code> state.</p>
export def "aws ec2 modifyinstanceplacement" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyinstanceplacement | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modify the configurations of an IPAM. </p>
export def "aws ec2 modifyipam" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyipam | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modify the configurations of an IPAM pool.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/mod-pool-ipam.html">Modify a pool</a> in the <i>Amazon VPC IPAM User Guide</i>. </p>
export def "aws ec2 modifyipampool" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyipampool | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modify a resource CIDR. You can use this action to transfer resource CIDRs between scopes and ignore resource CIDRs that you do not want to manage. If set to false, the resource will not be tracked for overlap, it cannot be auto-imported into a pool, and it will be removed from any pool it has an allocation in.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/move-resource-ipam.html">Move resource CIDRs between scopes</a> and <a href="https://docs.aws.amazon.com/vpc/latest/ipam/change-monitoring-state-ipam.html">Change the monitoring state of resource CIDRs</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
export def "aws ec2 modifyipamresourcecidr" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyipamresourcecidr | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies a resource discovery. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.</p>
export def "aws ec2 modifyipamresourcediscovery" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyipamresourcediscovery | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modify an IPAM scope.</p>
export def "aws ec2 modifyipamscope" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyipamscope | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies a launch template. You can specify which version of the launch template to set as the default version. When launching an instance, the default version applies when a launch template version is not specified.</p>
export def "aws ec2 modifylaunchtemplate" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifylaunchtemplate | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the specified local gateway route.</p>
export def "aws ec2 modifylocalgatewayroute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifylocalgatewayroute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the specified managed prefix list.</p> <p>Adding or removing entries in a prefix list creates a new version of the prefix list. Changing the name of the prefix list does not affect the version.</p> <p>If you specify a current version number that does not match the true current version number, the request fails.</p>
export def "aws ec2 modifymanagedprefixlist" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifymanagedprefixlist | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the specified network interface attribute. You can specify only one attribute at a time. You can use this action to attach and detach security groups from an existing EC2 instance.</p>
export def "aws ec2 modifynetworkinterfaceattribute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifynetworkinterfaceattribute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the options for instance hostnames for the specified instance.</p>
export def "aws ec2 modifyprivatednsnameoptions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyprivatednsnameoptions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modify public hostname options for a network interface. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html">EC2 instance hostnames, DNS names, and domains</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 modifypublicipdnsnameoptions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifypublicipdnsnameoptions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the configuration of your Reserved Instances, such as the Availability Zone, instance count, or instance type. The Reserved Instances to be modified must be identical, except for Availability Zone, network platform, and instance type.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modify Reserved Instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 modifyreservedinstances" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyreservedinstances | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the configuration of an existing route server.</p> <p>Amazon VPC Route Server simplifies routing for traffic between workloads that are deployed within a VPC and its internet gateways. With this feature, VPC Route Server dynamically updates VPC and internet gateway route tables with your preferred IPv4 or IPv6 routes to achieve routing fault tolerance for those workloads. This enables you to automatically reroute traffic within a VPC, which increases the manageability of VPC routing and interoperability with third-party workloads.</p> <p>Route server supports the follow route table types:</p> <ul> <li> <p>VPC route tables not associated with subnets</p> </li> <li> <p>Subnet route tables</p> </li> <li> <p>Internet gateway route tables</p> </li> </ul> <p>Route server does not support route tables associated with virtual private gateways. To propagate routes into a transit gateway route table, use <a href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-connect.html">Transit Gateway Connect</a>.</p> <p>For more information see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/dynamic-routing-route-server.html">Dynamic routing in your VPC with VPC Route Server</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 modifyrouteserver" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyrouteserver | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the rules of a security group.</p>
export def "aws ec2 modifysecuritygrouprules" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifysecuritygrouprules | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Adds or removes permission settings for the specified snapshot. You may add or remove specified Amazon Web Services account IDs from a snapshot's list of create volume permissions, but you cannot do both in a single operation. If you need to both add and remove account IDs for a snapshot, you must use multiple operations. You can make up to 500 modifications to a snapshot in a single operation.</p> <p>Encrypted snapshots and snapshots with Amazon Web Services Marketplace product codes cannot be made public. Snapshots encrypted with your default KMS key cannot be shared with other accounts.</p> <p>For more information about modifying snapshot permissions, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-modifying-snapshot-permissions.html">Share a snapshot</a> in the <i>Amazon EBS User Guide</i>.</p>
export def "aws ec2 modifysnapshotattribute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifysnapshotattribute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Archives an Amazon EBS snapshot. When you archive a snapshot, it is converted to a full snapshot that includes all of the blocks of data that were written to the volume at the time the snapshot was created, and moved from the standard tier to the archive tier. For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/snapshot-archive.html">Archive Amazon EBS snapshots</a> in the <i>Amazon EBS User Guide</i>.</p>
export def "aws ec2 modifysnapshottier" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifysnapshottier | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the specified Spot Fleet request.</p> <p>You can only modify a Spot Fleet request of type <code>maintain</code>.</p> <p>While the Spot Fleet request is being modified, it is in the <code>modifying</code> state.</p> <p>To scale up your Spot Fleet, increase its target capacity. The Spot Fleet launches the additional Spot Instances according to the allocation strategy for the Spot Fleet request. If the allocation strategy is <code>lowestPrice</code>, the Spot Fleet launches instances using the Spot Instance pool with the lowest price. If the allocation strategy is <code>diversified</code>, the Spot Fleet distributes the instances across the Spot Instance pools. If the allocation strategy is <code>capacityOptimized</code>, Spot Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.</p> <p>To scale down your Spot Fleet, decrease its target capacity. First, the Spot Fleet cancels any open requests that exceed the new target capacity. You can request that the Spot Fleet terminate Spot Instances until the size of the fleet no longer exceeds the new target capacity. If the allocation strategy is <code>lowestPrice</code>, the Spot Fleet terminates the instances with the highest price per unit. If the allocation strategy is <code>capacityOptimized</code>, the Spot Fleet terminates the instances in the Spot Instance pools that have the least available Spot Instance capacity. If the allocation strategy is <code>diversified</code>, the Spot Fleet terminates instances across the Spot Instance pools. Alternatively, you can request that the Spot Fleet keep the fleet at its current size, but not replace any Spot Instances that are interrupted or that you terminate manually.</p> <p>If you are finished with your Spot Fleet for now, but will use it again later, you can set the target capacity to 0.</p>
export def "aws ec2 modifyspotfleetrequest" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyspotfleetrequest | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies a subnet attribute. You can only modify one attribute at a time.</p> <p>Use this action to modify subnets on Amazon Web Services Outposts.</p> <ul> <li> <p>To modify a subnet on an Outpost rack, set both <code>MapCustomerOwnedIpOnLaunch</code> and <code>CustomerOwnedIpv4Pool</code>. These two parameters act as a single attribute.</p> </li> <li> <p>To modify a subnet on an Outpost server, set either <code>EnableLniAtDeviceIndex</code> or <code>DisableLniAtDeviceIndex</code>.</p> </li> </ul> <p>For more information about Amazon Web Services Outposts, see the following:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/outposts/latest/userguide/how-servers-work.html">Outpost servers</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/outposts/latest/userguide/how-racks-work.html">Outpost racks</a> </p> </li> </ul>
export def "aws ec2 modifysubnetattribute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifysubnetattribute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Allows or restricts mirroring network services.</p> <p> By default, Amazon DNS network services are not eligible for Traffic Mirror. Use <code>AddNetworkServices</code> to add network services to a Traffic Mirror filter. When a network service is added to the Traffic Mirror filter, all traffic related to that network service will be mirrored. When you no longer want to mirror network services, use <code>RemoveNetworkServices</code> to remove the network services from the Traffic Mirror filter. </p>
export def "aws ec2 modifytrafficmirrorfilternetworkservices" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifytrafficmirrorfilternetworkservices | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the specified Traffic Mirror rule.</p> <p> <code>DestinationCidrBlock</code> and <code>SourceCidrBlock</code> must both be an IPv4 range or an IPv6 range.</p>
export def "aws ec2 modifytrafficmirrorfilterrule" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifytrafficmirrorfilterrule | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies a Traffic Mirror session.</p>
export def "aws ec2 modifytrafficmirrorsession" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifytrafficmirrorsession | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the specified transit gateway. When you modify a transit gateway, the modified options are applied to new transit gateway attachments only. Your existing transit gateway attachments are not modified.</p>
export def "aws ec2 modifytransitgateway" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifytransitgateway | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies a reference (route) to a prefix list in a specified transit gateway route table.</p>
export def "aws ec2 modifytransitgatewayprefixlistreference" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifytransitgatewayprefixlistreference | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the specified VPC attachment.</p>
export def "aws ec2 modifytransitgatewayvpcattachment" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifytransitgatewayvpcattachment | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the configuration of the specified Amazon Web Services Verified Access endpoint.</p>
export def "aws ec2 modifyverifiedaccessendpoint" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyverifiedaccessendpoint | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the specified Amazon Web Services Verified Access endpoint policy.</p>
export def "aws ec2 modifyverifiedaccessendpointpolicy" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyverifiedaccessendpointpolicy | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the specified Amazon Web Services Verified Access group configuration.</p>
export def "aws ec2 modifyverifiedaccessgroup" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyverifiedaccessgroup | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the specified Amazon Web Services Verified Access group policy.</p>
export def "aws ec2 modifyverifiedaccessgrouppolicy" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyverifiedaccessgrouppolicy | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the configuration of the specified Amazon Web Services Verified Access instance.</p>
export def "aws ec2 modifyverifiedaccessinstance" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyverifiedaccessinstance | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the logging configuration for the specified Amazon Web Services Verified Access instance.</p>
export def "aws ec2 modifyverifiedaccessinstanceloggingconfiguration" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyverifiedaccessinstanceloggingconfiguration | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the configuration of the specified Amazon Web Services Verified Access trust provider.</p>
export def "aws ec2 modifyverifiedaccesstrustprovider" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyverifiedaccesstrustprovider | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>You can modify several parameters of an existing EBS volume, including volume size, volume type, and IOPS capacity. If your EBS volume is attached to a current-generation EC2 instance type, you might be able to apply these changes without stopping the instance or detaching the volume from it. For more information about modifying EBS volumes, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-modify-volume.html">Amazon EBS Elastic Volumes</a> in the <i>Amazon EBS User Guide</i>.</p> <p>When you complete a resize operation on your volume, you need to extend the volume's file-system size to take advantage of the new storage capacity. For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/recognize-expanded-volume-linux.html">Extend the file system</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/monitoring-volume-modifications.html">Monitor the progress of volume modifications</a> in the <i>Amazon EBS User Guide</i>.</p> <p>With previous-generation instance types, resizing an EBS volume might require detaching and reattaching the volume or stopping and restarting the instance.</p> <p>After modifying a volume, you must wait at least six hours and ensure that the volume is in the <code>in-use</code> or <code>available</code> state before you can modify the same volume. This is sometimes referred to as a cooldown period.</p>
export def "aws ec2 modifyvolume" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyvolume | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies a volume attribute.</p> <p>By default, all I/O operations for the volume are suspended when the data on the volume is determined to be potentially inconsistent, to prevent undetectable, latent data corruption. The I/O access to the volume can be resumed by first enabling I/O access and then checking the data consistency on your volume.</p> <p>You can change the default behavior to resume I/O operations. We recommend that you change this only for boot volumes or for volumes that are stateless or disposable.</p>
export def "aws ec2 modifyvolumeattribute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyvolumeattribute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the specified attribute of the specified VPC.</p>
export def "aws ec2 modifyvpcattribute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyvpcattribute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modify VPC Block Public Access (BPA) exclusions. A VPC BPA exclusion is a mode that can be applied to a single VPC or subnet that exempts it from the account’s BPA mode and will allow bidirectional or egress-only access. You can create BPA exclusions for VPCs and subnets even when BPA is not enabled on the account to ensure that there is no traffic disruption to the exclusions when VPC BPA is turned on.</p>
export def "aws ec2 modifyvpcblockpublicaccessexclusion" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyvpcblockpublicaccessexclusion | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modify VPC Block Public Access (BPA) options. VPC Block Public Access (BPA) enables you to block resources in VPCs and subnets that you own in a Region from reaching or being reached from the internet through internet gateways and egress-only internet gateways. To learn more about VPC BPA, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/security-vpc-bpa.html">Block public access to VPCs and subnets</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 modifyvpcblockpublicaccessoptions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyvpcblockpublicaccessoptions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies attributes of a specified VPC endpoint. The attributes that you can modify depend on the type of VPC endpoint (interface, gateway, or Gateway Load Balancer). For more information, see the <a href="https://docs.aws.amazon.com/vpc/latest/privatelink/">Amazon Web Services PrivateLink Guide</a>.</p>
export def "aws ec2 modifyvpcendpoint" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyvpcendpoint | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies a connection notification for VPC endpoint or VPC endpoint service. You can change the SNS topic for the notification, or the events for which to be notified. </p>
export def "aws ec2 modifyvpcendpointconnectionnotification" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyvpcendpointconnectionnotification | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the attributes of the specified VPC endpoint service configuration.</p> <p>If you set or modify the private DNS name, you must prove that you own the private DNS domain name.</p>
export def "aws ec2 modifyvpcendpointserviceconfiguration" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyvpcendpointserviceconfiguration | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the payer responsibility for your VPC endpoint service.</p>
export def "aws ec2 modifyvpcendpointservicepayerresponsibility" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyvpcendpointservicepayerresponsibility | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the permissions for your VPC endpoint service. You can add or remove permissions for service consumers (Amazon Web Services accounts, users, and IAM roles) to connect to your endpoint service. Principal ARNs with path components aren't supported.</p> <p>If you grant permissions to all principals, the service is public. Any users who know the name of a public service can send a request to attach an endpoint. If the service does not require manual approval, attachments are automatically approved.</p>
export def "aws ec2 modifyvpcendpointservicepermissions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyvpcendpointservicepermissions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the VPC peering connection options on one side of a VPC peering connection.</p> <p>If the peered VPCs are in the same Amazon Web Services account, you can enable DNS resolution for queries from the local VPC. This ensures that queries from the local VPC resolve to private IP addresses in the peer VPC. This option is not available if the peered VPCs are in different Amazon Web Services accounts or different Regions. For peered VPCs in different Amazon Web Services accounts, each Amazon Web Services account owner must initiate a separate request to modify the peering connection options. For inter-region peering connections, you must use the Region for the requester VPC to modify the requester VPC peering options and the Region for the accepter VPC to modify the accepter VPC peering options. To verify which VPCs are the accepter and the requester for a VPC peering connection, use the <a>DescribeVpcPeeringConnections</a> command.</p>
export def "aws ec2 modifyvpcpeeringconnectionoptions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyvpcpeeringconnectionoptions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the instance tenancy attribute of the specified VPC. You can change the instance tenancy attribute of a VPC to <code>default</code> only. You cannot change the instance tenancy attribute to <code>dedicated</code>.</p> <p>After you modify the tenancy of the VPC, any new instances that you launch into the VPC have a tenancy of <code>default</code>, unless you specify otherwise during launch. The tenancy of any existing instances in the VPC is not affected.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html">Dedicated Instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 modifyvpctenancy" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyvpctenancy | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the customer gateway or the target gateway of an Amazon Web Services Site-to-Site VPN connection. To modify the target gateway, the following migration options are available:</p> <ul> <li> <p>An existing virtual private gateway to a new virtual private gateway</p> </li> <li> <p>An existing virtual private gateway to a transit gateway</p> </li> <li> <p>An existing transit gateway to a new transit gateway</p> </li> <li> <p>An existing transit gateway to a virtual private gateway</p> </li> </ul> <p>Before you perform the migration to the new gateway, you must configure the new gateway. Use <a>CreateVpnGateway</a> to create a virtual private gateway, or <a>CreateTransitGateway</a> to create a transit gateway.</p> <p>This step is required when you migrate from a virtual private gateway with static routes to a transit gateway. </p> <p>You must delete the static routes before you migrate to the new gateway.</p> <p>Keep a copy of the static route before you delete it. You will need to add back these routes to the transit gateway after the VPN connection migration is complete.</p> <p>After you migrate to the new gateway, you might need to modify your VPC route table. Use <a>CreateRoute</a> and <a>DeleteRoute</a> to make the changes described in <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/modify-vpn-target.html#step-update-routing">Update VPC route tables</a> in the <i>Amazon Web Services Site-to-Site VPN User Guide</i>.</p> <p>When the new gateway is a transit gateway, modify the transit gateway route table to allow traffic between the VPC and the Amazon Web Services Site-to-Site VPN connection. Use <a>CreateTransitGatewayRoute</a> to add the routes.</p> <p> If you deleted VPN static routes, you must add the static routes to the transit gateway route table.</p> <p>After you perform this operation, the VPN endpoint's IP addresses on the Amazon Web Services side and the tunnel options remain intact. Your Amazon Web Services Site-to-Site VPN connection will be temporarily unavailable for a brief period while we provision the new endpoints.</p>
export def "aws ec2 modifyvpnconnection" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyvpnconnection | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the connection options for your Site-to-Site VPN connection.</p> <p>When you modify the VPN connection options, the VPN endpoint IP addresses on the Amazon Web Services side do not change, and the tunnel options do not change. Your VPN connection will be temporarily unavailable for a brief period while the VPN connection is updated.</p>
export def "aws ec2 modifyvpnconnectionoptions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyvpnconnectionoptions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the VPN tunnel endpoint certificate.</p>
export def "aws ec2 modifyvpntunnelcertificate" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyvpntunnelcertificate | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Modifies the options for a VPN tunnel in an Amazon Web Services Site-to-Site VPN connection. You can modify multiple options for a tunnel in a single request, but you can only modify one tunnel at a time. For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPNTunnels.html">Site-to-Site VPN tunnel options for your Site-to-Site VPN connection</a> in the <i>Amazon Web Services Site-to-Site VPN User Guide</i>.</p>
export def "aws ec2 modifyvpntunneloptions" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 modifyvpntunneloptions | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Enables detailed monitoring for a running instance. Otherwise, basic monitoring is enabled. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitor your instances using CloudWatch</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>To disable detailed monitoring, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_UnmonitorInstances.html">UnmonitorInstances</a>.</p>
export def "aws ec2 monitorinstances" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 monitorinstances | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <note> <p>This action is deprecated.</p> </note> <p>Moves an Elastic IP address from the EC2-Classic platform to the EC2-VPC platform. The Elastic IP address must be allocated to your account for more than 24 hours, and it must not be associated with an instance. After the Elastic IP address is moved, it is no longer available for use in the EC2-Classic platform. You cannot move an Elastic IP address that was originally allocated for use in the EC2-VPC platform to the EC2-Classic platform.</p>
export def "aws ec2 moveaddresstovpc" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 moveaddresstovpc | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Move a BYOIPv4 CIDR to IPAM from a public IPv4 pool.</p> <p>If you already have a BYOIPv4 CIDR with Amazon Web Services, you can move the CIDR to IPAM from a public IPv4 pool. You cannot move an IPv6 CIDR to IPAM. If you are bringing a new IP address to Amazon Web Services for the first time, complete the steps in <a href="https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoip-ipam.html">Tutorial: BYOIP address CIDRs to IPAM</a>.</p>
export def "aws ec2 movebyoipcidrtoipam" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 movebyoipcidrtoipam | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Move available capacity from a source Capacity Reservation to a destination Capacity Reservation. The source Capacity Reservation and the destination Capacity Reservation must be <code>active</code>, owned by your Amazon Web Services account, and share the following: </p> <ul> <li> <p>Instance type</p> </li> <li> <p>Platform</p> </li> <li> <p>Availability Zone</p> </li> <li> <p>Tenancy</p> </li> <li> <p>Placement group</p> </li> <li> <p>Capacity Reservation end time - <code>At specific time</code> or <code>Manually</code>.</p> </li> </ul>
export def "aws ec2 movecapacityreservationinstances" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 movecapacityreservationinstances | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Provisions an IPv4 or IPv6 address range for use with your Amazon Web Services resources through bring your own IP addresses (BYOIP) and creates a corresponding address pool. After the address range is provisioned, it is ready to be advertised.</p> <p>Amazon Web Services verifies that you own the address range and are authorized to advertise it. You must ensure that the address range is registered to you and that you created an RPKI ROA to authorize Amazon ASNs 16509 and 14618 to advertise the address range. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">Bring your own IP addresses (BYOIP)</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>Provisioning an address range is an asynchronous operation, so the call returns immediately, but the address range is not ready to use until its status changes from <code>pending-provision</code> to <code>provisioned</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/byoip-onboard.html">Onboard your address range</a>.</p>
export def "aws ec2 provisionbyoipcidr" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 provisionbyoipcidr | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Provisions your Autonomous System Number (ASN) for use in your Amazon Web Services account. This action requires authorization context for Amazon to bring the ASN to an Amazon Web Services account. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/tutorials-byoasn.html">Tutorial: Bring your ASN to IPAM</a> in the <i>Amazon VPC IPAM guide</i>.</p>
export def "aws ec2 provisionipambyoasn" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 provisionipambyoasn | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Provision a CIDR to an IPAM pool. You can use this action to provision new CIDRs to a top-level pool or to transfer a CIDR from a top-level pool to a pool within it.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/prov-cidr-ipam.html">Provision CIDRs to pools</a> in the <i>Amazon VPC IPAM User Guide</i>. </p>
export def "aws ec2 provisionipampoolcidr" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 provisionipampoolcidr | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Provision a CIDR to a public IPv4 pool.</p> <p>For more information about IPAM, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/what-is-it-ipam.html">What is IPAM?</a> in the <i>Amazon VPC IPAM User Guide</i>.</p>
export def "aws ec2 provisionpublicipv4poolcidr" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 provisionpublicipv4poolcidr | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Purchase the Capacity Block for use with your account. With Capacity Blocks you ensure GPU capacity is available for machine learning (ML) workloads. You must specify the ID of the Capacity Block offering you are purchasing.</p>
export def "aws ec2 purchasecapacityblock" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 purchasecapacityblock | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Purchase the Capacity Block extension for use with your account. You must specify the ID of the Capacity Block extension offering you are purchasing.</p>
export def "aws ec2 purchasecapacityblockextension" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 purchasecapacityblockextension | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Purchase a reservation with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation. This action results in the specified reservation being purchased and charged to your account.</p>
export def "aws ec2 purchasehostreservation" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 purchasehostreservation | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Purchases a Reserved Instance for use with your account. With Reserved Instances, you pay a lower hourly rate compared to On-Demand instance pricing.</p> <p>Use <a>DescribeReservedInstancesOfferings</a> to get a list of Reserved Instance offerings that match your specifications. After you've purchased a Reserved Instance, you can check for your new Reserved Instance with <a>DescribeReservedInstances</a>.</p> <p>To queue a purchase for a future date and time, specify a purchase time. If you do not specify a purchase time, the default is the current time.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html">Reserved Instances</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Sell in the Reserved Instance Marketplace</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 purchasereservedinstancesoffering" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 purchasereservedinstancesoffering | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <note> <p>You can no longer purchase Scheduled Instances.</p> </note> <p>Purchases the Scheduled Instances with the specified schedule.</p> <p>Scheduled Instances enable you to purchase Amazon EC2 compute capacity by the hour for a one-year term. Before you can purchase a Scheduled Instance, you must call <a>DescribeScheduledInstanceAvailability</a> to check for available schedules and obtain a purchase token. After you purchase a Scheduled Instance, you must call <a>RunScheduledInstances</a> during each scheduled time period.</p> <p>After you purchase a Scheduled Instance, you can't cancel, modify, or resell your purchase.</p>
export def "aws ec2 purchasescheduledinstances" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 purchasescheduledinstances | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Requests a reboot of the specified instances. This operation is asynchronous; it only queues a request to reboot the specified instances. The operation succeeds if the instances are valid and belong to you. Requests to reboot terminated instances are ignored.</p> <p>If an instance does not cleanly shut down within a few minutes, Amazon EC2 performs a hard reboot.</p> <p>For more information about troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html">Troubleshoot an unreachable instance</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 rebootinstances" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 rebootinstances | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Registers an AMI. When you're creating an instance-store backed AMI, registering the AMI is the final step in the creation process. For more information about creating AMIs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html#creating-launching-ami-from-snapshot">Create an AMI from a snapshot</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-instance-store.html">Create an instance-store backed AMI</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>If needed, you can deregister an AMI at any time. Any modifications you make to an AMI backed by an instance store volume invalidates its registration. If you make changes to an image, deregister the previous image and register the new image.</p> <p> <b>Register a snapshot of a root device volume</b> </p> <p>You can use <code>RegisterImage</code> to create an Amazon EBS-backed Linux AMI from a snapshot of a root device volume. You specify the snapshot using a block device mapping. You can't set the encryption state of the volume using the block device mapping. If the snapshot is encrypted, or encryption by default is enabled, the root volume of an instance launched from the AMI is encrypted.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html#creating-launching-ami-from-snapshot">Create an AMI from a snapshot</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIEncryption.html">Use encryption with EBS-backed AMIs</a> in the <i>Amazon EC2 User Guide</i>.</p> <p> <b>Amazon Web Services Marketplace product codes</b> </p> <p>If any snapshots have Amazon Web Services Marketplace product codes, they are copied to the new AMI.</p> <p>In most cases, AMIs for Windows, RedHat, SUSE, and SQL Server require correct licensing information to be present on the AMI. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html">Understand AMI billing information</a> in the <i>Amazon EC2 User Guide</i>. When creating an AMI from a snapshot, the <code>RegisterImage</code> operation derives the correct billing information from the snapshot's metadata, but this requires the appropriate metadata to be present. To verify if the correct billing information was applied, check the <code>PlatformDetails</code> field on the new AMI. If the field is empty or doesn't match the expected operating system code (for example, Windows, RedHat, SUSE, or SQL), the AMI creation was unsuccessful, and you should discard the AMI and instead create the AMI from an instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html#how-to-create-ebs-ami">Create an AMI from an instance </a> in the <i>Amazon EC2 User Guide</i>.</p> <p>If you purchase a Reserved Instance to apply to an On-Demand Instance that was launched from an AMI with a billing product code, make sure that the Reserved Instance has the matching billing product code. If you purchase a Reserved Instance without the matching billing product code, the Reserved Instance is not applied to the On-Demand Instance. For information about how to obtain the platform details and billing information of an AMI, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html">Understand AMI billing information</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 registerimage" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 registerimage | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Registers a set of tag keys to include in scheduled event notifications for your resources. </p> <p>To remove tags, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DeregisterInstanceEventNotificationAttributes.html">DeregisterInstanceEventNotificationAttributes</a>.</p>
export def "aws ec2 registerinstanceeventnotificationattributes" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 registerinstanceeventnotificationattributes | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Registers members (network interfaces) with the transit gateway multicast group. A member is a network interface associated with a supported EC2 instance that receives multicast traffic. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-multicast-overview.html">Multicast on transit gateways</a> in the <i>Amazon Web Services Transit Gateways Guide</i>.</p> <p>After you add the members, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html">SearchTransitGatewayMulticastGroups</a> to verify that the members were added to the transit gateway multicast group.</p>
export def "aws ec2 registertransitgatewaymulticastgroupmembers" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 registertransitgatewaymulticastgroupmembers | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Registers sources (network interfaces) with the specified transit gateway multicast group.</p> <p>A multicast source is a network interface attached to a supported instance that sends multicast traffic. For more information about supported instances, see <a href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-multicast-overview.html">Multicast on transit gateways</a> in the <i>Amazon Web Services Transit Gateways Guide</i>.</p> <p>After you add the source, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html">SearchTransitGatewayMulticastGroups</a> to verify that the source was added to the multicast group.</p>
export def "aws ec2 registertransitgatewaymulticastgroupsources" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 registertransitgatewaymulticastgroupsources | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Rejects a request to assign billing of the available capacity of a shared Capacity Reservation to your account. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/assign-billing.html"> Billing assignment for shared Amazon EC2 Capacity Reservations</a>.</p>
export def "aws ec2 rejectcapacityreservationbillingownership" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 rejectcapacityreservationbillingownership | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Rejects a request to associate cross-account subnets with a transit gateway multicast domain.</p>
export def "aws ec2 rejecttransitgatewaymulticastdomainassociations" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 rejecttransitgatewaymulticastdomainassociations | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Rejects a transit gateway peering attachment request.</p>
export def "aws ec2 rejecttransitgatewaypeeringattachment" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 rejecttransitgatewaypeeringattachment | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Rejects a request to attach a VPC to a transit gateway.</p> <p>The VPC attachment must be in the <code>pendingAcceptance</code> state. Use <a>DescribeTransitGatewayVpcAttachments</a> to view your pending VPC attachment requests. Use <a>AcceptTransitGatewayVpcAttachment</a> to accept a VPC attachment request.</p>
export def "aws ec2 rejecttransitgatewayvpcattachment" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 rejecttransitgatewayvpcattachment | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Rejects VPC endpoint connection requests to your VPC endpoint service.</p>
export def "aws ec2 rejectvpcendpointconnections" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 rejectvpcendpointconnections | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Rejects a VPC peering connection request. The VPC peering connection must be in the <code>pending-acceptance</code> state. Use the <a>DescribeVpcPeeringConnections</a> request to view your outstanding VPC peering connection requests. To delete an active VPC peering connection, or to delete a VPC peering connection request that you initiated, use <a>DeleteVpcPeeringConnection</a>.</p>
export def "aws ec2 rejectvpcpeeringconnection" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 rejectvpcpeeringconnection | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Releases the specified Elastic IP address.</p> <p>[Default VPC] Releasing an Elastic IP address automatically disassociates it from any instance that it's associated with. Alternatively, you can disassociate an Elastic IP address without releasing it.</p> <p>[Nondefault VPC] You must disassociate the Elastic IP address before you can release it. Otherwise, Amazon EC2 returns an error (<code>InvalidIPAddress.InUse</code>).</p> <p>After releasing an Elastic IP address, it is released to the IP address pool. Be sure to update your DNS records and any servers or devices that communicate with the address. If you attempt to release an Elastic IP address that you already released, you'll get an <code>AuthFailure</code> error if the address is already allocated to another Amazon Web Services account.</p> <p>After you release an Elastic IP address, you might be able to recover it. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing-eips-releasing.html">Release an Elastic IP address</a>.</p>
export def "aws ec2 releaseaddress" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 releaseaddress | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>When you no longer want to use an On-Demand Dedicated Host it can be released. On-Demand billing is stopped and the host goes into <code>released</code> state. The host ID of Dedicated Hosts that have been released can no longer be specified in another request, for example, to modify the host. You must stop or terminate all instances on a host before it can be released.</p> <p>When Dedicated Hosts are released, it may take some time for them to stop counting toward your limit and you may receive capacity errors when trying to allocate new Dedicated Hosts. Wait a few minutes and then try again.</p> <p>Released hosts still appear in a <a>DescribeHosts</a> response.</p>
export def "aws ec2 releasehosts" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 releasehosts | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Release an allocation within an IPAM pool. The Region you use should be the IPAM pool locale. The locale is the Amazon Web Services Region where this IPAM pool is available for allocations. You can only use this action to release manual allocations. To remove an allocation for a resource without deleting the resource, set its monitored state to false using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyIpamResourceCidr.html">ModifyIpamResourceCidr</a>. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/release-alloc-ipam.html">Release an allocation</a> in the <i>Amazon VPC IPAM User Guide</i>. </p> <note> <p>All EC2 API actions follow an <a href="https://docs.aws.amazon.com/ec2/latest/devguide/eventual-consistency.html">eventual consistency</a> model.</p> </note>
export def "aws ec2 releaseipampoolallocation" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 releaseipampoolallocation | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Replaces an IAM instance profile for the specified running instance. You can use this action to change the IAM instance profile that's associated with an instance without having to disassociate the existing IAM instance profile first.</p> <p>Use <a>DescribeIamInstanceProfileAssociations</a> to get the association ID.</p>
export def "aws ec2 replaceiaminstanceprofileassociation" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 replaceiaminstanceprofileassociation | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Sets or replaces the criteria for Allowed AMIs.</p> <note> <p>The Allowed AMIs feature does not restrict the AMIs owned by your account. Regardless of the criteria you set, the AMIs created by your account will always be discoverable and usable by users in your account.</p> </note> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-allowed-amis.html">Control the discovery and use of AMIs in Amazon EC2 with Allowed AMIs</a> in <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 replaceimagecriteriainallowedimagessettings" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 replaceimagecriteriainallowedimagessettings | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Changes which network ACL a subnet is associated with. By default when you create a subnet, it's automatically associated with the default network ACL. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html">Network ACLs</a> in the <i>Amazon VPC User Guide</i>.</p> <p>This is an idempotent operation.</p>
export def "aws ec2 replacenetworkaclassociation" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 replacenetworkaclassociation | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Replaces an entry (rule) in a network ACL. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html">Network ACLs</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 replacenetworkaclentry" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 replacenetworkaclentry | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Replaces an existing route within a route table in a VPC.</p> <p>You must specify either a destination CIDR block or a prefix list ID. You must also specify exactly one of the resources from the parameter list, or reset the local route to its default target.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route tables</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 replaceroute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 replaceroute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Changes the route table associated with a given subnet, internet gateway, or virtual private gateway in a VPC. After the operation completes, the subnet or gateway uses the routes in the new route table. For more information about route tables, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route tables</a> in the <i>Amazon VPC User Guide</i>.</p> <p>You can also use this operation to change which table is the main route table in the VPC. Specify the main route table's association ID and the route table ID of the new main route table.</p>
export def "aws ec2 replaceroutetableassociation" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 replaceroutetableassociation | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Replaces the specified route in the specified transit gateway route table.</p>
export def "aws ec2 replacetransitgatewayroute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 replacetransitgatewayroute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Trigger replacement of specified VPN tunnel.</p>
export def "aws ec2 replacevpntunnel" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 replacevpntunnel | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Submits feedback about the status of an instance. The instance must be in the <code>running</code> state. If your experience with the instance differs from the instance status returned by <a>DescribeInstanceStatus</a>, use <a>ReportInstanceStatus</a> to report your experience with the instance. Amazon EC2 collects this information to improve the accuracy of status checks.</p> <p>Use of this action does not change the value returned by <a>DescribeInstanceStatus</a>.</p>
export def "aws ec2 reportinstancestatus" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 reportinstancestatus | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a Spot Fleet request.</p> <p>The Spot Fleet request specifies the total target capacity and the On-Demand target capacity. Amazon EC2 calculates the difference between the total capacity and On-Demand capacity, and launches the difference as Spot capacity.</p> <p>You can submit a single request that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet.</p> <p>By default, the Spot Fleet requests Spot Instances in the Spot Instance pool where the price per unit is the lowest. Each launch specification can include its own instance weighting that reflects the value of the instance type to your application workload.</p> <p>Alternatively, you can specify that the Spot Fleet distribute the target capacity across the Spot pools included in its launch specifications. By ensuring that the Spot Instances in your Spot Fleet are in different Spot pools, you can improve the availability of your fleet.</p> <p>You can specify tags for the Spot Fleet request and instances launched by the fleet. You cannot tag other resource types in a Spot Fleet request because only the <code>spot-fleet-request</code> and <code>instance</code> resource types are supported.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html">Spot Fleet requests</a> in the <i>Amazon EC2 User Guide</i>.</p> <important> <p>We strongly discourage using the RequestSpotFleet API because it is a legacy API with no planned investment. For options for requesting Spot Instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-best-practices.html#which-spot-request-method-to-use">Which is the best Spot request method to use?</a> in the <i>Amazon EC2 User Guide</i>.</p> </important>
export def "aws ec2 requestspotfleet" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 requestspotfleet | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Creates a Spot Instance request.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html">Work with Spot Instance</a> in the <i>Amazon EC2 User Guide</i>.</p> <important> <p>We strongly discourage using the RequestSpotInstances API because it is a legacy API with no planned investment. For options for requesting Spot Instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-best-practices.html#which-spot-request-method-to-use">Which is the best Spot request method to use?</a> in the <i>Amazon EC2 User Guide</i>.</p> </important>
export def "aws ec2 requestspotinstances" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 requestspotinstances | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Resets the attribute of the specified IP address. For requirements, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#Using_Elastic_Addressing_Reverse_DNS">Using reverse DNS for email applications</a>.</p>
export def "aws ec2 resetaddressattribute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 resetaddressattribute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Resets the default KMS key for EBS encryption for your account in this Region to the Amazon Web Services managed KMS key for EBS.</p> <p>After resetting the default KMS key to the Amazon Web Services managed KMS key, you can continue to encrypt by a customer managed KMS key by specifying it when you create the volume. For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption.html">Amazon EBS encryption</a> in the <i>Amazon EBS User Guide</i>.</p>
export def "aws ec2 resetebsdefaultkmskeyid" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 resetebsdefaultkmskeyid | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Resets the specified attribute of the specified Amazon FPGA Image (AFI) to its default value. You can only reset the load permission attribute.</p>
export def "aws ec2 resetfpgaimageattribute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 resetfpgaimageattribute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Resets an attribute of an AMI to its default value.</p>
export def "aws ec2 resetimageattribute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 resetimageattribute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Resets an attribute of an instance to its default value. To reset the <code>kernel</code> or <code>ramdisk</code>, the instance must be in a stopped state. To reset the <code>sourceDestCheck</code>, the instance can be either running or stopped.</p> <p>The <code>sourceDestCheck</code> attribute controls whether source/destination checking is enabled. The default value is <code>true</code>, which means checking is enabled. This value must be <code>false</code> for a NAT instance to perform NAT. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html">NAT instances</a> in the <i>Amazon VPC User Guide</i>.</p>
export def "aws ec2 resetinstanceattribute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 resetinstanceattribute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Resets a network interface attribute. You can specify only one attribute at a time.</p>
export def "aws ec2 resetnetworkinterfaceattribute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 resetnetworkinterfaceattribute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Resets permission settings for the specified snapshot.</p> <p>For more information about modifying snapshot permissions, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/ebs-modifying-snapshot-permissions.html">Share a snapshot</a> in the <i>Amazon EBS User Guide</i>.</p>
export def "aws ec2 resetsnapshotattribute" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 resetsnapshotattribute | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <note> <p>This action is deprecated.</p> </note> <p>Restores an Elastic IP address that was previously moved to the EC2-VPC platform back to the EC2-Classic platform. You cannot move an Elastic IP address that was originally allocated for use in EC2-VPC. The Elastic IP address must not be associated with an instance or network interface.</p>
export def "aws ec2 restoreaddresstoclassic" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 restoreaddresstoclassic | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Restores an AMI from the Recycle Bin. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/recycle-bin.html">Recover deleted Amazon EBS snapshots and EBS-back AMIs with Recycle Bin</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 restoreimagefromrecyclebin" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 restoreimagefromrecyclebin | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Restores the entries from a previous version of a managed prefix list to a new version of the prefix list.</p>
export def "aws ec2 restoremanagedprefixlistversion" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 restoremanagedprefixlistversion | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Restores a snapshot from the Recycle Bin. For more information, see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/recycle-bin-working-with-snaps.html#recycle-bin-restore-snaps">Restore snapshots from the Recycle Bin</a> in the <i>Amazon EBS User Guide</i>.</p>
export def "aws ec2 restoresnapshotfromrecyclebin" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 restoresnapshotfromrecyclebin | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Restores an archived Amazon EBS snapshot for use temporarily or permanently, or modifies the restore period or restore type for a snapshot that was previously temporarily restored.</p> <p>For more information see <a href="https://docs.aws.amazon.com/ebs/latest/userguide/working-with-snapshot-archiving.html#restore-archived-snapshot"> Restore an archived snapshot</a> and <a href="https://docs.aws.amazon.com/ebs/latest/userguide/working-with-snapshot-archiving.html#modify-temp-restore-period"> modify the restore period or restore type for a temporarily restored snapshot</a> in the <i>Amazon EBS User Guide</i>.</p>
export def "aws ec2 restoresnapshottier" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 restoresnapshottier | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Removes an ingress authorization rule from a Client VPN endpoint. </p>
export def "aws ec2 revokeclientvpningress" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 revokeclientvpningress | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Removes the specified outbound (egress) rules from the specified security group.</p> <p>You can specify rules using either rule IDs or security group rule properties. If you use rule properties, the values that you specify (for example, ports) must match the existing rule's values exactly. Each rule has a protocol, from and to ports, and destination (CIDR range, security group, or prefix list). For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code. If the security group rule has a description, you do not need to specify the description to revoke the rule.</p> <p>For a default VPC, if the values you specify do not match the existing rule's values, no error is returned, and the output describes the security group rules that were not revoked.</p> <p>Amazon Web Services recommends that you describe the security group to verify that the rules were removed.</p> <p>Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.</p>
export def "aws ec2 revokesecuritygroupegress" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 revokesecuritygroupegress | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Removes the specified inbound (ingress) rules from a security group.</p> <p>You can specify rules using either rule IDs or security group rule properties. If you use rule properties, the values that you specify (for example, ports) must match the existing rule's values exactly. Each rule has a protocol, from and to ports, and source (CIDR range, security group, or prefix list). For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code. If the security group rule has a description, you do not need to specify the description to revoke the rule.</p> <p>For a default VPC, if the values you specify do not match the existing rule's values, no error is returned, and the output describes the security group rules that were not revoked.</p> <p>For a non-default VPC, if the values you specify do not match the existing rule's values, an <code>InvalidPermission.NotFound</code> client error is returned, and no rules are revoked.</p> <p>Amazon Web Services recommends that you describe the security group to verify that the rules were removed.</p> <p>Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.</p>
export def "aws ec2 revokesecuritygroupingress" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 revokesecuritygroupingress | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Launches the specified number of instances using an AMI for which you have permissions.</p> <p>You can specify a number of options, or leave the default options. The following rules apply:</p> <ul> <li> <p>If you don't specify a subnet ID, we choose a default subnet from your default VPC for you. If you don't have a default VPC, you must specify a subnet ID in the request.</p> </li> <li> <p>All instances have a network interface with a primary private IPv4 address. If you don't specify this address, we choose one from the IPv4 range of your subnet.</p> </li> <li> <p>Not all instance types support IPv6 addresses. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance types</a>.</p> </li> <li> <p>If you don't specify a security group ID, we use the default security group for the VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Security groups</a>.</p> </li> <li> <p>If any of the AMIs have a product code attached for which the user has not subscribed, the request fails.</p> </li> </ul> <p>You can create a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">launch template</a>, which is a resource that contains the parameters to launch an instance. When you launch an instance using <a>RunInstances</a>, you can specify the launch template instead of specifying the launch parameters.</p> <p>To ensure faster instance launches, break up large requests into smaller batches. For example, create five separate launch requests for 100 instances each instead of one launch request for 500 instances.</p> <p> <code>RunInstances</code> is subject to both request rate limiting and resource rate limiting. For more information, see <a href="https://docs.aws.amazon.com/ec2/latest/devguide/ec2-api-throttling.html">Request throttling</a>.</p> <p>An instance is ready for you to use when it's in the <code>running</code> state. You can check the state of your instance using <a>DescribeInstances</a>. You can tag instances and EBS volumes during launch, after launch, or both. For more information, see <a>CreateTags</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging your Amazon EC2 resources</a>.</p> <p>Linux instances have access to the public key of the key pair at boot. You can use this key to provide secure access to the instance. Amazon EC2 public images use this feature to provide secure access without passwords. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key pairs</a>.</p> <p>For troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_InstanceStraightToTerminated.html">What to do if an instance immediately terminates</a>, and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html">Troubleshooting connecting to your instance</a>.</p>
export def "aws ec2 runinstances" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 runinstances | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Launches the specified Scheduled Instances.</p> <p>Before you can launch a Scheduled Instance, you must purchase it and obtain an identifier using <a>PurchaseScheduledInstances</a>.</p> <p>You must launch a Scheduled Instance during its scheduled time period. You can't stop or reboot a Scheduled Instance, but you can terminate it as needed. If you terminate a Scheduled Instance before the current scheduled time period ends, you can launch it again after a few minutes.</p>
export def "aws ec2 runscheduledinstances" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 runscheduledinstances | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Searches for routes in the specified local gateway route table.</p>
export def "aws ec2 searchlocalgatewayroutes" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 searchlocalgatewayroutes | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Searches one or more transit gateway multicast groups and returns the group membership information.</p>
export def "aws ec2 searchtransitgatewaymulticastgroups" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 searchtransitgatewaymulticastgroups | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Searches for routes in the specified transit gateway route table.</p>
export def "aws ec2 searchtransitgatewayroutes" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 searchtransitgatewayroutes | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Sends a diagnostic interrupt to the specified Amazon EC2 instance to trigger a <i>kernel panic</i> (on Linux instances), or a <i>blue screen</i>/<i>stop error</i> (on Windows instances). For instances based on Intel and AMD processors, the interrupt is received as a <i>non-maskable interrupt</i> (NMI).</p> <p>In general, the operating system crashes and reboots when a kernel panic or stop error is triggered. The operating system can also be configured to perform diagnostic tasks, such as generating a memory dump file, loading a secondary kernel, or obtaining a call trace.</p> <p>Before sending a diagnostic interrupt to your instance, ensure that its operating system is configured to perform the required diagnostic tasks.</p> <p>For more information about configuring your operating system to generate a crash dump when a kernel panic or stop error occurs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/diagnostic-interrupt.html">Send a diagnostic interrupt (for advanced users)</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 senddiagnosticinterrupt" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 senddiagnosticinterrupt | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Generates an account status report. The report is generated asynchronously, and can take several hours to complete.</p> <p>The report provides the current status of all attributes supported by declarative policies for the accounts within the specified scope. The scope is determined by the specified <code>TargetId</code>, which can represent an individual account, or all the accounts that fall under the specified organizational unit (OU) or root (the entire Amazon Web Services Organization).</p> <p>The report is saved to your specified S3 bucket, using the following path structure (with the capitalized placeholders representing your specific values):</p> <p> <code>s3://AMZN-S3-DEMO-BUCKET/YOUR-OPTIONAL-S3-PREFIX/ec2_TARGETID_REPORTID_YYYYMMDDTHHMMZ.csv</code> </p> <p class="title"> <b>Prerequisites for generating a report</b> </p> <ul> <li> <p>The <code>StartDeclarativePoliciesReport</code> API can only be called by the management account or delegated administrators for the organization.</p> </li> <li> <p>An S3 bucket must be available before generating the report (you can create a new one or use an existing one), it must be in the same Region where the report generation request is made, and it must have an appropriate bucket policy. For a sample S3 policy, see <i>Sample Amazon S3 policy</i> under <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_StartDeclarativePoliciesReport.html#API_StartDeclarativePoliciesReport_Examples">Examples</a>.</p> </li> <li> <p>Trusted access must be enabled for the service for which the declarative policy will enforce a baseline configuration. If you use the Amazon Web Services Organizations console, this is done automatically when you enable declarative policies. The API uses the following service principal to identify the EC2 service: <code>ec2.amazonaws.com</code>. For more information on how to enable trusted access with the Amazon Web Services CLI and Amazon Web Services SDKs, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html">Using Organizations with other Amazon Web Services services</a> in the <i>Amazon Web Services Organizations User Guide</i>.</p> </li> <li> <p>Only one report per organization can be generated at a time. Attempting to generate a report while another is in progress will result in an error.</p> </li> </ul> <p>For more information, including the required IAM permissions to run this API, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_declarative_status-report.html">Generating the account status report for declarative policies</a> in the <i>Amazon Web Services Organizations User Guide</i>.</p>
export def "aws ec2 startdeclarativepoliciesreport" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 startdeclarativepoliciesreport | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Starts an Amazon EBS-backed instance that you've previously stopped.</p> <p>Instances that use Amazon EBS volumes as their root devices can be quickly stopped and started. When an instance is stopped, the compute resources are released and you are not billed for instance usage. However, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. You can restart your instance at any time. Every time you start your instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage.</p> <p>Before stopping an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM.</p> <p>Performing this operation on an instance that uses an instance store as its root device returns an error.</p> <p>If you attempt to start a T3 instance with <code>host</code> tenancy and the <code>unlimited</code> CPU credit option, the request fails. The <code>unlimited</code> CPU credit option is not supported on Dedicated Hosts. Before you start the instance, either change its CPU credit option to <code>standard</code>, or change its tenancy to <code>default</code> or <code>dedicated</code>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html">Stop and start Amazon EC2 instances</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 startinstances" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 startinstances | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Starts analyzing the specified Network Access Scope.</p>
export def "aws ec2 startnetworkinsightsaccessscopeanalysis" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 startnetworkinsightsaccessscopeanalysis | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Starts analyzing the specified path. If the path is reachable, the operation returns the shortest feasible path.</p>
export def "aws ec2 startnetworkinsightsanalysis" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 startnetworkinsightsanalysis | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Initiates the verification process to prove that the service provider owns the private DNS name domain for the endpoint service.</p> <p>The service provider must successfully perform the verification before the consumer can use the name to access the service.</p> <p>Before the service provider runs this command, they must add a record to the DNS server.</p>
export def "aws ec2 startvpcendpointserviceprivatednsverification" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 startvpcendpointserviceprivatednsverification | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Stops an Amazon EBS-backed instance. You can restart your instance at any time using the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_StartInstances.html">StartInstances</a> API. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html">Stop and start Amazon EC2 instances</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>When you stop or hibernate an instance, we shut it down. By default, this includes a graceful operating system (OS) shutdown. To bypass the graceful shutdown, use the <code>skipOsShutdown</code> parameter; however, this might risk data integrity.</p> <p>You can use the StopInstances operation together with the <code>Hibernate</code> parameter to hibernate an instance if the instance is <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enabling-hibernation.html">enabled for hibernation</a> and meets the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/hibernating-prerequisites.html">hibernation prerequisites</a>. Stopping an instance doesn't preserve data stored in RAM, while hibernation does. If hibernation fails, a normal shutdown occurs. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate your Amazon EC2 instance</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>If your instance appears stuck in the <code>stopping</code> state, there might be an issue with the underlying host computer. You can use the StopInstances operation together with the Force parameter to force stop your instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesStopping.html">Troubleshoot Amazon EC2 instance stop issues</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>Stopping and hibernating an instance differs from rebooting or terminating it. For example, a stopped or hibernated instance retains its root volume and any data volumes, unlike terminated instances where these volumes are automatically deleted. For more information about the differences between stopping, hibernating, rebooting, and terminating instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Amazon EC2 instance state changes</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>We don't charge for instance usage or data transfer fees when an instance is stopped. However, the root volume and any data volumes remain and continue to persist your data, and you're charged for volume usage. Every time you start your instance, Amazon EC2 charges a one-minute minimum for instance usage, followed by per-second billing.</p> <p>You can't stop or hibernate instance store-backed instances.</p>
export def "aws ec2 stopinstances" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 stopinstances | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Terminates active Client VPN endpoint connections. This action can be used to terminate a specific client connection, or up to five connections established by a specific user.</p>
export def "aws ec2 terminateclientvpnconnections" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 terminateclientvpnconnections | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Shuts down the specified instances. This operation is <a href="https://docs.aws.amazon.com/ec2/latest/devguide/ec2-api-idempotency.html">idempotent</a>; if you terminate an instance more than once, each call succeeds.</p> <p>If you specify multiple instances and the request fails (for example, because of a single incorrect instance ID), none of the instances are terminated.</p> <p>If you terminate multiple instances across multiple Availability Zones, and one or more of the specified instances are enabled for termination protection, the request fails with the following results:</p> <ul> <li> <p>The specified instances that are in the same Availability Zone as the protected instance are not terminated.</p> </li> <li> <p>The specified instances that are in different Availability Zones, where no other specified instances are protected, are successfully terminated.</p> </li> </ul> <p>For example, say you have the following instances:</p> <ul> <li> <p>Instance A: <code>us-east-1a</code>; Not protected</p> </li> <li> <p>Instance B: <code>us-east-1a</code>; Not protected</p> </li> <li> <p>Instance C: <code>us-east-1b</code>; Protected</p> </li> <li> <p>Instance D: <code>us-east-1b</code>; not protected</p> </li> </ul> <p>If you attempt to terminate all of these instances in the same request, the request reports failure with the following results:</p> <ul> <li> <p>Instance A and Instance B are successfully terminated because none of the specified instances in <code>us-east-1a</code> are enabled for termination protection.</p> </li> <li> <p>Instance C and Instance D fail to terminate because at least one of the specified instances in <code>us-east-1b</code> (Instance C) is enabled for termination protection.</p> </li> </ul> <p>Terminated instances remain visible after termination (for approximately one hour).</p> <p>By default, Amazon EC2 deletes all EBS volumes that were attached when the instance launched. Volumes attached after instance launch continue running.</p> <p>By default, the TerminateInstances operation includes a graceful operating system (OS) shutdown. To bypass the graceful shutdown, use the <code>skipOsShutdown</code> parameter; however, this might risk data integrity.</p> <p>You can stop, start, and terminate EBS-backed instances. You can only terminate instance store-backed instances. What happens to an instance differs if you stop or terminate it. For example, when you stop an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, any attached EBS volumes with the <code>DeleteOnTermination</code> block device mapping parameter set to <code>true</code> are automatically deleted. For more information about the differences between stopping and terminating instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Amazon EC2 instance state changes</a> in the <i>Amazon EC2 User Guide</i>.</p> <p>When you terminate an instance, we attempt to terminate it forcibly after a short while. If your instance appears stuck in the shutting-down state after a period of time, there might be an issue with the underlying host computer. For more information about terminating and troubleshooting terminating your instances, see <a href="https://docs.aws.amazon.com/">Terminate Amazon EC2 instances</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesShuttingDown.html">Troubleshooting terminating your instance</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 terminateinstances" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 terminateinstances | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Unassigns the specified IPv6 addresses or Prefix Delegation prefixes from a network interface.</p>
export def "aws ec2 unassignipv6addresses" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 unassignipv6addresses | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Unassigns the specified secondary private IP addresses or IPv4 Prefix Delegation prefixes from a network interface.</p>
export def "aws ec2 unassignprivateipaddresses" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 unassignprivateipaddresses | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Unassigns secondary private IPv4 addresses from a private NAT gateway. You cannot unassign your primary private IP. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/nat-gateway-working-with.html#nat-gateway-edit-secondary">Edit secondary IP address associations</a> in the <i>Amazon VPC User Guide</i>.</p> <p>While unassigning is in progress, you cannot assign/unassign additional IP addresses while the connections are being drained. You are, however, allowed to delete the NAT gateway.</p> <p>A private IP address will only be released at the end of MaxDrainDurationSeconds. The private IP addresses stay associated and support the existing connections, but do not support any new connections (new connections are distributed across the remaining assigned private IP address). After the existing connections drain out, the private IP addresses are released.</p> <p/> <p/>
export def "aws ec2 unassignprivatenatgatewayaddress" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 unassignprivatenatgatewayaddress | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Unlocks a snapshot that is locked in governance mode or that is locked in compliance mode but still in the cooling-off period. You can't unlock a snapshot that is locked in compliance mode after the cooling-off period has expired.</p>
export def "aws ec2 unlocksnapshot" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 unlocksnapshot | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Disables detailed monitoring for a running instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitoring your instances and volumes</a> in the <i>Amazon EC2 User Guide</i>.</p>
export def "aws ec2 unmonitorinstances" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 unmonitorinstances | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Updates the description of an egress (outbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously. You can remove a description for a security group rule by omitting the description parameter in the request.</p>
export def "aws ec2 updatesecuritygroupruledescriptionsegress" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 updatesecuritygroupruledescriptionsegress | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Updates the description of an ingress (inbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously. You can remove a description for a security group rule by omitting the description parameter in the request.</p>
export def "aws ec2 updatesecuritygroupruledescriptionsingress" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 updatesecuritygroupruledescriptionsingress | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# <p>Stops advertising an address range that is provisioned as an address pool.</p> <p>You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time.</p> <p>It can take a few minutes before traffic to the specified addresses stops routing to Amazon Web Services because of BGP propagation delays.</p>
export def "aws ec2 withdrawbyoipcidr" []: nothing -> any {
    # Check if in mock mode - TODO: Implement proper mock checking
    # Execute AWS CLI with error handling
    try {
        aws ec2 withdrawbyoipcidr | from json
    } catch { |err|
        error make {
            msg: $"AWS CLI error: { $err.msg }",
            label: {
                text: "AWS operation failed",
                span: (metadata $err).span
            }
        }
    }
}

# AWS EC2 Service Module - End
# Use 'aws ec2 info' to get service information
# Use 'help aws ec2' to see available operations
# Simple DynamoDB Auto-Generator
# Generates AWS DynamoDB module using proven framework approach

# Generate DynamoDB module quickly
export def generate_dynamodb_module []: nothing -> string {
    print "🚀 Auto-generating AWS DynamoDB module..."
    print "========================================"
    print ""
    
    let dynamodb_commands = [
        "list-tables"
        "describe-table" 
        "create-table"
        "delete-table"
        "put-item"
        "get-item"
        "delete-item"
        "update-item"
        "query"
        "scan"
        "batch-get-item"
        "batch-write-item"
    ]
    
    print $"📋 Generating ($dynamodb_commands | length) core DynamoDB commands..."
    
    let module_content = "# AWS DynamoDB Module - Auto-generated
# Generated by: Simple DynamoDB Auto-Generation Framework

# ============================================================================
# DYNAMODB LIST TABLES
# ============================================================================
export def \"aws dynamodb list-tables\" [
    --limit: int = 100
    --exclusive-start-table-name: string = \"\"
]: nothing -> list<string> {
    if ($env.DYNAMODB_MOCK_MODE? | default \"false\") == \"true\" {
        [\"test-table-1\", \"test-table-2\", \"user-profiles\", \"order-data\"]
    } else {
        mut args = [\"dynamodb\", \"list-tables\"]
        if $limit != 100 { $args = ($args | append [\"--limit\", ($limit | into string)]) }
        if ($exclusive_start_table_name | str length) > 0 { 
            $args = ($args | append [\"--exclusive-start-table-name\", $exclusive_start_table_name]) 
        }
        
        try {
            let result = (run-external \"aws\" ...$args | complete)
            if $result.exit_code == 0 {
                ($result.stdout | from json | get TableNames)
            } else {
                error make { msg: $\"DynamoDB error: ($result.stderr)\" }
            }
        } catch { |error|
            error make { msg: $\"Failed to execute dynamodb list-tables: ($error.msg)\" }
        }
    }
}

# ============================================================================
# DYNAMODB DESCRIBE TABLE
# ============================================================================
export def \"aws dynamodb describe-table\" [
    table_name: string
]: nothing -> record {
    if ($env.DYNAMODB_MOCK_MODE? | default \"false\") == \"true\" {
        {
            table_name: $table_name
            table_status: \"ACTIVE\"
            creation_date_time: \"2024-01-15T10:00:00Z\"
            item_count: 1000
            table_size_bytes: 50000
            key_schema: [{attribute_name: \"id\", key_type: \"HASH\"}]
            provisioned_throughput: {read_capacity_units: 5, write_capacity_units: 5}
            mock: true
        }
    } else {
        let args = [\"dynamodb\", \"describe-table\", \"--table-name\", $table_name]
        
        try {
            let result = (run-external \"aws\" ...$args | complete)
            if $result.exit_code == 0 {
                ($result.stdout | from json | get Table)
            } else {
                error make { msg: $\"DynamoDB error: ($result.stderr)\" }
            }
        } catch { |error|
            error make { msg: $\"Failed to execute dynamodb describe-table: ($error.msg)\" }
        }
    }
}

# ============================================================================
# DYNAMODB CREATE TABLE
# ============================================================================
export def \"aws dynamodb create-table\" [
    table_name: string
    attribute_definitions: string
    key_schema: string
    --billing-mode: string = \"PAY_PER_REQUEST\"
]: nothing -> record {
    if ($env.DYNAMODB_MOCK_MODE? | default \"false\") == \"true\" {
        {
            table_description: {
                table_name: $table_name
                table_status: \"CREATING\"
                creation_date_time: \"2024-01-15T10:00:00Z\"
                key_schema: ($key_schema | from json)
                attribute_definitions: ($attribute_definitions | from json)
                billing_mode_summary: {billing_mode: $billing_mode}
            }
            mock: true
        }
    } else {
        mut args = [\"dynamodb\", \"create-table\", \"--table-name\", $table_name, \"--attribute-definitions\", $attribute_definitions, \"--key-schema\", $key_schema, \"--billing-mode\", $billing_mode]
        
        try {
            let result = (run-external \"aws\" ...$args | complete)
            if $result.exit_code == 0 {
                ($result.stdout | from json)
            } else {
                error make { msg: $\"DynamoDB error: ($result.stderr)\" }
            }
        } catch { |error|
            error make { msg: $\"Failed to execute dynamodb create-table: ($error.msg)\" }
        }
    }
}

# ============================================================================
# DYNAMODB DELETE TABLE
# ============================================================================
export def \"aws dynamodb delete-table\" [
    table_name: string
]: nothing -> record {
    if ($env.DYNAMODB_MOCK_MODE? | default \"false\") == \"true\" {
        {
            table_description: {
                table_name: $table_name
                table_status: \"DELETING\"
            }
            mock: true
        }
    } else {
        let args = [\"dynamodb\", \"delete-table\", \"--table-name\", $table_name]
        
        try {
            let result = (run-external \"aws\" ...$args | complete)
            if $result.exit_code == 0 {
                ($result.stdout | from json)
            } else {
                error make { msg: $\"DynamoDB error: ($result.stderr)\" }
            }
        } catch { |error|
            error make { msg: $\"Failed to execute dynamodb delete-table: ($error.msg)\" }
        }
    }
}

# ============================================================================
# DYNAMODB PUT ITEM
# ============================================================================
export def \"aws dynamodb put-item\" [
    table_name: string
    item: string
]: nothing -> record {
    if ($env.DYNAMODB_MOCK_MODE? | default \"false\") == \"true\" {
        {
            consumed_capacity: {table_name: $table_name, capacity_units: 1.0}
            item: ($item | from json)
            mock: true
        }
    } else {
        let args = [\"dynamodb\", \"put-item\", \"--table-name\", $table_name, \"--item\", $item]
        
        try {
            let result = (run-external \"aws\" ...$args | complete)
            if $result.exit_code == 0 {
                ($result.stdout | from json)
            } else {
                error make { msg: $\"DynamoDB error: ($result.stderr)\" }
            }
        } catch { |error|
            error make { msg: $\"Failed to execute dynamodb put-item: ($error.msg)\" }
        }
    }
}

# ============================================================================
# DYNAMODB GET ITEM
# ============================================================================
export def \"aws dynamodb get-item\" [
    table_name: string
    key: string
]: nothing -> record {
    if ($env.DYNAMODB_MOCK_MODE? | default \"false\") == \"true\" {
        {
            item: {id: {S: \"mock-id\"}, name: {S: \"Mock Item\"}, value: {N: \"42\"}}
            consumed_capacity: {table_name: $table_name, capacity_units: 0.5}
            mock: true
        }
    } else {
        let args = [\"dynamodb\", \"get-item\", \"--table-name\", $table_name, \"--key\", $key]
        
        try {
            let result = (run-external \"aws\" ...$args | complete)
            if $result.exit_code == 0 {
                ($result.stdout | from json)
            } else {
                error make { msg: $\"DynamoDB error: ($result.stderr)\" }
            }
        } catch { |error|
            error make { msg: $\"Failed to execute dynamodb get-item: ($error.msg)\" }
        }
    }
}

# ============================================================================
# DYNAMODB QUERY
# ============================================================================
export def \"aws dynamodb query\" [
    table_name: string
    key_condition_expression: string
    --index-name: string = \"\"
    --limit: int = 50
]: nothing -> record {
    if ($env.DYNAMODB_MOCK_MODE? | default \"false\") == \"true\" {
        {
            items: [
                {id: {S: \"item1\"}, name: {S: \"Mock Item 1\"}, value: {N: \"10\"}}
                {id: {S: \"item2\"}, name: {S: \"Mock Item 2\"}, value: {N: \"20\"}}
            ]
            count: 2
            scanned_count: 2
            consumed_capacity: {table_name: $table_name, capacity_units: 1.0}
            mock: true
        }
    } else {
        mut args = [\"dynamodb\", \"query\", \"--table-name\", $table_name, \"--key-condition-expression\", $key_condition_expression]
        if ($index_name | str length) > 0 { $args = ($args | append [\"--index-name\", $index_name]) }
        if $limit != 50 { $args = ($args | append [\"--limit\", ($limit | into string)]) }
        
        try {
            let result = (run-external \"aws\" ...$args | complete)
            if $result.exit_code == 0 {
                ($result.stdout | from json)
            } else {
                error make { msg: $\"DynamoDB error: ($result.stderr)\" }
            }
        } catch { |error|
            error make { msg: $\"Failed to execute dynamodb query: ($error.msg)\" }
        }
    }
}

# ============================================================================
# DYNAMODB SCAN
# ============================================================================
export def \"aws dynamodb scan\" [
    table_name: string
    --limit: int = 50
    --filter-expression: string = \"\"
]: nothing -> record {
    if ($env.DYNAMODB_MOCK_MODE? | default \"false\") == \"true\" {
        {
            items: [
                {id: {S: \"scan1\"}, name: {S: \"Scanned Item 1\"}}
                {id: {S: \"scan2\"}, name: {S: \"Scanned Item 2\"}}
                {id: {S: \"scan3\"}, name: {S: \"Scanned Item 3\"}}
            ]
            count: 3
            scanned_count: 3
            consumed_capacity: {table_name: $table_name, capacity_units: 2.0}
            mock: true
        }
    } else {
        mut args = [\"dynamodb\", \"scan\", \"--table-name\", $table_name]
        if $limit != 50 { $args = ($args | append [\"--limit\", ($limit | into string)]) }
        if ($filter_expression | str length) > 0 { $args = ($args | append [\"--filter-expression\", $filter_expression]) }
        
        try {
            let result = (run-external \"aws\" ...$args | complete)
            if $result.exit_code == 0 {
                ($result.stdout | from json)
            } else {
                error make { msg: $\"DynamoDB error: ($result.stderr)\" }
            }
        } catch { |error|
            error make { msg: $\"Failed to execute dynamodb scan: ($error.msg)\" }
        }
    }
}

# ============================================================================
# UTILITY FUNCTIONS
# ============================================================================

# Enable mock mode for testing
export def dynamodb-enable-mock-mode []: nothing -> nothing {
    $env.DYNAMODB_MOCK_MODE = \"true\"
}

# Disable mock mode for real AWS operations
export def dynamodb-disable-mock-mode []: nothing -> nothing {
    $env.DYNAMODB_MOCK_MODE = \"false\"
}

# Get current DynamoDB mode status
export def dynamodb-get-mode []: nothing -> string {
    if ($env.DYNAMODB_MOCK_MODE? | default \"false\") == \"true\" {
        \"mock\"
    } else {
        \"real\"
    }
}

# Helper to validate table name
export def validate-table-name [table_name: string]: nothing -> nothing {
    if ($table_name | str length) == 0 {
        error make { msg: \"Table name cannot be empty\" }
    }
    
    if ($table_name | str length) > 255 {
        error make { msg: \"Table name cannot exceed 255 characters\" }
    }
}
"
    
    # Save the module
    $module_content | save -f "aws/dynamodb.nu"
    
    print "✅ DynamoDB module auto-generated successfully!"
    print $"📄 Module size: ($module_content | str length) characters"
    print "📁 Saved to: aws/dynamodb.nu"
    print "🎯 Commands generated: 8 core DynamoDB operations"
    
    $module_content
}

# Test the generated DynamoDB module
export def test_dynamodb_module []: nothing -> record {
    print "🧪 Testing auto-generated DynamoDB module..."
    print ""
    
    # Generate the module
    let module_content = generate_dynamodb_module
    
    print ""
    print "🔧 Testing generated module functionality..."
    
    try {
        nu -c "
        use aws/dynamodb.nu *;
        dynamodb-enable-mock-mode;
        print 'Testing list-tables...';
        let tables = (aws dynamodb list-tables);
        print $'✅ Tables result: ($tables | length) tables';
        print 'Testing describe-table...';
        let table_info = (aws dynamodb describe-table 'test-table');
        print $'✅ Describe result: ($table_info.table_status)';
        print 'Testing put-item...';
        let put_result = (aws dynamodb put-item 'test-table' '{\"id\": {\"S\": \"test\"}}');
        print $'✅ Put result: ($put_result.mock)';
        "
        
        print "✅ Generated DynamoDB module working perfectly!"
        
        {
            generation_success: true
            module_size: ($module_content | str length)
            commands_generated: 8
            test_passed: true
        }
    } catch { |error|
        print $"❌ Module test failed: ($error.msg)"
        
        {
            generation_success: true
            module_size: ($module_content | str length)
            commands_generated: 8
            test_passed: false
            error: $error.msg
        }
    }
}
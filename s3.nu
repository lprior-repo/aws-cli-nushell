# AWS S3 Service Module
# Generated by Universal AWS Generator
# Operations: 108
# Generated: 2025-10-08 17:40:09
# Source: schema_file

# Configure mock mode for testing
# Note: Mock mode can be enabled by setting environment variable

# Service metadata
export def "aws s3 info" []: nothing -> record {
    {
        service: "s3",
        operations_count: 108,
        generated_at: "2025-10-08 17:40:09",
        mock_mode: false
    }
}

# Enhanced AWS error parsing with specific error code mapping
def parse-aws-error [err: record]: nothing -> record {
    let error_msg = ($err.msg | default "Unknown AWS error")
    let aws_error_patterns = {
        "AccessDenied": { code: "ACCESS_DENIED", suggestion: "Check IAM permissions" },
        "InvalidParameter": { code: "INVALID_PARAMETER", suggestion: "Verify parameter values" },
        "ResourceNotFound": { code: "NOT_FOUND", suggestion: "Check resource existence" },
        "ThrottlingException": { code: "THROTTLED", suggestion: "Reduce request rate" },
        "ServiceUnavailable": { code: "SERVICE_ERROR", suggestion: "Retry after delay" }
    }
    
    let matched_error = ($aws_error_patterns | transpose key value | where ($error_msg | str contains $it.key) | first)
    
    if ($matched_error | is-empty) {
        { code: "UNKNOWN_ERROR", message: $error_msg, suggestion: "Check AWS documentation" }
    } else {
        $matched_error.value | upsert message $error_msg
    }
}

# Transform AWS responses to Nushell-optimized data structures
def transform-aws-response []: record -> record {
    let response = $in
    # Convert PascalCase to snake_case for field names
    $response | transform-field-names | add-computed-fields
}

# Convert AWS PascalCase field names to Nushell snake_case
def transform-field-names []: record -> record {
    let input = $in
    $input | transpose key value | each { |item|
        let snake_key = ($item.key | str replace --all --regex '([A-Z])' '_$1' | str downcase | str replace --regex '^_' '')
        { $snake_key: $item.value }
    } | reduce --fold {} { |item, acc| $acc | merge $item }
}

# Add computed fields commonly used in Nushell pipelines
def add-computed-fields []: record -> record {
    let input = $in
    # Add timestamp conversions and computed fields
    $input | upsert computed_at (date now)
}

# Validate function signature and parameters
def validate-aws-parameters [params: record, operation: string]: nothing -> nothing {
    # Parameter validation based on AWS constraints
    let required_params = get-required-parameters $operation
    
    $required_params | each { |req_param|
        if not ($req_param in ($params | columns)) {
            error make {
                msg: $"Missing required parameter: ($req_param)",
                label: { text: "Parameter validation failed", span: (metadata $params).span }
            }
        }
    }
}

# Get required parameters for operation (extend with schema data)
def get-required-parameters [operation: string]: nothing -> list<string> {
    # This would be populated from AWS schema data
    []
}


# 
export def "aws s3 abortmultipartupload" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "abortmultipartupload",
            message: "Mock response for s3 abortmultipartupload"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api abortmultipartupload | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 completemultipartupload" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "completemultipartupload",
            message: "Mock response for s3 completemultipartupload"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api completemultipartupload | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 copyobject" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "copyobject",
            message: "Mock response for s3 copyobject"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api copyobject | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 createbucket" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "createbucket",
            message: "Mock response for s3 createbucket"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api createbucket | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 createbucketmetadataconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "createbucketmetadataconfiguration",
            message: "Mock response for s3 createbucketmetadataconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api createbucketmetadataconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 createbucketmetadatatableconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "createbucketmetadatatableconfiguration",
            message: "Mock response for s3 createbucketmetadatatableconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api createbucketmetadatatableconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 createmultipartupload" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "createmultipartupload",
            message: "Mock response for s3 createmultipartupload"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api createmultipartupload | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 createsession" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "createsession",
            message: "Mock response for s3 createsession"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api createsession | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 deletebucket" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "deletebucket",
            message: "Mock response for s3 deletebucket"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api deletebucket | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 deletebucketanalyticsconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "deletebucketanalyticsconfiguration",
            message: "Mock response for s3 deletebucketanalyticsconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api deletebucketanalyticsconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 deletebucketcors" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "deletebucketcors",
            message: "Mock response for s3 deletebucketcors"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api deletebucketcors | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 deletebucketencryption" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "deletebucketencryption",
            message: "Mock response for s3 deletebucketencryption"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api deletebucketencryption | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 deletebucketintelligenttieringconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "deletebucketintelligenttieringconfiguration",
            message: "Mock response for s3 deletebucketintelligenttieringconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api deletebucketintelligenttieringconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 deletebucketinventoryconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "deletebucketinventoryconfiguration",
            message: "Mock response for s3 deletebucketinventoryconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api deletebucketinventoryconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 deletebucketlifecycle" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "deletebucketlifecycle",
            message: "Mock response for s3 deletebucketlifecycle"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api deletebucketlifecycle | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 deletebucketmetadataconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "deletebucketmetadataconfiguration",
            message: "Mock response for s3 deletebucketmetadataconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api deletebucketmetadataconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 deletebucketmetadatatableconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "deletebucketmetadatatableconfiguration",
            message: "Mock response for s3 deletebucketmetadatatableconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api deletebucketmetadatatableconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 deletebucketmetricsconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "deletebucketmetricsconfiguration",
            message: "Mock response for s3 deletebucketmetricsconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api deletebucketmetricsconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 deletebucketownershipcontrols" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "deletebucketownershipcontrols",
            message: "Mock response for s3 deletebucketownershipcontrols"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api deletebucketownershipcontrols | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 deletebucketpolicy" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "deletebucketpolicy",
            message: "Mock response for s3 deletebucketpolicy"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api deletebucketpolicy | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 deletebucketreplication" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "deletebucketreplication",
            message: "Mock response for s3 deletebucketreplication"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api deletebucketreplication | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 deletebuckettagging" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "deletebuckettagging",
            message: "Mock response for s3 deletebuckettagging"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api deletebuckettagging | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 deletebucketwebsite" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "deletebucketwebsite",
            message: "Mock response for s3 deletebucketwebsite"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api deletebucketwebsite | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 deleteobject" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "deleteobject",
            message: "Mock response for s3 deleteobject"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api deleteobject | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 deleteobjecttagging" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "deleteobjecttagging",
            message: "Mock response for s3 deleteobjecttagging"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api deleteobjecttagging | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 deleteobjects" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "deleteobjects",
            message: "Mock response for s3 deleteobjects"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api deleteobjects | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 deletepublicaccessblock" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "deletepublicaccessblock",
            message: "Mock response for s3 deletepublicaccessblock"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api deletepublicaccessblock | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbucketaccelerateconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbucketaccelerateconfiguration",
            message: "Mock response for s3 getbucketaccelerateconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbucketaccelerateconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbucketacl" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbucketacl",
            message: "Mock response for s3 getbucketacl"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbucketacl | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbucketanalyticsconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbucketanalyticsconfiguration",
            message: "Mock response for s3 getbucketanalyticsconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbucketanalyticsconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbucketcors" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbucketcors",
            message: "Mock response for s3 getbucketcors"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbucketcors | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbucketencryption" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbucketencryption",
            message: "Mock response for s3 getbucketencryption"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbucketencryption | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbucketintelligenttieringconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbucketintelligenttieringconfiguration",
            message: "Mock response for s3 getbucketintelligenttieringconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbucketintelligenttieringconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbucketinventoryconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbucketinventoryconfiguration",
            message: "Mock response for s3 getbucketinventoryconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbucketinventoryconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbucketlifecycle" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbucketlifecycle",
            message: "Mock response for s3 getbucketlifecycle"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbucketlifecycle | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbucketlifecycleconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbucketlifecycleconfiguration",
            message: "Mock response for s3 getbucketlifecycleconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbucketlifecycleconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbucketlocation" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbucketlocation",
            message: "Mock response for s3 getbucketlocation"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbucketlocation | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbucketlogging" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbucketlogging",
            message: "Mock response for s3 getbucketlogging"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbucketlogging | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbucketmetadataconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbucketmetadataconfiguration",
            message: "Mock response for s3 getbucketmetadataconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbucketmetadataconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbucketmetadatatableconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbucketmetadatatableconfiguration",
            message: "Mock response for s3 getbucketmetadatatableconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbucketmetadatatableconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbucketmetricsconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbucketmetricsconfiguration",
            message: "Mock response for s3 getbucketmetricsconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbucketmetricsconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbucketnotification" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbucketnotification",
            message: "Mock response for s3 getbucketnotification"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbucketnotification | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbucketnotificationconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbucketnotificationconfiguration",
            message: "Mock response for s3 getbucketnotificationconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbucketnotificationconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbucketownershipcontrols" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbucketownershipcontrols",
            message: "Mock response for s3 getbucketownershipcontrols"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbucketownershipcontrols | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbucketpolicy" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbucketpolicy",
            message: "Mock response for s3 getbucketpolicy"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbucketpolicy | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbucketpolicystatus" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbucketpolicystatus",
            message: "Mock response for s3 getbucketpolicystatus"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbucketpolicystatus | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbucketreplication" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbucketreplication",
            message: "Mock response for s3 getbucketreplication"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbucketreplication | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbucketrequestpayment" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbucketrequestpayment",
            message: "Mock response for s3 getbucketrequestpayment"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbucketrequestpayment | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbuckettagging" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbuckettagging",
            message: "Mock response for s3 getbuckettagging"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbuckettagging | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbucketversioning" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbucketversioning",
            message: "Mock response for s3 getbucketversioning"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbucketversioning | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getbucketwebsite" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getbucketwebsite",
            message: "Mock response for s3 getbucketwebsite"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getbucketwebsite | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getobject" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getobject",
            message: "Mock response for s3 getobject"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getobject | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getobjectacl" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getobjectacl",
            message: "Mock response for s3 getobjectacl"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getobjectacl | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getobjectattributes" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getobjectattributes",
            message: "Mock response for s3 getobjectattributes"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getobjectattributes | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getobjectlegalhold" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getobjectlegalhold",
            message: "Mock response for s3 getobjectlegalhold"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getobjectlegalhold | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getobjectlockconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getobjectlockconfiguration",
            message: "Mock response for s3 getobjectlockconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getobjectlockconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getobjectretention" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getobjectretention",
            message: "Mock response for s3 getobjectretention"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getobjectretention | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getobjecttagging" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getobjecttagging",
            message: "Mock response for s3 getobjecttagging"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getobjecttagging | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getobjecttorrent" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getobjecttorrent",
            message: "Mock response for s3 getobjecttorrent"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getobjecttorrent | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 getpublicaccessblock" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "getpublicaccessblock",
            message: "Mock response for s3 getpublicaccessblock"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api getpublicaccessblock | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 headbucket" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "headbucket",
            message: "Mock response for s3 headbucket"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api headbucket | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 headobject" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "headobject",
            message: "Mock response for s3 headobject"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api headobject | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 listbucketanalyticsconfigurations" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "listbucketanalyticsconfigurations",
            message: "Mock response for s3 listbucketanalyticsconfigurations"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api listbucketanalyticsconfigurations | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 listbucketintelligenttieringconfigurations" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "listbucketintelligenttieringconfigurations",
            message: "Mock response for s3 listbucketintelligenttieringconfigurations"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api listbucketintelligenttieringconfigurations | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 listbucketinventoryconfigurations" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "listbucketinventoryconfigurations",
            message: "Mock response for s3 listbucketinventoryconfigurations"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api listbucketinventoryconfigurations | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 listbucketmetricsconfigurations" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "listbucketmetricsconfigurations",
            message: "Mock response for s3 listbucketmetricsconfigurations"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api listbucketmetricsconfigurations | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 listbuckets" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "listbuckets",
            message: "Mock response for s3 listbuckets"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api listbuckets | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 listdirectorybuckets" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "listdirectorybuckets",
            message: "Mock response for s3 listdirectorybuckets"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api listdirectorybuckets | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 listmultipartuploads" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "listmultipartuploads",
            message: "Mock response for s3 listmultipartuploads"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api listmultipartuploads | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 listobjectversions" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "listobjectversions",
            message: "Mock response for s3 listobjectversions"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api listobjectversions | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 listobjects" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "listobjects",
            message: "Mock response for s3 listobjects"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api listobjects | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 listobjectsv2" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "listobjectsv2",
            message: "Mock response for s3 listobjectsv2"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api listobjectsv2 | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 listparts" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "listparts",
            message: "Mock response for s3 listparts"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api listparts | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putbucketaccelerateconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putbucketaccelerateconfiguration",
            message: "Mock response for s3 putbucketaccelerateconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putbucketaccelerateconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putbucketacl" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putbucketacl",
            message: "Mock response for s3 putbucketacl"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putbucketacl | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putbucketanalyticsconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putbucketanalyticsconfiguration",
            message: "Mock response for s3 putbucketanalyticsconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putbucketanalyticsconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putbucketcors" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putbucketcors",
            message: "Mock response for s3 putbucketcors"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putbucketcors | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putbucketencryption" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putbucketencryption",
            message: "Mock response for s3 putbucketencryption"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putbucketencryption | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putbucketintelligenttieringconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putbucketintelligenttieringconfiguration",
            message: "Mock response for s3 putbucketintelligenttieringconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putbucketintelligenttieringconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putbucketinventoryconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putbucketinventoryconfiguration",
            message: "Mock response for s3 putbucketinventoryconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putbucketinventoryconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putbucketlifecycle" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putbucketlifecycle",
            message: "Mock response for s3 putbucketlifecycle"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putbucketlifecycle | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putbucketlifecycleconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putbucketlifecycleconfiguration",
            message: "Mock response for s3 putbucketlifecycleconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putbucketlifecycleconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putbucketlogging" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putbucketlogging",
            message: "Mock response for s3 putbucketlogging"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putbucketlogging | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putbucketmetricsconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putbucketmetricsconfiguration",
            message: "Mock response for s3 putbucketmetricsconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putbucketmetricsconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putbucketnotification" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putbucketnotification",
            message: "Mock response for s3 putbucketnotification"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putbucketnotification | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putbucketnotificationconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putbucketnotificationconfiguration",
            message: "Mock response for s3 putbucketnotificationconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putbucketnotificationconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putbucketownershipcontrols" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putbucketownershipcontrols",
            message: "Mock response for s3 putbucketownershipcontrols"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putbucketownershipcontrols | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putbucketpolicy" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putbucketpolicy",
            message: "Mock response for s3 putbucketpolicy"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putbucketpolicy | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putbucketreplication" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putbucketreplication",
            message: "Mock response for s3 putbucketreplication"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putbucketreplication | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putbucketrequestpayment" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putbucketrequestpayment",
            message: "Mock response for s3 putbucketrequestpayment"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putbucketrequestpayment | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putbuckettagging" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putbuckettagging",
            message: "Mock response for s3 putbuckettagging"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putbuckettagging | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putbucketversioning" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putbucketversioning",
            message: "Mock response for s3 putbucketversioning"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putbucketversioning | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putbucketwebsite" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putbucketwebsite",
            message: "Mock response for s3 putbucketwebsite"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putbucketwebsite | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putobject" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putobject",
            message: "Mock response for s3 putobject"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putobject | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putobjectacl" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putobjectacl",
            message: "Mock response for s3 putobjectacl"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putobjectacl | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putobjectlegalhold" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putobjectlegalhold",
            message: "Mock response for s3 putobjectlegalhold"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putobjectlegalhold | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putobjectlockconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putobjectlockconfiguration",
            message: "Mock response for s3 putobjectlockconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putobjectlockconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putobjectretention" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putobjectretention",
            message: "Mock response for s3 putobjectretention"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putobjectretention | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putobjecttagging" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putobjecttagging",
            message: "Mock response for s3 putobjecttagging"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putobjecttagging | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 putpublicaccessblock" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "putpublicaccessblock",
            message: "Mock response for s3 putpublicaccessblock"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api putpublicaccessblock | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 renameobject" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "renameobject",
            message: "Mock response for s3 renameobject"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api renameobject | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 restoreobject" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "restoreobject",
            message: "Mock response for s3 restoreobject"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api restoreobject | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 selectobjectcontent" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "selectobjectcontent",
            message: "Mock response for s3 selectobjectcontent"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api selectobjectcontent | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 updatebucketmetadatainventorytableconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "updatebucketmetadatainventorytableconfiguration",
            message: "Mock response for s3 updatebucketmetadatainventorytableconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api updatebucketmetadatainventorytableconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 updatebucketmetadatajournaltableconfiguration" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "updatebucketmetadatajournaltableconfiguration",
            message: "Mock response for s3 updatebucketmetadatajournaltableconfiguration"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api updatebucketmetadatajournaltableconfiguration | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 uploadpart" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "uploadpart",
            message: "Mock response for s3 uploadpart"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api uploadpart | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 uploadpartcopy" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "uploadpartcopy",
            message: "Mock response for s3 uploadpartcopy"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api uploadpartcopy | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# 
export def "aws s3 writegetobjectresponse" []: nothing -> any {
    # Check if in mock mode
    let mock_env_var = "S3_MOCK_MODE"
    let mock_mode = try { $env | get $mock_env_var | into bool } catch { false }
    
    if $mock_mode {
        # Return mock response
        {
            mock: true,
            service: "s3",
            operation: "writegetobjectresponse",
            message: "Mock response for s3 writegetobjectresponse"
        }
    } else {
        # Execute AWS CLI with enhanced error handling and span awareness
        try {
            let result = aws s3api writegetobjectresponse | from json
            # Apply response data transformation
            $result | transform-aws-response
        } catch { |err|
            # Enhanced AWS error mapping with specific error codes
            let aws_error = parse-aws-error $err
            error make {
                msg: $"AWS ($service) error: { $aws_error.message }",
                label: {
                    text: $"($aws_error.code): ($aws_error.suggestion)",
                    span: (metadata $err).span
                },
                help: $"Use 'aws ($service) help ($operation.name)' for more information"
            }
        }
    }
}

# AWS S3 Service Module - End
# Use 'aws s3 info' to get service information
# Use 'help aws s3' to see available operations
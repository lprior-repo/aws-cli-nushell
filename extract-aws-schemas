#!/usr/bin/env nu

# AWS OpenAPI Schema Extractor
# Standalone executable script for extracting AWS service schemas
# 
# Usage:
#   ./extract-aws-schemas single stepfunctions --output-dir ./schemas --validate
#   ./extract-aws-schemas batch stepfunctions,s3,dynamodb --output-dir ./schemas --continue-on-error
#   ./extract-aws-schemas --help

use aws_openapi_extractor.nu *

# Main function renamed to avoid conflict
def extract_cli_main [
    command?: string,                       # Command: 'single' or 'batch'
    services?: string,                      # Service name (single) or comma-separated list (batch)
    --output-dir: string = "./schemas",     # Output directory for schemas
    --version: string = "",                 # Specific version (default: latest)  
    --no-cache,                            # Disable caching
    --validate,                            # Validate generated schemas
    --continue-on-error,                   # Continue processing if one service fails (batch only)
    --help                                 # Show help information
] {
    if $help or $command == null {
        print "AWS OpenAPI Schema Extractor"
        print ""
        print "USAGE:"
        print "    extract-aws-schemas single <service> [OPTIONS]"
        print "    extract-aws-schemas batch <service1,service2,...> [OPTIONS]"
        print ""
        print "COMMANDS:"
        print "    single    Extract schema for a single AWS service"
        print "    batch     Extract schemas for multiple AWS services"
        print ""
        print "OPTIONS:"
        print "    --output-dir DIR      Output directory for schemas (default: ./schemas)"
        print "    --version VERSION     Specific version to extract (default: latest)"
        print "    --no-cache           Disable caching of downloaded specifications"
        print "    --validate           Validate generated schemas for completeness"
        print "    --continue-on-error  Continue processing if one service fails (batch only)"
        print "    --help               Show this help message"
        print ""
        print "EXAMPLES:"
        print "    # Extract single service"
        print "    ./extract-aws-schemas single stepfunctions --validate"
        print ""
        print "    # Extract multiple services with error handling"
        print "    ./extract-aws-schemas batch stepfunctions,s3,dynamodb --continue-on-error"
        print ""
        print "    # Extract with custom output directory and no caching"
        print "    ./extract-aws-schemas single lambda --output-dir /tmp/schemas --no-cache"
        return
    }
    
    match $command {
        "single" => {
            try {
                # Call the main function from the aws_openapi_extractor module
                if $no_cache and $validate {
                    main $services --output-dir $output_dir --version $version --no-cache --validate
                } else if $no_cache {
                    main $services --output-dir $output_dir --version $version --no-cache
                } else if $validate {
                    main $services --output-dir $output_dir --version $version --validate
                } else {
                    main $services --output-dir $output_dir --version $version
                }
                print $"✓ Successfully extracted schema for ($services)"
            } catch { |err|
                print $"✗ Failed to extract schema for ($services): ($err.msg)"
                exit 1
            }
        }
        
        "batch" => {
            let service_list = ($services | split row "," | each {|s| $s | str trim})
            print $"Extracting schemas for ($service_list | length) services..."
            
            try {
                if $no_cache and $validate and $continue_on_error {
                    batch $service_list --output-dir $output_dir --no-cache --validate --continue-on-error
                } else if $no_cache and $validate {
                    batch $service_list --output-dir $output_dir --no-cache --validate
                } else if $no_cache and $continue_on_error {
                    batch $service_list --output-dir $output_dir --no-cache --continue-on-error
                } else if $validate and $continue_on_error {
                    batch $service_list --output-dir $output_dir --validate --continue-on-error
                } else if $no_cache {
                    batch $service_list --output-dir $output_dir --no-cache
                } else if $validate {
                    batch $service_list --output-dir $output_dir --validate
                } else if $continue_on_error {
                    batch $service_list --output-dir $output_dir --continue-on-error
                } else {
                    batch $service_list --output-dir $output_dir
                }
                print "✓ Batch extraction completed successfully"
            } catch { |err|
                print $"✗ Batch extraction failed: ($err.msg)"
                exit 1
            }
        }
        
        _ => {
            print $"Error: Unknown command '($command)'"
            print "Use --help for usage information"
            exit 1
        }
    }
}

# This is the script's main function - called when executed
def main [
    command?: string,                       # Command: 'single' or 'batch'
    services?: string,                      # Service name (single) or comma-separated list (batch)
    --output-dir: string = "./schemas",     # Output directory for schemas
    --version: string = "",                 # Specific version (default: latest)  
    --no-cache,                            # Disable caching
    --validate,                            # Validate generated schemas
    --continue-on-error,                   # Continue processing if one service fails (batch only)
    --help                                 # Show help information
] {
    if $no_cache and $validate and $continue_on_error and $help {
        extract_cli_main $command $services --output-dir $output_dir --version $version --no-cache --validate --continue-on-error --help
    } else if $no_cache and $validate and $continue_on_error {
        extract_cli_main $command $services --output-dir $output_dir --version $version --no-cache --validate --continue-on-error
    } else if $no_cache and $validate and $help {
        extract_cli_main $command $services --output-dir $output_dir --version $version --no-cache --validate --help
    } else if $no_cache and $validate {
        extract_cli_main $command $services --output-dir $output_dir --version $version --no-cache --validate
    } else if $no_cache and $continue_on_error {
        extract_cli_main $command $services --output-dir $output_dir --version $version --no-cache --continue-on-error
    } else if $validate and $continue_on_error {
        extract_cli_main $command $services --output-dir $output_dir --version $version --validate --continue-on-error
    } else if $no_cache {
        extract_cli_main $command $services --output-dir $output_dir --version $version --no-cache
    } else if $validate {
        extract_cli_main $command $services --output-dir $output_dir --version $version --validate
    } else if $continue_on_error {
        extract_cli_main $command $services --output-dir $output_dir --version $version --continue-on-error
    } else if $help {
        extract_cli_main $command $services --output-dir $output_dir --version $version --help
    } else {
        extract_cli_main $command $services --output-dir $output_dir --version $version
    }
}

